<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEOZ8wJDmfMOQ5nzKEOZ82ZDmfOjQ5nzy0OZ
        8+VDmvTxRZz38TeE1+UtdMHNLnfFpS95x2gveMYoMHrIDjJ8ywIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDmfMQQ5nzOEOY85dDmfPjQ5nz/0OZ
        8/9DmfP/Q5v1/0Wc9/82g9b/KnG8/yx0wP8tdcH/LXXB/y52wuUveMWbL3fEOjJ8yxIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ5nzKEOZ84NDmfPnQ5nz/0OZ
        8/9DmfP/Q5nz/0Sb9v9Emvb/N4bY/ypwu/8sdMH/LnbD/y52w/8udsP/LXXC/y10wf8udcLpL3fFhzB5
        yCw1g9QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ5nzBEOZ8z5DmfOxQ5nz+UOZ
        8/9DmfP/Q5nz/0OZ8/9Em/b/Q5n0/zeF1/8rcr3/LXTA/y52w/8udsP/LnbD/y52w/8udsP/LnbD/y11
        wv8tdMH5LnXDty94xUIzf88GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEOZ8wRDmfNOQ5nzx0OY
        8/lDmfP/Q5nz/0OZ8/9DmfP/RJv2/0OZ9P83hNf/LHO//yx0wP8udsP/LnbD/y52w/8udsP/LnbD/y52
        w/8udsP/LnbD/y11wv8tdMH7LXXCzS52w1Q2hdUGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ5jzQEOZ
        88lDmfP7Q5nz/0OZ8/9DmfP/Q5nz/0Sb9v9DmvT/N4XX/yx0wP8sdMH/LXbD/y52w/8udsP/LnbD/y52
        w/8udsP/LnbD/y52w/8udsP/LnbD/y11wv8tdMH9LXXBzS94xUQAAAAAAAAAAAAAAAAAAAAAAAAAAEOZ
        8yhDmfOxQ5nz+0OZ8/9DmfP/Q5nz/0OZ8/9Dm/X/RJv2/zeF2P8sc7//LHTA/y12w/8udsP/LnbD/y52
        w/8udsP/LnbD/y52w/8udsP/LnbD/y52w/8udsP/LnbD/y11wv8tdMD7LnbDuTB7yS4AAAAAAAAAAAAA
        AABDmfMOQ5nzeEOZ8/lDmfP/Q5nz/0OZ8/9DmfP/Q5r0/0Wc+P83hdj/K3K+/yx0wP8tdsP/LnbD/y52
        w/8udsP/LnbD/y52w/8udsP/LnbD/y52w/8udsP/LnbD/y52w/8udsP/LnbD/y11wv8tdMD7L3jFgTSB
        0RAAAAAAQ5nzAkOZ8zpDmfPvQ5nz/0OZ8/9DmfP/Q5nz/0Ka9P9Bmvb/MoHV/yduu/8pcsD/KnPC/ypz
        wf8qc8H/KnPB/ypzwf8qc8H/KnPB/ypzwf8qc8H/KnPB/ypzwf8qc8H/KnPC/y11wv8udsP/LnbD/y11
        wf8udcLzL3fFPDN+zwJDmfMMQ5nzj0OZ8/9DmfP/Q5nz/0OZ8/9Al/T/PJb1/yt80v8iarj/JW6+/yVw
        wP8lb8D/JW/A/yVvwP8lb8D/JW/A/yVvwP8lb8D/JW/A/yVvwP8lb8D/JW/A/yVvwP8jbr//JXDA/yt0
        wv8udsP/LnbD/yx0v/8veMaZMXvLDkOZ8yJDmfPlQ5nz/0OZ8/9DmfP/Ppbz/zmT8v9doOT/lLfb/6XF
        5P+lx+f/pcfn/6XH5/+lx+f/pcfn/6XH5/+lx+f/pcfn/6XH5/+lx+f/pcfn/6XH5/+lx+f/pcbm/5K4
        3/9Qjc3/I26//ypzwf8udsP/LXXB/y52w+0wecgoQ5jzWEOZ8/9DmfP/Q5nz/z2V8v89lfL/jcH0/9vp
        9f/0/f7/8/z+//P8/v/z/P7/8/z+//P8/v/z/P7/8/z+//P8/v/z/P7/8/z+//P8/v/z/P7/8/z+//P8
        /v/z/P7/8vv+/9Dj8/9knNT/Im2//yx0wv8udsL/LHO//y95xmRDmfOdQ5nz/0OZ8/9CmPP/NpHy/3a4
        9v/o9P3/8Pv+/+b6/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5
        /v/l+f7/5fn+/+X5/v/m+v7/7/v+/8Pb7/9Bg8j/Im2//y10wP8rcr3/N4bYp0OZ88dDmfP/Q5nz/zyV
        8v9DmfP/str6/+/9/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5
        /v/l+f7/5fn+/+X5/v/l+f7/5fn+/+T5/v/p+v7/4+/4/2ig1v8garz/KnK9/zeF1/9DmfTRQ5nz6UOZ
        8/9DmfP/OZPy/0qd8//B4vv/7P7//+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5
        /v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5Pj+/+r5/v/n8vr/b6TW/yBpuv82hNf/Q5r1/0Sa
        9OlDmfPzQ5nz/0OZ8/8+lvL/PZXy/6fU+f/1/P7/5vj+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5
        /v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/k+f7/6vv+/9bl8v9Pi8n/J3nR/0Oa
        9f9EmvX/Q5jy80OZ8/NDmfP/Q5nz/0OZ8/81kPL/V6T0/9Po/P/2/v7/5fn+/+T5/v/k+f7/5fn+/+X5
        /v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/4vj+/+39/v/m7/f/fq3Y/yl8
        0/9AmfX/RJr1/0OY8v9DmfPzQ5nz50OZ8/9DmfP/Q5nz/0KY8/80j/H/Xan0/8Ph+//p9P3/5vn+/+T5
        /v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+T4/v/s+v7/1un0/3Gh
        0/8pe9P/PJXz/0Wc9v9DmPL/Q5nz/0OZ8+dDmfPHQ5nz/0OZ8/9DmfP/Q5nz/0GY8/8yj/H/NJDx/5nK
        +P/x/f7/5vr+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5Pn+//z+
        /v99rNj/EmjK/z2W8/9GnPb/Q5ny/0OZ8/9DmfP/Q5jzz0OZ85lDmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/8eg/D/kMb4//n9/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+X5/v/l+f7/5Pn+/+T5
        /v/u/P7/6vb6/0yV3/8wjO//RZv2/0OY8v9DmfP/Q5nz/0OZ8/9DmfOnQ5nzVEOZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz/yiJ8f+Yyvj/+f3+/+T5/v/l+f7/5fn+/+X5/v/l+f7/5fn+/+T5/v/m+f7/8fz+//P8
        /v/z/P7/8/z+/+j0/f+Nw/X/MY7w/0Ka9f9DmPL/Q5nz/0OZ8/9DmfP/Q5nz/0OZ82BDmfMgQ5nz40OZ
        8/9DmfP/Q5nz/0OZ8/9DmfP/NZHx/2Gq9P/p+P7/7/v+/+P4/v/l+f7/5fn+/+X5/v/k+f7/5/r+/+v3
        /v/B4fv/weD7/87m+/+22Pr/d7b2/zuU8v8/l/P/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmPPrQpnyJkOZ
        8wxDmfOJQ5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfL/NJDx/5LG+P/4/f7/8fz+/+f6/v/l+f7/5fn+/+/9
        /v/1+/7/stj6/0GY8v9Bl/L/S53z/z6W8v85k/L/P5fy/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        85NDmfMMQ5nzAEOZ8zhDmfPtQ5nz/0OZ8/9DmfP/Q5nz/0OZ8/8/lvL/OJLy/4XA9//b8Pz/+P7+//z+
        /v/7/v7/7Pn+/5vK+P8/lvL/NpHy/z+W8v8+lvL/P5by/0GY8v9DmfL/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfPvQ5nzOkOZ8wIAAAAAQ5nzDEOZ83RDmfP5Q5nz/0OZ8/9DmfP/Q5nz/0SZ8/9Al/L/Lo3x/0KZ
        8/9qrvX/eLf2/3Gy9v9Pn/T/KIrx/zyU8v9FmvP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz+UOZ83pDmfMOAAAAAAAAAAAAAAAAQ5nyJkOZ861DmfP5Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/OpPy/y+N8f8si/H/LYzx/zaS8v9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz/0OZ8/tDmfO1Q5nzKgAAAAAAAAAAAAAAAAAAAAAAAAAAQ5nzPEOZ88NDmfP7Q5nz/0OZ
        8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz/0OZ8/9DmfP7Q5nzx0OZ80AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDmfMCQ5nzRkOZ
        88NDmfP5Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz/0OZ8/9DmfP/Q5jz+UOZ88dDmfJMQ5nzAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABDmfMCQ5nzPEOZ86tCmfP5Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/lDmPOvQ5nzPkOZ8wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAQpjyJkOZ83pDmfPjQ5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfPnQ5nzfkOZ8ygAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ5nzDkOZ8zZCmPKNQ5nz20OZ8/9DmfP/Q5nz/0OZ
        8/9DmfP/Q5nz/0OZ8/9DmfP/Q5nz/0OZ8/9DmfPdQ5nykUOZ8zhDmfMQAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ5nzAkOZ8wxDmfMiQ5nyWEOZ
        85dDmfPDQ5nz40OZ8/NDmfPzQ5nz40OZ88NDmfOZQ5nzXEOZ8iRDmfMMQ5nzAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//AP//+AAf/+AAB//AAAP/gAAB/wAAAP4AAAB+AAAAPAAAADgAAAAYAA
        AAGAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAYAAAAHAAAAD4AAAB+AA
        AAfwAAAP+AAAH/wAAD//AAD//4AB///wD/8=
</value>
  </data>
</root>