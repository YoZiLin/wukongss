<?xml version="1.0"?>
<doc>
    <assembly>
        <name>zxing.Fakes</name>
    </assembly>
    <members>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.ZxingDelegates">
            <summary>包含用于 zxing 的存根和填充码的自定义委托</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecEncodingOptions">
            <summary>ZXing.Aztec.AztecEncodingOptions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.#ctor(ZXing.Aztec.AztecEncodingOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.AllInstances.ErrorCorrectionGet">
            <summary>设置 AztecEncodingOptions.get_ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.AllInstances.ErrorCorrectionSetNullableOfInt32">
            <summary>设置 AztecEncodingOptions.set_ErrorCorrection(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.AllInstances.LayersGet">
            <summary>设置 AztecEncodingOptions.get_Layers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.AllInstances.LayersSetNullableOfInt32">
            <summary>设置 AztecEncodingOptions.set_Layers(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.Constructor">
            <summary>设置 AztecEncodingOptions.AztecEncodingOptions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.ErrorCorrectionGet">
            <summary>设置 AztecEncodingOptions.get_ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.ErrorCorrectionSetNullableOfInt32">
            <summary>设置 AztecEncodingOptions.set_ErrorCorrection(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.LayersGet">
            <summary>设置 AztecEncodingOptions.get_Layers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecEncodingOptions.LayersSetNullableOfInt32">
            <summary>设置 AztecEncodingOptions.set_Layers(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecReader">
            <summary>ZXing.Aztec.AztecReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecReader.#ctor(ZXing.Aztec.AztecReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 AztecReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 AztecReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.AllInstances.reset">
            <summary>设置 AztecReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.Constructor">
            <summary>设置 AztecReader.AztecReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.decodeBinaryBitmap">
            <summary>设置 AztecReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 AztecReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecReader.reset">
            <summary>设置 AztecReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecResultMetadata">
            <summary>ZXing.Aztec.AztecResultMetadata 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecResultMetadata.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecResultMetadata.#ctor(ZXing.Aztec.AztecResultMetadata)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecResultMetadata.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.AllInstances.CompactGet">
            <summary>设置 AztecResultMetadata.get_Compact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.AllInstances.CompactSetBoolean">
            <summary>设置 AztecResultMetadata.set_Compact(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.AllInstances.DatablocksGet">
            <summary>设置 AztecResultMetadata.get_Datablocks() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.AllInstances.DatablocksSetInt32">
            <summary>设置 AztecResultMetadata.set_Datablocks(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.AllInstances.LayersGet">
            <summary>设置 AztecResultMetadata.get_Layers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.AllInstances.LayersSetInt32">
            <summary>设置 AztecResultMetadata.set_Layers(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecResultMetadata.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecResultMetadata.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.CompactGet">
            <summary>设置 AztecResultMetadata.get_Compact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.CompactSetBoolean">
            <summary>设置 AztecResultMetadata.set_Compact(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.ConstructorBooleanInt32Int32">
            <summary>设置 AztecResultMetadata.AztecResultMetadata(Boolean compact, Int32 datablocks, Int32 layers) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.DatablocksGet">
            <summary>设置 AztecResultMetadata.get_Datablocks() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.DatablocksSetInt32">
            <summary>设置 AztecResultMetadata.set_Datablocks(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.LayersGet">
            <summary>设置 AztecResultMetadata.get_Layers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecResultMetadata.LayersSetInt32">
            <summary>设置 AztecResultMetadata.set_Layers(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecWriter">
            <summary>ZXing.Aztec.AztecWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecWriter.#ctor(ZXing.Aztec.AztecWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.ShimAztecWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.AllInstances.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 AztecWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 AztecWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.ShimAztecWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.Constructor">
            <summary>设置 AztecWriter.AztecWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.StaticConstructor">
            <summary>设置 AztecWriter.AztecWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 AztecWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.encodeStringBarcodeFormatInt32Int32EncodingInt32Int32">
            <summary>设置 AztecWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, Encoding charset, Int32 eccPercent, Int32 layers) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 AztecWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.ShimAztecWriter.renderResultAztecCodeInt32Int32">
            <summary>设置 AztecWriter.renderResult(AztecCode code, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.StubAztecEncodingOptions">
            <summary>ZXing.Aztec.AztecEncodingOptions 的存根类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.StubAztecEncodingOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.StubAztecEncodingOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.StubAztecEncodingOptions.InitializeStub">
            <summary>初始化 type StubAztecEncodingOptions 的新实例</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.StubAztecEncodingOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.StubAztecEncodingOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Aztec.Fakes.StubAztecReader">
            <summary>ZXing.Aztec.AztecReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.StubAztecReader.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.StubAztecReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Fakes.StubAztecReader.InitializeStub">
            <summary>初始化 type StubAztecReader 的新实例</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.StubAztecReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Aztec.Fakes.StubAztecReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimAztecCode">
            <summary>ZXing.Aztec.Internal.AztecCode 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecCode.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecCode.#ctor(ZXing.Aztec.Internal.AztecCode)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.CodeWordsGet">
            <summary>设置 AztecCode.get_CodeWords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.CodeWordsSetInt32">
            <summary>设置 AztecCode.set_CodeWords(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.LayersGet">
            <summary>设置 AztecCode.get_Layers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.LayersSetInt32">
            <summary>设置 AztecCode.set_Layers(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.MatrixGet">
            <summary>设置 AztecCode.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.MatrixSetBitMatrix">
            <summary>设置 AztecCode.set_Matrix(BitMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.SizeGet">
            <summary>设置 AztecCode.get_Size() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.SizeSetInt32">
            <summary>设置 AztecCode.set_Size(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.isCompactGet">
            <summary>设置 AztecCode.get_isCompact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.AllInstances.isCompactSetBoolean">
            <summary>设置 AztecCode.set_isCompact(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecCode.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecCode.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.CodeWordsGet">
            <summary>设置 AztecCode.get_CodeWords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.CodeWordsSetInt32">
            <summary>设置 AztecCode.set_CodeWords(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.Constructor">
            <summary>设置 AztecCode.AztecCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.LayersGet">
            <summary>设置 AztecCode.get_Layers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.LayersSetInt32">
            <summary>设置 AztecCode.set_Layers(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.MatrixGet">
            <summary>设置 AztecCode.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.MatrixSetBitMatrix">
            <summary>设置 AztecCode.set_Matrix(BitMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.SizeGet">
            <summary>设置 AztecCode.get_Size() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.SizeSetInt32">
            <summary>设置 AztecCode.set_Size(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.isCompactGet">
            <summary>设置 AztecCode.get_isCompact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecCode.isCompactSetBoolean">
            <summary>设置 AztecCode.set_isCompact(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult">
            <summary>ZXing.Aztec.Internal.AztecDetectorResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.#ctor(ZXing.Aztec.Internal.AztecDetectorResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.AllInstances.CompactGet">
            <summary>设置 AztecDetectorResult.get_Compact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.AllInstances.CompactSetBoolean">
            <summary>设置 AztecDetectorResult.set_Compact(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.AllInstances.NbDatablocksGet">
            <summary>设置 AztecDetectorResult.get_NbDatablocks() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.AllInstances.NbDatablocksSetInt32">
            <summary>设置 AztecDetectorResult.set_NbDatablocks(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.AllInstances.NbLayersGet">
            <summary>设置 AztecDetectorResult.get_NbLayers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.AllInstances.NbLayersSetInt32">
            <summary>设置 AztecDetectorResult.set_NbLayers(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.CompactGet">
            <summary>设置 AztecDetectorResult.get_Compact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.CompactSetBoolean">
            <summary>设置 AztecDetectorResult.set_Compact(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.ConstructorBitMatrixResultPointArrayBooleanInt32Int32">
            <summary>设置 AztecDetectorResult.AztecDetectorResult(BitMatrix bits, ResultPoint[] points, Boolean compact, Int32 nbDatablocks, Int32 nbLayers) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.NbDatablocksGet">
            <summary>设置 AztecDetectorResult.get_NbDatablocks() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.NbDatablocksSetInt32">
            <summary>设置 AztecDetectorResult.set_NbDatablocks(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.NbLayersGet">
            <summary>设置 AztecDetectorResult.get_NbLayers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimAztecDetectorResult.NbLayersSetInt32">
            <summary>设置 AztecDetectorResult.set_NbLayers(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken">
            <summary>ZXing.Aztec.Internal.BinaryShiftToken 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.#ctor(ZXing.Aztec.Internal.BinaryShiftToken)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.AllInstances.ToString01">
            <summary>设置 BinaryShiftToken.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.AllInstances.appendToBitArrayByteArray">
            <summary>设置 BinaryShiftToken.appendTo(BitArray bitArray, Byte[] text) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.ConstructorTokenInt32Int32">
            <summary>设置 BinaryShiftToken.BinaryShiftToken(Token previous, Int32 binaryShiftStart, Int32 binaryShiftByteCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.ToString">
            <summary>设置 BinaryShiftToken.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimBinaryShiftToken.appendToBitArrayByteArray">
            <summary>设置 BinaryShiftToken.appendTo(BitArray bitArray, Byte[] text) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimDecoder">
            <summary>ZXing.Aztec.Internal.Decoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDecoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDecoder.#ctor(ZXing.Aztec.Internal.Decoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimDecoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.AllInstances.correctBitsBooleanArray">
            <summary>设置 Decoder.correctBits(Boolean[] rawbits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.AllInstances.decodeAztecDetectorResult">
            <summary>设置 Decoder.decode(AztecDetectorResult detectorResult) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.AllInstances.extractBitsBitMatrix">
            <summary>设置 Decoder.extractBits(BitMatrix matrix) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.Constructor">
            <summary>设置 Decoder.Decoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.StaticConstructor">
            <summary>设置 Decoder.Decoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.convertBoolArrayToByteArrayBooleanArray">
            <summary>设置 Decoder.convertBoolArrayToByteArray(Boolean[] boolArr) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.correctBitsBooleanArray">
            <summary>设置 Decoder.correctBits(Boolean[] rawbits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.decodeAztecDetectorResult">
            <summary>设置 Decoder.decode(AztecDetectorResult detectorResult) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.extractBitsBitMatrix">
            <summary>设置 Decoder.extractBits(BitMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.getCharacterStringArrayInt32">
            <summary>设置 Decoder.getCharacter(String[] table, Int32 code) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.getEncodedDataBooleanArray">
            <summary>设置 Decoder.getEncodedData(Boolean[] correctedBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.highLevelDecodeBooleanArray">
            <summary>设置 Decoder.highLevelDecode(Boolean[] correctedBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.readByteBooleanArrayInt32">
            <summary>设置 Decoder.readByte(Boolean[] rawbits, Int32 startIndex) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.readCodeBooleanArrayInt32Int32">
            <summary>设置 Decoder.readCode(Boolean[] rawbits, Int32 startIndex, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDecoder.totalBitsInLayerInt32Boolean">
            <summary>设置 Decoder.totalBitsInLayer(Int32 layers, Boolean compact) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimDetector">
            <summary>ZXing.Aztec.Internal.Detector 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDetector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDetector.#ctor(ZXing.Aztec.Internal.Detector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.detect">
            <summary>设置 Detector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.detectBoolean">
            <summary>设置 Detector.detect(Boolean isMirror) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.extractParametersResultPointArray">
            <summary>设置 Detector.extractParameters(ResultPoint[] bullsEyeCorners) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.getDimension">
            <summary>设置 Detector.getDimension() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.getMatrixCornerPointsResultPointArray">
            <summary>设置 Detector.getMatrixCornerPoints(ResultPoint[] bullsEyeCorners) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.isValidInt32Int32">
            <summary>设置 Detector.isValid(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.isValidResultPoint">
            <summary>设置 Detector.isValid(ResultPoint point) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.sampleGridBitMatrixResultPointResultPointResultPointResultPoint">
            <summary>设置 Detector.sampleGrid(BitMatrix image, ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomRight, ResultPoint bottomLeft) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.AllInstances.sampleLineResultPointResultPointInt32">
            <summary>设置 Detector.sampleLine(ResultPoint p1, ResultPoint p2, Int32 size) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDetector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimDetector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.ConstructorBitMatrix">
            <summary>设置 Detector.Detector(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.StaticConstructor">
            <summary>设置 Detector.Detector() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.detect">
            <summary>设置 Detector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.detectBoolean">
            <summary>设置 Detector.detect(Boolean isMirror) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.distanceResultPointResultPoint">
            <summary>设置 Detector.distance(ResultPoint a, ResultPoint b) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.expandSquareResultPointArraySingleSingle">
            <summary>设置 Detector.expandSquare(ResultPoint[] cornerPoints, Single oldSide, Single newSide) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.extractParametersResultPointArray">
            <summary>设置 Detector.extractParameters(ResultPoint[] bullsEyeCorners) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.getCorrectedParameterDataInt64Boolean">
            <summary>设置 Detector.getCorrectedParameterData(Int64 parameterData, Boolean compact) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.getDimension">
            <summary>设置 Detector.getDimension() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.getMatrixCornerPointsResultPointArray">
            <summary>设置 Detector.getMatrixCornerPoints(ResultPoint[] bullsEyeCorners) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.getRotationInt32ArrayInt32">
            <summary>设置 Detector.getRotation(Int32[] sides, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.isValidInt32Int32">
            <summary>设置 Detector.isValid(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.isValidResultPoint">
            <summary>设置 Detector.isValid(ResultPoint point) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.sampleGridBitMatrixResultPointResultPointResultPointResultPoint">
            <summary>设置 Detector.sampleGrid(BitMatrix image, ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomRight, ResultPoint bottomLeft) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimDetector.sampleLineResultPointResultPointInt32">
            <summary>设置 Detector.sampleLine(ResultPoint p1, ResultPoint p2, Int32 size) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimEncoder">
            <summary>ZXing.Aztec.Internal.Encoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimEncoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimEncoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimEncoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.StaticConstructor">
            <summary>设置 Encoder.Encoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.TotalBitsInLayerInt32Boolean">
            <summary>设置 Encoder.TotalBitsInLayer(Int32 layers, Boolean compact) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.bitsToWordsBitArrayInt32Int32">
            <summary>设置 Encoder.bitsToWords(BitArray stuffedBits, Int32 wordSize, Int32 totalWords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.drawBullsEyeBitMatrixInt32Int32">
            <summary>设置 Encoder.drawBullsEye(BitMatrix matrix, Int32 center, Int32 size) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.drawModeMessageBitMatrixBooleanInt32BitArray">
            <summary>设置 Encoder.drawModeMessage(BitMatrix matrix, Boolean compact, Int32 matrixSize, BitArray modeMessage) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.encodeByteArray">
            <summary>设置 Encoder.encode(Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.encodeByteArrayInt32Int32">
            <summary>设置 Encoder.encode(Byte[] data, Int32 minECCPercent, Int32 userSpecifiedLayers) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.generateCheckWordsBitArrayInt32Int32">
            <summary>设置 Encoder.generateCheckWords(BitArray bitArray, Int32 totalBits, Int32 wordSize) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.generateModeMessageBooleanInt32Int32">
            <summary>设置 Encoder.generateModeMessage(Boolean compact, Int32 layers, Int32 messageSizeInWords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.getGFInt32">
            <summary>设置 Encoder.getGF(Int32 wordSize) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimEncoder.stuffBitsBitArrayInt32">
            <summary>设置 Encoder.stuffBits(BitArray bits, Int32 wordSize) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder">
            <summary>ZXing.Aztec.Internal.HighLevelEncoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.#ctor(ZXing.Aztec.Internal.HighLevelEncoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.AllInstances.encode">
            <summary>设置 HighLevelEncoder.encode() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.ConstructorByteArray">
            <summary>设置 HighLevelEncoder.HighLevelEncoder(Byte[] text) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.StaticConstructor">
            <summary>设置 HighLevelEncoder.HighLevelEncoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimHighLevelEncoder.encode">
            <summary>设置 HighLevelEncoder.encode() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimSimpleToken">
            <summary>ZXing.Aztec.Internal.SimpleToken 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.#ctor(ZXing.Aztec.Internal.SimpleToken)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.AllInstances.ToString01">
            <summary>设置 SimpleToken.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.AllInstances.appendToBitArrayByteArray">
            <summary>设置 SimpleToken.appendTo(BitArray bitArray, Byte[] text) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.ConstructorTokenInt32Int32">
            <summary>设置 SimpleToken.SimpleToken(Token previous, Int32 value, Int32 bitCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.ToString">
            <summary>设置 SimpleToken.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimSimpleToken.appendToBitArrayByteArray">
            <summary>设置 SimpleToken.appendTo(BitArray bitArray, Byte[] text) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimToken">
            <summary>ZXing.Aztec.Internal.Token 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimToken.#ctor(ZXing.Aztec.Internal.Token)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.ShimToken.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.AllInstances.PreviousGet">
            <summary>设置 Token.get_Previous() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.AllInstances.addBinaryShiftInt32Int32">
            <summary>设置 Token.addBinaryShift(Int32 start, Int32 byteCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.AllInstances.addInt32Int32">
            <summary>设置 Token.add(Int32 value, Int32 bitCount) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimToken.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.ShimToken.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.ConstructorToken">
            <summary>设置 Token.Token(Token previous) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.PreviousGet">
            <summary>设置 Token.get_Previous() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.StaticConstructor">
            <summary>设置 Token.Token() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.addBinaryShiftInt32Int32">
            <summary>设置 Token.addBinaryShift(Int32 start, Int32 byteCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.ShimToken.addInt32Int32">
            <summary>设置 Token.add(Int32 value, Int32 bitCount) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.StubAztecDetectorResult">
            <summary>ZXing.Aztec.Internal.AztecDetectorResult 的存根类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.StubAztecDetectorResult.#ctor(ZXing.Common.BitMatrix,ZXing.ResultPoint[],System.Boolean,System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.StubAztecDetectorResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.StubAztecDetectorResult.InitializeStub">
            <summary>初始化 type StubAztecDetectorResult 的新实例</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.StubAztecDetectorResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.StubAztecDetectorResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Aztec.Internal.Fakes.StubToken">
            <summary>ZXing.Aztec.Internal.Token 的存根类型</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.StubToken.#ctor(ZXing.Aztec.Internal.Token)">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:ZXing.Aztec.Internal.Fakes.StubToken.AppendToBitArrayByteArray">
            <summary>设置 Token.appendTo(BitArray bitArray, Byte[] text) 的 stub</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.StubToken.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.StubToken.InitializeStub">
            <summary>初始化 type StubToken 的新实例</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.StubToken.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Aztec.Internal.Fakes.StubToken.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Aztec.Internal.Fakes.StubToken.appendTo(ZXing.Common.BitArray,System.Byte[])">
            <summary>设置 Token.appendTo(BitArray bitArray, Byte[] text) 的 存根</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult">
            <summary>ZXing.Client.Result.AddressBookParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.#ctor(ZXing.Client.Result.AddressBookParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AddressTypesGet">
            <summary>设置 AddressBookParsedResult.get_AddressTypes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AddressesGet">
            <summary>设置 AddressBookParsedResult.get_Addresses() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.AddressTypesGet">
            <summary>设置 AddressBookParsedResult.get_AddressTypes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.AddressesGet">
            <summary>设置 AddressBookParsedResult.get_Addresses() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.BirthdayGet">
            <summary>设置 AddressBookParsedResult.get_Birthday() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.EmailTypesGet">
            <summary>设置 AddressBookParsedResult.get_EmailTypes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.EmailsGet">
            <summary>设置 AddressBookParsedResult.get_Emails() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.GeoGet">
            <summary>设置 AddressBookParsedResult.get_Geo() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.InstantMessengerGet">
            <summary>设置 AddressBookParsedResult.get_InstantMessenger() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.NamesGet">
            <summary>设置 AddressBookParsedResult.get_Names() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.NicknamesGet">
            <summary>设置 AddressBookParsedResult.get_Nicknames() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.NoteGet">
            <summary>设置 AddressBookParsedResult.get_Note() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.OrgGet">
            <summary>设置 AddressBookParsedResult.get_Org() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.PhoneNumbersGet">
            <summary>设置 AddressBookParsedResult.get_PhoneNumbers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.PhoneTypesGet">
            <summary>设置 AddressBookParsedResult.get_PhoneTypes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.PronunciationGet">
            <summary>设置 AddressBookParsedResult.get_Pronunciation() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.TitleGet">
            <summary>设置 AddressBookParsedResult.get_Title() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.URLsGet">
            <summary>设置 AddressBookParsedResult.get_URLs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.AllInstances.getDisplayResult">
            <summary>设置 AddressBookParsedResult.getDisplayResult() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.BirthdayGet">
            <summary>设置 AddressBookParsedResult.get_Birthday() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.ConstructorStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray">
            <summary>设置 AddressBookParsedResult.AddressBookParsedResult(String[] names, String[] phoneNumbers, String[] phoneTypes, String[] emails, String[] emailTypes, String[] addresses, String[] addressTypes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.ConstructorStringArrayStringArrayStringStringArrayStringArrayStringArrayStringArrayStringStringStringArrayStringArrayStringStringStringStringArrayStringArray">
            <summary>设置 AddressBookParsedResult.AddressBookParsedResult(String[] names, String[] nicknames, String pronunciation, String[] phoneNumbers, String[] phoneTypes, String[] emails, String[] emailTypes, String instantMessenger, String note, String[] addresses, String[] addressTypes, String org, String birthday, String title, String[] urls, String[] geo) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.EmailTypesGet">
            <summary>设置 AddressBookParsedResult.get_EmailTypes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.EmailsGet">
            <summary>设置 AddressBookParsedResult.get_Emails() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.GeoGet">
            <summary>设置 AddressBookParsedResult.get_Geo() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.InstantMessengerGet">
            <summary>设置 AddressBookParsedResult.get_InstantMessenger() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.NamesGet">
            <summary>设置 AddressBookParsedResult.get_Names() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.NicknamesGet">
            <summary>设置 AddressBookParsedResult.get_Nicknames() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.NoteGet">
            <summary>设置 AddressBookParsedResult.get_Note() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.OrgGet">
            <summary>设置 AddressBookParsedResult.get_Org() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.PhoneNumbersGet">
            <summary>设置 AddressBookParsedResult.get_PhoneNumbers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.PhoneTypesGet">
            <summary>设置 AddressBookParsedResult.get_PhoneTypes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.PronunciationGet">
            <summary>设置 AddressBookParsedResult.get_Pronunciation() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.TitleGet">
            <summary>设置 AddressBookParsedResult.get_Title() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.URLsGet">
            <summary>设置 AddressBookParsedResult.get_URLs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimAddressBookParsedResult.getDisplayResult">
            <summary>设置 AddressBookParsedResult.getDisplayResult() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimCalendarParsedResult">
            <summary>ZXing.Client.Result.CalendarParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.#ctor(ZXing.Client.Result.CalendarParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.AttendeesGet">
            <summary>设置 CalendarParsedResult.get_Attendees() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.DescriptionGet">
            <summary>设置 CalendarParsedResult.get_Description() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.EndGet">
            <summary>设置 CalendarParsedResult.get_End() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.LatitudeGet">
            <summary>设置 CalendarParsedResult.get_Latitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.LocationGet">
            <summary>设置 CalendarParsedResult.get_Location() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.LongitudeGet">
            <summary>设置 CalendarParsedResult.get_Longitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.OrganizerGet">
            <summary>设置 CalendarParsedResult.get_Organizer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.StartGet">
            <summary>设置 CalendarParsedResult.get_Start() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.SummaryGet">
            <summary>设置 CalendarParsedResult.get_Summary() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.isEndAllDayGet">
            <summary>设置 CalendarParsedResult.get_isEndAllDay() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AllInstances.isStartAllDay">
            <summary>设置 CalendarParsedResult.isStartAllDay() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.AttendeesGet">
            <summary>设置 CalendarParsedResult.get_Attendees() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.ConstructorStringStringStringStringStringStringStringArrayStringDoubleDouble">
            <summary>设置 CalendarParsedResult.CalendarParsedResult(String summary, String startString, String endString, String durationString, String location, String organizer, String[] attendees, String description, Double latitude, Double longitude) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.DescriptionGet">
            <summary>设置 CalendarParsedResult.get_Description() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.EndGet">
            <summary>设置 CalendarParsedResult.get_End() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.LatitudeGet">
            <summary>设置 CalendarParsedResult.get_Latitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.LocationGet">
            <summary>设置 CalendarParsedResult.get_Location() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.LongitudeGet">
            <summary>设置 CalendarParsedResult.get_Longitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.OrganizerGet">
            <summary>设置 CalendarParsedResult.get_Organizer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.StartGet">
            <summary>设置 CalendarParsedResult.get_Start() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.StaticConstructor">
            <summary>设置 CalendarParsedResult.CalendarParsedResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.SummaryGet">
            <summary>设置 CalendarParsedResult.get_Summary() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.formatBooleanNullableOfDateTime">
            <summary>设置 CalendarParsedResult.format(Boolean allDay, Nullable`1&lt;DateTime&gt; date) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.isEndAllDayGet">
            <summary>设置 CalendarParsedResult.get_isEndAllDay() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.isStartAllDay">
            <summary>设置 CalendarParsedResult.isStartAllDay() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.parseDateString">
            <summary>设置 CalendarParsedResult.parseDate(String when) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.parseDateTimeStringString">
            <summary>设置 CalendarParsedResult.parseDateTimeString(String dateTimeString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimCalendarParsedResult.parseDurationMSString">
            <summary>设置 CalendarParsedResult.parseDurationMS(String durationString) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult">
            <summary>ZXing.Client.Result.EmailAddressParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.#ctor(ZXing.Client.Result.EmailAddressParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.BCCsGet">
            <summary>设置 EmailAddressParsedResult.get_BCCs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.BCCsSetStringArray">
            <summary>设置 EmailAddressParsedResult.set_BCCs(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.BodyGet">
            <summary>设置 EmailAddressParsedResult.get_Body() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.BodySetString">
            <summary>设置 EmailAddressParsedResult.set_Body(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.CCsGet">
            <summary>设置 EmailAddressParsedResult.get_CCs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.CCsSetStringArray">
            <summary>设置 EmailAddressParsedResult.set_CCs(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.EmailAddressGet">
            <summary>设置 EmailAddressParsedResult.get_EmailAddress() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.MailtoURIGet">
            <summary>设置 EmailAddressParsedResult.get_MailtoURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.SubjectGet">
            <summary>设置 EmailAddressParsedResult.get_Subject() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.SubjectSetString">
            <summary>设置 EmailAddressParsedResult.set_Subject(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.TosGet">
            <summary>设置 EmailAddressParsedResult.get_Tos() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.AllInstances.TosSetStringArray">
            <summary>设置 EmailAddressParsedResult.set_Tos(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.BCCsGet">
            <summary>设置 EmailAddressParsedResult.get_BCCs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.BCCsSetStringArray">
            <summary>设置 EmailAddressParsedResult.set_BCCs(String[] value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.BodyGet">
            <summary>设置 EmailAddressParsedResult.get_Body() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.BodySetString">
            <summary>设置 EmailAddressParsedResult.set_Body(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.CCsGet">
            <summary>设置 EmailAddressParsedResult.get_CCs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.CCsSetStringArray">
            <summary>设置 EmailAddressParsedResult.set_CCs(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.ConstructorString">
            <summary>设置 EmailAddressParsedResult.EmailAddressParsedResult(String to) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.ConstructorStringArrayStringArrayStringArrayStringString">
            <summary>设置 EmailAddressParsedResult.EmailAddressParsedResult(String[] tos, String[] ccs, String[] bccs, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.EmailAddressGet">
            <summary>设置 EmailAddressParsedResult.get_EmailAddress() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.MailtoURIGet">
            <summary>设置 EmailAddressParsedResult.get_MailtoURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.SubjectGet">
            <summary>设置 EmailAddressParsedResult.get_Subject() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.SubjectSetString">
            <summary>设置 EmailAddressParsedResult.set_Subject(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.TosGet">
            <summary>设置 EmailAddressParsedResult.get_Tos() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimEmailAddressParsedResult.TosSetStringArray">
            <summary>设置 EmailAddressParsedResult.set_Tos(String[] value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult">
            <summary>ZXing.Client.Result.ExpandedProductParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.#ctor(ZXing.Client.Result.ExpandedProductParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.BestBeforeDateGet">
            <summary>设置 ExpandedProductParsedResult.get_BestBeforeDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.DisplayResultGet">
            <summary>设置 ExpandedProductParsedResult.get_DisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.EqualsObject">
            <summary>设置 ExpandedProductParsedResult.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.ExpirationDateGet">
            <summary>设置 ExpandedProductParsedResult.get_ExpirationDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.GetHashCode01">
            <summary>设置 ExpandedProductParsedResult.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.LotNumberGet">
            <summary>设置 ExpandedProductParsedResult.get_LotNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.PackagingDateGet">
            <summary>设置 ExpandedProductParsedResult.get_PackagingDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.PriceCurrencyGet">
            <summary>设置 ExpandedProductParsedResult.get_PriceCurrency() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.PriceGet">
            <summary>设置 ExpandedProductParsedResult.get_Price() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.PriceIncrementGet">
            <summary>设置 ExpandedProductParsedResult.get_PriceIncrement() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.ProductIDGet">
            <summary>设置 ExpandedProductParsedResult.get_ProductID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.ProductionDateGet">
            <summary>设置 ExpandedProductParsedResult.get_ProductionDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.RawTextGet">
            <summary>设置 ExpandedProductParsedResult.get_RawText() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.SsccGet">
            <summary>设置 ExpandedProductParsedResult.get_Sscc() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.UncommonAIsGet">
            <summary>设置 ExpandedProductParsedResult.get_UncommonAIs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.WeightGet">
            <summary>设置 ExpandedProductParsedResult.get_Weight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.WeightIncrementGet">
            <summary>设置 ExpandedProductParsedResult.get_WeightIncrement() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.AllInstances.WeightTypeGet">
            <summary>设置 ExpandedProductParsedResult.get_WeightType() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.BestBeforeDateGet">
            <summary>设置 ExpandedProductParsedResult.get_BestBeforeDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.ConstructorStringStringStringStringStringStringStringStringStringStringStringStringStringStringIDictionaryOfStringString">
            <summary>设置 ExpandedProductParsedResult.ExpandedProductParsedResult(String rawText, String productID, String sscc, String lotNumber, String productionDate, String packagingDate, String bestBeforeDate, String expirationDate, String weight, String weightType, String weightIncrement, String price, String priceIncrement, String priceCurrency, IDictionary`2&lt;String,String&gt; uncommonAIs) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.DisplayResultGet">
            <summary>设置 ExpandedProductParsedResult.get_DisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.EqualsObject">
            <summary>设置 ExpandedProductParsedResult.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.ExpirationDateGet">
            <summary>设置 ExpandedProductParsedResult.get_ExpirationDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.GetHashCode">
            <summary>设置 ExpandedProductParsedResult.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.LotNumberGet">
            <summary>设置 ExpandedProductParsedResult.get_LotNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.PackagingDateGet">
            <summary>设置 ExpandedProductParsedResult.get_PackagingDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.PriceCurrencyGet">
            <summary>设置 ExpandedProductParsedResult.get_PriceCurrency() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.PriceGet">
            <summary>设置 ExpandedProductParsedResult.get_Price() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.PriceIncrementGet">
            <summary>设置 ExpandedProductParsedResult.get_PriceIncrement() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.ProductIDGet">
            <summary>设置 ExpandedProductParsedResult.get_ProductID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.ProductionDateGet">
            <summary>设置 ExpandedProductParsedResult.get_ProductionDate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.RawTextGet">
            <summary>设置 ExpandedProductParsedResult.get_RawText() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.SsccGet">
            <summary>设置 ExpandedProductParsedResult.get_Sscc() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.StaticConstructor">
            <summary>设置 ExpandedProductParsedResult.ExpandedProductParsedResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.UncommonAIsGet">
            <summary>设置 ExpandedProductParsedResult.get_UncommonAIs() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.WeightGet">
            <summary>设置 ExpandedProductParsedResult.get_Weight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.WeightIncrementGet">
            <summary>设置 ExpandedProductParsedResult.get_WeightIncrement() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.WeightTypeGet">
            <summary>设置 ExpandedProductParsedResult.get_WeightType() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.equalsOrNullIDictionaryOfStringStringIDictionaryOfStringString">
            <summary>设置 ExpandedProductParsedResult.equalsOrNull(IDictionary`2&lt;String,String&gt; o1, IDictionary`2&lt;String,String&gt; o2) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.equalsOrNullObjectObject">
            <summary>设置 ExpandedProductParsedResult.equalsOrNull(Object o1, Object o2) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductParsedResult.hashNotNullObject">
            <summary>设置 ExpandedProductParsedResult.hashNotNull(Object o) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser">
            <summary>ZXing.Client.Result.ExpandedProductResultParser 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.#ctor(ZXing.Client.Result.ExpandedProductResultParser)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.AllInstances.parseResult">
            <summary>设置 ExpandedProductResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.Constructor">
            <summary>设置 ExpandedProductResultParser.ExpandedProductResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.findAIvalueInt32String">
            <summary>设置 ExpandedProductResultParser.findAIvalue(Int32 i, String rawText) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.findValueInt32String">
            <summary>设置 ExpandedProductResultParser.findValue(Int32 i, String rawText) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimExpandedProductResultParser.parseResult">
            <summary>设置 ExpandedProductResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimGeoParsedResult">
            <summary>ZXing.Client.Result.GeoParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimGeoParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimGeoParsedResult.#ctor(ZXing.Client.Result.GeoParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.AltitudeGet">
            <summary>设置 GeoParsedResult.get_Altitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.AltitudeSetDouble">
            <summary>设置 GeoParsedResult.set_Altitude(Double value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.GeoURIGet">
            <summary>设置 GeoParsedResult.get_GeoURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.GeoURISetString">
            <summary>设置 GeoParsedResult.set_GeoURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.GoogleMapsURIGet">
            <summary>设置 GeoParsedResult.get_GoogleMapsURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.GoogleMapsURISetString">
            <summary>设置 GeoParsedResult.set_GoogleMapsURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.LatitudeGet">
            <summary>设置 GeoParsedResult.get_Latitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.LatitudeSetDouble">
            <summary>设置 GeoParsedResult.set_Latitude(Double value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.LongitudeGet">
            <summary>设置 GeoParsedResult.get_Longitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.LongitudeSetDouble">
            <summary>设置 GeoParsedResult.set_Longitude(Double value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.QueryGet">
            <summary>设置 GeoParsedResult.get_Query() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.QuerySetString">
            <summary>设置 GeoParsedResult.set_Query(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.getDisplayResult">
            <summary>设置 GeoParsedResult.getDisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.getGeoURI">
            <summary>设置 GeoParsedResult.getGeoURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AllInstances.getGoogleMapsURI">
            <summary>设置 GeoParsedResult.getGoogleMapsURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AltitudeGet">
            <summary>设置 GeoParsedResult.get_Altitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.AltitudeSetDouble">
            <summary>设置 GeoParsedResult.set_Altitude(Double value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimGeoParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimGeoParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.ConstructorDoubleDoubleDoubleString">
            <summary>设置 GeoParsedResult.GeoParsedResult(Double latitude, Double longitude, Double altitude, String query) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.GeoURIGet">
            <summary>设置 GeoParsedResult.get_GeoURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.GeoURISetString">
            <summary>设置 GeoParsedResult.set_GeoURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.GoogleMapsURIGet">
            <summary>设置 GeoParsedResult.get_GoogleMapsURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.GoogleMapsURISetString">
            <summary>设置 GeoParsedResult.set_GoogleMapsURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.LatitudeGet">
            <summary>设置 GeoParsedResult.get_Latitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.LatitudeSetDouble">
            <summary>设置 GeoParsedResult.set_Latitude(Double value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.LongitudeGet">
            <summary>设置 GeoParsedResult.get_Longitude() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.LongitudeSetDouble">
            <summary>设置 GeoParsedResult.set_Longitude(Double value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.QueryGet">
            <summary>设置 GeoParsedResult.get_Query() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.QuerySetString">
            <summary>设置 GeoParsedResult.set_Query(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.getDisplayResult">
            <summary>设置 GeoParsedResult.getDisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.getGeoURI">
            <summary>设置 GeoParsedResult.getGeoURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimGeoParsedResult.getGoogleMapsURI">
            <summary>设置 GeoParsedResult.getGoogleMapsURI() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimISBNParsedResult">
            <summary>ZXing.Client.Result.ISBNParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNParsedResult.#ctor(ZXing.Client.Result.ISBNParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimISBNParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNParsedResult.AllInstances.ISBNGet">
            <summary>设置 ISBNParsedResult.get_ISBN() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNParsedResult.AllInstances.ISBNSetString">
            <summary>设置 ISBNParsedResult.set_ISBN(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNParsedResult.ConstructorString">
            <summary>设置 ISBNParsedResult.ISBNParsedResult(String isbn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNParsedResult.ISBNGet">
            <summary>设置 ISBNParsedResult.get_ISBN() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNParsedResult.ISBNSetString">
            <summary>设置 ISBNParsedResult.set_ISBN(String value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimISBNResultParser">
            <summary>ZXing.Client.Result.ISBNResultParser 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNResultParser.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNResultParser.#ctor(ZXing.Client.Result.ISBNResultParser)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimISBNResultParser.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNResultParser.AllInstances.parseResult">
            <summary>设置 ISBNResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNResultParser.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimISBNResultParser.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNResultParser.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNResultParser.Constructor">
            <summary>设置 ISBNResultParser.ISBNResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimISBNResultParser.parseResult">
            <summary>设置 ISBNResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimParsedResult">
            <summary>ZXing.Client.Result.ParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimParsedResult.#ctor(ZXing.Client.Result.ParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.AllInstances.DisplayResultGet">
            <summary>设置 ParsedResult.get_DisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.AllInstances.EqualsObject">
            <summary>设置 ParsedResult.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.AllInstances.GetHashCode01">
            <summary>设置 ParsedResult.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.AllInstances.ToString01">
            <summary>设置 ParsedResult.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.AllInstances.TypeGet">
            <summary>设置 ParsedResult.get_Type() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.AllInstances.TypeSetParsedResultType">
            <summary>设置 ParsedResult.set_Type(ParsedResultType value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.ConstructorParsedResultType">
            <summary>设置 ParsedResult.ParsedResult(ParsedResultType type) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.DisplayResultGet">
            <summary>设置 ParsedResult.get_DisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.EqualsObject">
            <summary>设置 ParsedResult.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.GetHashCode">
            <summary>设置 ParsedResult.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.ToString">
            <summary>设置 ParsedResult.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.TypeGet">
            <summary>设置 ParsedResult.get_Type() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.TypeSetParsedResultType">
            <summary>设置 ParsedResult.set_Type(ParsedResultType value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.maybeAppendStringArrayStringBuilder">
            <summary>设置 ParsedResult.maybeAppend(String[] values, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimParsedResult.maybeAppendStringStringBuilder">
            <summary>设置 ParsedResult.maybeAppend(String value, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimProductParsedResult">
            <summary>ZXing.Client.Result.ProductParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimProductParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimProductParsedResult.#ctor(ZXing.Client.Result.ProductParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimProductParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.AllInstances.NormalizedProductIDGet">
            <summary>设置 ProductParsedResult.get_NormalizedProductID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.AllInstances.NormalizedProductIDSetString">
            <summary>设置 ProductParsedResult.set_NormalizedProductID(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.AllInstances.ProductIDGet">
            <summary>设置 ProductParsedResult.get_ProductID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.AllInstances.ProductIDSetString">
            <summary>设置 ProductParsedResult.set_ProductID(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimProductParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimProductParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.ConstructorString">
            <summary>设置 ProductParsedResult.ProductParsedResult(String productID) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.ConstructorStringString">
            <summary>设置 ProductParsedResult.ProductParsedResult(String productID, String normalizedProductID) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.NormalizedProductIDGet">
            <summary>设置 ProductParsedResult.get_NormalizedProductID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.NormalizedProductIDSetString">
            <summary>设置 ProductParsedResult.set_NormalizedProductID(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.ProductIDGet">
            <summary>设置 ProductParsedResult.get_ProductID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimProductParsedResult.ProductIDSetString">
            <summary>设置 ProductParsedResult.set_ProductID(String value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimResultParser">
            <summary>ZXing.Client.Result.ResultParser 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimResultParser.#ctor(ZXing.Client.Result.ResultParser)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimResultParser.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimResultParser.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimResultParser.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.Constructor">
            <summary>设置 ResultParser.ResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.StaticConstructor">
            <summary>设置 ResultParser.ResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.appendKeyValueStringIDictionaryOfStringString">
            <summary>设置 ResultParser.appendKeyValue(String keyValue, IDictionary`2&lt;String,String&gt; result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.countPrecedingBackslashesStringInt32">
            <summary>设置 ResultParser.countPrecedingBackslashes(String s, Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.findFirstEscapeCharArray">
            <summary>设置 ResultParser.findFirstEscape(Char[] escapedArray) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.isStringOfDigitsStringInt32">
            <summary>设置 ResultParser.isStringOfDigits(String value, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.isSubstringOfDigitsStringInt32Int32">
            <summary>设置 ResultParser.isSubstringOfDigits(String value, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.matchPrefixedFieldStringStringCharBoolean">
            <summary>设置 ResultParser.matchPrefixedField(String prefix, String rawText, Char endChar, Boolean trim) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.matchSinglePrefixedFieldStringStringCharBoolean">
            <summary>设置 ResultParser.matchSinglePrefixedField(String prefix, String rawText, Char endChar, Boolean trim) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.maybeAppendStringArrayStringBuilder">
            <summary>设置 ResultParser.maybeAppend(String[] value, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.maybeAppendStringStringBuilder">
            <summary>设置 ResultParser.maybeAppend(String value, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.maybeWrapString">
            <summary>设置 ResultParser.maybeWrap(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.parseHexDigitChar">
            <summary>设置 ResultParser.parseHexDigit(Char c) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.parseNameValuePairsString">
            <summary>设置 ResultParser.parseNameValuePairs(String uri) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.parseResultResult">
            <summary>设置 ResultParser.parseResult(Result theResult) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.unescapeBackslashString">
            <summary>设置 ResultParser.unescapeBackslash(String escaped) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimResultParser.urlDecodeString">
            <summary>设置 ResultParser.urlDecode(String escaped) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimSMSParsedResult">
            <summary>ZXing.Client.Result.SMSParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSParsedResult.#ctor(ZXing.Client.Result.SMSParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.BodyGet">
            <summary>设置 SMSParsedResult.get_Body() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.BodySetString">
            <summary>设置 SMSParsedResult.set_Body(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.NumbersGet">
            <summary>设置 SMSParsedResult.get_Numbers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.NumbersSetStringArray">
            <summary>设置 SMSParsedResult.set_Numbers(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.SMSURIGet">
            <summary>设置 SMSParsedResult.get_SMSURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.SMSURISetString">
            <summary>设置 SMSParsedResult.set_SMSURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.SubjectGet">
            <summary>设置 SMSParsedResult.get_Subject() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.SubjectSetString">
            <summary>设置 SMSParsedResult.set_Subject(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.ViasGet">
            <summary>设置 SMSParsedResult.get_Vias() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.ViasSetStringArray">
            <summary>设置 SMSParsedResult.set_Vias(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.AllInstances.getSMSURI">
            <summary>设置 SMSParsedResult.getSMSURI() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.BodyGet">
            <summary>设置 SMSParsedResult.get_Body() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.BodySetString">
            <summary>设置 SMSParsedResult.set_Body(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.ConstructorStringArrayStringArrayStringString">
            <summary>设置 SMSParsedResult.SMSParsedResult(String[] numbers, String[] vias, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.ConstructorStringStringStringString">
            <summary>设置 SMSParsedResult.SMSParsedResult(String number, String via, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.NumbersGet">
            <summary>设置 SMSParsedResult.get_Numbers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.NumbersSetStringArray">
            <summary>设置 SMSParsedResult.set_Numbers(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.SMSURIGet">
            <summary>设置 SMSParsedResult.get_SMSURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.SMSURISetString">
            <summary>设置 SMSParsedResult.set_SMSURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.SubjectGet">
            <summary>设置 SMSParsedResult.get_Subject() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.SubjectSetString">
            <summary>设置 SMSParsedResult.set_Subject(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.ViasGet">
            <summary>设置 SMSParsedResult.get_Vias() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.ViasSetStringArray">
            <summary>设置 SMSParsedResult.set_Vias(String[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSParsedResult.getSMSURI">
            <summary>设置 SMSParsedResult.getSMSURI() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser">
            <summary>ZXing.Client.Result.SMSTOMMSTOResultParser 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.#ctor(ZXing.Client.Result.SMSTOMMSTOResultParser)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.AllInstances.parseResult">
            <summary>设置 SMSTOMMSTOResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.Constructor">
            <summary>设置 SMSTOMMSTOResultParser.SMSTOMMSTOResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMSTOMMSTOResultParser.parseResult">
            <summary>设置 SMSTOMMSTOResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimSMTPResultParser">
            <summary>ZXing.Client.Result.SMTPResultParser 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMTPResultParser.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMTPResultParser.#ctor(ZXing.Client.Result.SMTPResultParser)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimSMTPResultParser.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMTPResultParser.AllInstances.parseResult">
            <summary>设置 SMTPResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMTPResultParser.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimSMTPResultParser.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMTPResultParser.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMTPResultParser.Constructor">
            <summary>设置 SMTPResultParser.SMTPResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimSMTPResultParser.parseResult">
            <summary>设置 SMTPResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimTelParsedResult">
            <summary>ZXing.Client.Result.TelParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTelParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTelParsedResult.#ctor(ZXing.Client.Result.TelParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimTelParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.AllInstances.NumberGet">
            <summary>设置 TelParsedResult.get_Number() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.AllInstances.NumberSetString">
            <summary>设置 TelParsedResult.set_Number(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.AllInstances.TelURIGet">
            <summary>设置 TelParsedResult.get_TelURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.AllInstances.TelURISetString">
            <summary>设置 TelParsedResult.set_TelURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.AllInstances.TitleGet">
            <summary>设置 TelParsedResult.get_Title() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.AllInstances.TitleSetString">
            <summary>设置 TelParsedResult.set_Title(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTelParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTelParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.ConstructorStringStringString">
            <summary>设置 TelParsedResult.TelParsedResult(String number, String telURI, String title) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.NumberGet">
            <summary>设置 TelParsedResult.get_Number() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.NumberSetString">
            <summary>设置 TelParsedResult.set_Number(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.TelURIGet">
            <summary>设置 TelParsedResult.get_TelURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.TelURISetString">
            <summary>设置 TelParsedResult.set_TelURI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.TitleGet">
            <summary>设置 TelParsedResult.get_Title() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTelParsedResult.TitleSetString">
            <summary>设置 TelParsedResult.set_Title(String value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimTextParsedResult">
            <summary>ZXing.Client.Result.TextParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTextParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTextParsedResult.#ctor(ZXing.Client.Result.TextParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimTextParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.AllInstances.LanguageGet">
            <summary>设置 TextParsedResult.get_Language() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.AllInstances.LanguageSetString">
            <summary>设置 TextParsedResult.set_Language(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.AllInstances.TextGet">
            <summary>设置 TextParsedResult.get_Text() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.AllInstances.TextSetString">
            <summary>设置 TextParsedResult.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTextParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimTextParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.ConstructorStringString">
            <summary>设置 TextParsedResult.TextParsedResult(String text, String language) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.LanguageGet">
            <summary>设置 TextParsedResult.get_Language() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.LanguageSetString">
            <summary>设置 TextParsedResult.set_Language(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.TextGet">
            <summary>设置 TextParsedResult.get_Text() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimTextParsedResult.TextSetString">
            <summary>设置 TextParsedResult.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimURIParsedResult">
            <summary>ZXing.Client.Result.URIParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimURIParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimURIParsedResult.#ctor(ZXing.Client.Result.URIParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimURIParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.AllInstances.PossiblyMaliciousURIGet">
            <summary>设置 URIParsedResult.get_PossiblyMaliciousURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.AllInstances.PossiblyMaliciousURISetBoolean">
            <summary>设置 URIParsedResult.set_PossiblyMaliciousURI(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.AllInstances.TitleGet">
            <summary>设置 URIParsedResult.get_Title() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.AllInstances.TitleSetString">
            <summary>设置 URIParsedResult.set_Title(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.AllInstances.URIGet">
            <summary>设置 URIParsedResult.get_URI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.AllInstances.URISetString">
            <summary>设置 URIParsedResult.set_URI(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimURIParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimURIParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.ConstructorStringString">
            <summary>设置 URIParsedResult.URIParsedResult(String uri, String title) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.PossiblyMaliciousURIGet">
            <summary>设置 URIParsedResult.get_PossiblyMaliciousURI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.PossiblyMaliciousURISetBoolean">
            <summary>设置 URIParsedResult.set_PossiblyMaliciousURI(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.StaticConstructor">
            <summary>设置 URIParsedResult.URIParsedResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.TitleGet">
            <summary>设置 URIParsedResult.get_Title() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.TitleSetString">
            <summary>设置 URIParsedResult.set_Title(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.URIGet">
            <summary>设置 URIParsedResult.get_URI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.URISetString">
            <summary>设置 URIParsedResult.set_URI(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.isColonFollowedByPortNumberStringInt32">
            <summary>设置 URIParsedResult.isColonFollowedByPortNumber(String uri, Int32 protocolEnd) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimURIParsedResult.massageURIString">
            <summary>设置 URIParsedResult.massageURI(String uri) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimVINParsedResult">
            <summary>ZXing.Client.Result.VINParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINParsedResult.#ctor(ZXing.Client.Result.VINParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.CountryCodeGet">
            <summary>设置 VINParsedResult.get_CountryCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.CountryCodeSetString">
            <summary>设置 VINParsedResult.set_CountryCode(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.DisplayResultGet">
            <summary>设置 VINParsedResult.get_DisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.ModelYearGet">
            <summary>设置 VINParsedResult.get_ModelYear() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.ModelYearSetInt32">
            <summary>设置 VINParsedResult.set_ModelYear(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.PlantCodeGet">
            <summary>设置 VINParsedResult.get_PlantCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.PlantCodeSetChar">
            <summary>设置 VINParsedResult.set_PlantCode(Char value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.SequentialNumberGet">
            <summary>设置 VINParsedResult.get_SequentialNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.SequentialNumberSetString">
            <summary>设置 VINParsedResult.set_SequentialNumber(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VINGet">
            <summary>设置 VINParsedResult.get_VIN() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VINSetString">
            <summary>设置 VINParsedResult.set_VIN(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VehicleAttributesGet">
            <summary>设置 VINParsedResult.get_VehicleAttributes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VehicleAttributesSetString">
            <summary>设置 VINParsedResult.set_VehicleAttributes(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VehicleDescriptorSectionGet">
            <summary>设置 VINParsedResult.get_VehicleDescriptorSection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VehicleDescriptorSectionSetString">
            <summary>设置 VINParsedResult.set_VehicleDescriptorSection(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VehicleIdentifierSectionGet">
            <summary>设置 VINParsedResult.get_VehicleIdentifierSection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.VehicleIdentifierSectionSetString">
            <summary>设置 VINParsedResult.set_VehicleIdentifierSection(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.WorldManufacturerIDGet">
            <summary>设置 VINParsedResult.get_WorldManufacturerID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.AllInstances.WorldManufacturerIDSetString">
            <summary>设置 VINParsedResult.set_WorldManufacturerID(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.ConstructorStringStringStringStringStringStringInt32CharString">
            <summary>设置 VINParsedResult.VINParsedResult(String vin, String worldManufacturerID, String vehicleDescriptorSection, String vehicleIdentifierSection, String countryCode, String vehicleAttributes, Int32 modelYear, Char plantCode, String sequentialNumber) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.CountryCodeGet">
            <summary>设置 VINParsedResult.get_CountryCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.CountryCodeSetString">
            <summary>设置 VINParsedResult.set_CountryCode(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.DisplayResultGet">
            <summary>设置 VINParsedResult.get_DisplayResult() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.ModelYearGet">
            <summary>设置 VINParsedResult.get_ModelYear() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.ModelYearSetInt32">
            <summary>设置 VINParsedResult.set_ModelYear(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.PlantCodeGet">
            <summary>设置 VINParsedResult.get_PlantCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.PlantCodeSetChar">
            <summary>设置 VINParsedResult.set_PlantCode(Char value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.SequentialNumberGet">
            <summary>设置 VINParsedResult.get_SequentialNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.SequentialNumberSetString">
            <summary>设置 VINParsedResult.set_SequentialNumber(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VINGet">
            <summary>设置 VINParsedResult.get_VIN() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VINSetString">
            <summary>设置 VINParsedResult.set_VIN(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VehicleAttributesGet">
            <summary>设置 VINParsedResult.get_VehicleAttributes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VehicleAttributesSetString">
            <summary>设置 VINParsedResult.set_VehicleAttributes(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VehicleDescriptorSectionGet">
            <summary>设置 VINParsedResult.get_VehicleDescriptorSection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VehicleDescriptorSectionSetString">
            <summary>设置 VINParsedResult.set_VehicleDescriptorSection(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VehicleIdentifierSectionGet">
            <summary>设置 VINParsedResult.get_VehicleIdentifierSection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.VehicleIdentifierSectionSetString">
            <summary>设置 VINParsedResult.set_VehicleIdentifierSection(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.WorldManufacturerIDGet">
            <summary>设置 VINParsedResult.get_WorldManufacturerID() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINParsedResult.WorldManufacturerIDSetString">
            <summary>设置 VINParsedResult.set_WorldManufacturerID(String value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimVINResultParser">
            <summary>ZXing.Client.Result.VINResultParser 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINResultParser.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINResultParser.#ctor(ZXing.Client.Result.VINResultParser)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimVINResultParser.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.AllInstances.parseResult">
            <summary>设置 VINResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINResultParser.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimVINResultParser.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.Constructor">
            <summary>设置 VINResultParser.VINResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.StaticConstructor">
            <summary>设置 VINResultParser.VINResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.checkCharInt32">
            <summary>设置 VINResultParser.checkChar(Int32 remainder) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.checkChecksumString">
            <summary>设置 VINResultParser.checkChecksum(String vin) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.countryCodeString">
            <summary>设置 VINResultParser.countryCode(String wmi) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.modelYearChar">
            <summary>设置 VINResultParser.modelYear(Char c) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.parseResult">
            <summary>设置 VINResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.vinCharValueChar">
            <summary>设置 VINResultParser.vinCharValue(Char c) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimVINResultParser.vinPositionWeightInt32">
            <summary>设置 VINResultParser.vinPositionWeight(Int32 position) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimWifiParsedResult">
            <summary>ZXing.Client.Result.WifiParsedResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiParsedResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiParsedResult.#ctor(ZXing.Client.Result.WifiParsedResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.HiddenGet">
            <summary>设置 WifiParsedResult.get_Hidden() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.HiddenSetBoolean">
            <summary>设置 WifiParsedResult.set_Hidden(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.NetworkEncryptionGet">
            <summary>设置 WifiParsedResult.get_NetworkEncryption() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.NetworkEncryptionSetString">
            <summary>设置 WifiParsedResult.set_NetworkEncryption(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.PasswordGet">
            <summary>设置 WifiParsedResult.get_Password() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.PasswordSetString">
            <summary>设置 WifiParsedResult.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.SsidGet">
            <summary>设置 WifiParsedResult.get_Ssid() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.AllInstances.SsidSetString">
            <summary>设置 WifiParsedResult.set_Ssid(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiParsedResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiParsedResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.ConstructorStringStringString">
            <summary>设置 WifiParsedResult.WifiParsedResult(String networkEncryption, String ssid, String password) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.ConstructorStringStringStringBoolean">
            <summary>设置 WifiParsedResult.WifiParsedResult(String networkEncryption, String ssid, String password, Boolean hidden) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.HiddenGet">
            <summary>设置 WifiParsedResult.get_Hidden() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.HiddenSetBoolean">
            <summary>设置 WifiParsedResult.set_Hidden(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.NetworkEncryptionGet">
            <summary>设置 WifiParsedResult.get_NetworkEncryption() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.NetworkEncryptionSetString">
            <summary>设置 WifiParsedResult.set_NetworkEncryption(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.PasswordGet">
            <summary>设置 WifiParsedResult.get_Password() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.PasswordSetString">
            <summary>设置 WifiParsedResult.set_Password(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.SsidGet">
            <summary>设置 WifiParsedResult.get_Ssid() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiParsedResult.SsidSetString">
            <summary>设置 WifiParsedResult.set_Ssid(String value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimWifiResultParser">
            <summary>ZXing.Client.Result.WifiResultParser 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiResultParser.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiResultParser.#ctor(ZXing.Client.Result.WifiResultParser)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.ShimWifiResultParser.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiResultParser.AllInstances.parseResult">
            <summary>设置 WifiResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiResultParser.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.ShimWifiResultParser.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiResultParser.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiResultParser.Constructor">
            <summary>设置 WifiResultParser.WifiResultParser() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.ShimWifiResultParser.parseResult">
            <summary>设置 WifiResultParser.parse(Result result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult">
            <summary>ZXing.Client.Result.ExpandedProductParsedResult 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.DisplayResult">
            <summary>设置 ExpandedProductParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.DisplayResultGet">
            <summary>设置 ExpandedProductParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.Equals(System.Object)">
            <summary>设置 ExpandedProductParsedResult.Equals(Object o) 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.EqualsObject">
            <summary>设置 ExpandedProductParsedResult.Equals(Object o) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.GetHashCode">
            <summary>设置 ExpandedProductParsedResult.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.GetHashCode01">
            <summary>设置 ExpandedProductParsedResult.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.InitializeStub">
            <summary>初始化 type StubExpandedProductParsedResult 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.ToString">
            <summary>设置 ParsedResult.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubExpandedProductParsedResult.ToString01">
            <summary>设置 ParsedResult.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubExpandedProductResultParser">
            <summary>ZXing.Client.Result.ExpandedProductResultParser 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductResultParser.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubExpandedProductResultParser.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductResultParser.InitializeStub">
            <summary>初始化 type StubExpandedProductResultParser 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubExpandedProductResultParser.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubExpandedProductResultParser.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubExpandedProductResultParser.ParseResult">
            <summary>设置 ExpandedProductResultParser.parse(Result result) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubExpandedProductResultParser.parse(ZXing.Result)">
            <summary>设置 ExpandedProductResultParser.parse(Result result) 的 存根</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubISBNResultParser">
            <summary>ZXing.Client.Result.ISBNResultParser 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubISBNResultParser.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubISBNResultParser.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubISBNResultParser.InitializeStub">
            <summary>初始化 type StubISBNResultParser 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubISBNResultParser.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubISBNResultParser.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubISBNResultParser.ParseResult">
            <summary>设置 ISBNResultParser.parse(Result result) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubISBNResultParser.parse(ZXing.Result)">
            <summary>设置 ISBNResultParser.parse(Result result) 的 存根</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubParsedResult">
            <summary>ZXing.Client.Result.ParsedResult 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubParsedResult.#ctor(ZXing.Client.Result.ParsedResultType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubParsedResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubParsedResult.DisplayResult">
            <summary>设置 ParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubParsedResult.DisplayResultGet">
            <summary>设置 ParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubParsedResult.Equals(System.Object)">
            <summary>设置 ParsedResult.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubParsedResult.EqualsObject">
            <summary>设置 ParsedResult.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubParsedResult.GetHashCode">
            <summary>设置 ParsedResult.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubParsedResult.GetHashCode01">
            <summary>设置 ParsedResult.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubParsedResult.InitializeStub">
            <summary>初始化 type StubParsedResult 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubParsedResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubParsedResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubParsedResult.ToString">
            <summary>设置 ParsedResult.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubParsedResult.ToString01">
            <summary>设置 ParsedResult.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubResultParser">
            <summary>ZXing.Client.Result.ResultParser 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubResultParser.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubResultParser.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubResultParser.InitializeStub">
            <summary>初始化 type StubResultParser 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubResultParser.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubResultParser.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubResultParser.ParseResult">
            <summary>设置 ResultParser.parse(Result theResult) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubResultParser.parse(ZXing.Result)">
            <summary>设置 ResultParser.parse(Result theResult) 的 存根</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser">
            <summary>ZXing.Client.Result.SMSTOMMSTOResultParser 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser.InitializeStub">
            <summary>初始化 type StubSMSTOMMSTOResultParser 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser.ParseResult">
            <summary>设置 SMSTOMMSTOResultParser.parse(Result result) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubSMSTOMMSTOResultParser.parse(ZXing.Result)">
            <summary>设置 SMSTOMMSTOResultParser.parse(Result result) 的 存根</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubSMTPResultParser">
            <summary>ZXing.Client.Result.SMTPResultParser 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubSMTPResultParser.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubSMTPResultParser.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubSMTPResultParser.InitializeStub">
            <summary>初始化 type StubSMTPResultParser 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubSMTPResultParser.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubSMTPResultParser.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubSMTPResultParser.ParseResult">
            <summary>设置 SMTPResultParser.parse(Result result) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubSMTPResultParser.parse(ZXing.Result)">
            <summary>设置 SMTPResultParser.parse(Result result) 的 存根</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubVINParsedResult">
            <summary>ZXing.Client.Result.VINParsedResult 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINParsedResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Char,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubVINParsedResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubVINParsedResult.DisplayResult">
            <summary>设置 VINParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubVINParsedResult.DisplayResultGet">
            <summary>设置 VINParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINParsedResult.Equals(System.Object)">
            <summary>设置 ParsedResult.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubVINParsedResult.EqualsObject">
            <summary>设置 ParsedResult.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINParsedResult.GetHashCode">
            <summary>设置 ParsedResult.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubVINParsedResult.GetHashCode01">
            <summary>设置 ParsedResult.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINParsedResult.InitializeStub">
            <summary>初始化 type StubVINParsedResult 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubVINParsedResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubVINParsedResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINParsedResult.ToString">
            <summary>设置 ParsedResult.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubVINParsedResult.ToString01">
            <summary>设置 ParsedResult.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubVINResultParser">
            <summary>ZXing.Client.Result.VINResultParser 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINResultParser.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubVINResultParser.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINResultParser.InitializeStub">
            <summary>初始化 type StubVINResultParser 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubVINResultParser.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubVINResultParser.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubVINResultParser.ParseResult">
            <summary>设置 VINResultParser.parse(Result result) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubVINResultParser.parse(ZXing.Result)">
            <summary>设置 VINResultParser.parse(Result result) 的 存根</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubWifiParsedResult">
            <summary>ZXing.Client.Result.WifiParsedResult 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiParsedResult.#ctor(System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiParsedResult.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubWifiParsedResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubWifiParsedResult.DisplayResult">
            <summary>设置 ParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubWifiParsedResult.DisplayResultGet">
            <summary>设置 ParsedResult.get_DisplayResult() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiParsedResult.Equals(System.Object)">
            <summary>设置 ParsedResult.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubWifiParsedResult.EqualsObject">
            <summary>设置 ParsedResult.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiParsedResult.GetHashCode">
            <summary>设置 ParsedResult.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubWifiParsedResult.GetHashCode01">
            <summary>设置 ParsedResult.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiParsedResult.InitializeStub">
            <summary>初始化 type StubWifiParsedResult 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubWifiParsedResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubWifiParsedResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiParsedResult.ToString">
            <summary>设置 ParsedResult.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubWifiParsedResult.ToString01">
            <summary>设置 ParsedResult.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.Client.Result.Fakes.StubWifiResultParser">
            <summary>ZXing.Client.Result.WifiResultParser 的存根类型</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiResultParser.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubWifiResultParser.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiResultParser.InitializeStub">
            <summary>初始化 type StubWifiResultParser 的新实例</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubWifiResultParser.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Client.Result.Fakes.StubWifiResultParser.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Client.Result.Fakes.StubWifiResultParser.ParseResult">
            <summary>设置 WifiResultParser.parse(Result result) 的 stub</summary>
        </member>
        <member name="M:ZXing.Client.Result.Fakes.StubWifiResultParser.parse(ZXing.Result)">
            <summary>设置 WifiResultParser.parse(Result result) 的 存根</summary>
        </member>
        <member name="T:ZXing.Common.Detector.Fakes.ShimMathUtils">
            <summary>ZXing.Common.Detector.MathUtils 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Detector.Fakes.ShimMathUtils.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Detector.Fakes.ShimMathUtils.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Detector.Fakes.ShimMathUtils.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimMathUtils.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimMathUtils.distanceInt32Int32Int32Int32">
            <summary>设置 MathUtils.distance(Int32 aX, Int32 aY, Int32 bX, Int32 bY) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimMathUtils.distanceSingleSingleSingleSingle">
            <summary>设置 MathUtils.distance(Single aX, Single aY, Single bX, Single bY) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimMathUtils.roundSingle">
            <summary>设置 MathUtils.round(Single d) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimMathUtils.sumInt32Array">
            <summary>设置 MathUtils.sum(Int32[] array) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector">
            <summary>ZXing.Common.Detector.WhiteRectangleDetector 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.#ctor(ZXing.Common.Detector.WhiteRectangleDetector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.AllInstances.centerEdgesResultPointResultPointResultPointResultPoint">
            <summary>设置 WhiteRectangleDetector.centerEdges(ResultPoint y, ResultPoint z, ResultPoint x, ResultPoint t) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.AllInstances.containsBlackPointInt32Int32Int32Boolean">
            <summary>设置 WhiteRectangleDetector.containsBlackPoint(Int32 a, Int32 b, Int32 fixed, Boolean horizontal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.AllInstances.detect">
            <summary>设置 WhiteRectangleDetector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.AllInstances.getBlackPointOnSegmentSingleSingleSingleSingle">
            <summary>设置 WhiteRectangleDetector.getBlackPointOnSegment(Single aX, Single aY, Single bX, Single bY) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.ConstructorBitMatrix">
            <summary>设置 WhiteRectangleDetector.WhiteRectangleDetector(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.ConstructorBitMatrixInt32Int32Int32">
            <summary>设置 WhiteRectangleDetector.WhiteRectangleDetector(BitMatrix image, Int32 initSize, Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.CreateBitMatrix">
            <summary>设置 WhiteRectangleDetector.Create(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.CreateBitMatrixInt32Int32Int32">
            <summary>设置 WhiteRectangleDetector.Create(BitMatrix image, Int32 initSize, Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.centerEdgesResultPointResultPointResultPointResultPoint">
            <summary>设置 WhiteRectangleDetector.centerEdges(ResultPoint y, ResultPoint z, ResultPoint x, ResultPoint t) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.containsBlackPointInt32Int32Int32Boolean">
            <summary>设置 WhiteRectangleDetector.containsBlackPoint(Int32 a, Int32 b, Int32 fixed, Boolean horizontal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.detect">
            <summary>设置 WhiteRectangleDetector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Detector.Fakes.ShimWhiteRectangleDetector.getBlackPointOnSegmentSingleSingleSingleSingle">
            <summary>设置 WhiteRectangleDetector.getBlackPointOnSegment(Single aX, Single aY, Single bX, Single bY) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimBitArray">
            <summary>ZXing.Common.BitArray 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitArray.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitArray.#ctor(ZXing.Common.BitArray)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimBitArray.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.ArrayGet">
            <summary>设置 BitArray.get_Array() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.Clone">
            <summary>设置 BitArray.Clone() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.EqualsObject">
            <summary>设置 BitArray.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.GetHashCode01">
            <summary>设置 BitArray.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.ItemGetInt32">
            <summary>设置 BitArray.get_Item(Int32 i) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.ItemSetInt32Boolean">
            <summary>设置 BitArray.set_Item(Int32 i, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.SizeGet">
            <summary>设置 BitArray.get_Size() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.SizeInBytesGet">
            <summary>设置 BitArray.get_SizeInBytes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.ToString01">
            <summary>设置 BitArray.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.appendBitArrayBitArray">
            <summary>设置 BitArray.appendBitArray(BitArray other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.appendBitBoolean">
            <summary>设置 BitArray.appendBit(Boolean bit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.appendBitsInt32Int32">
            <summary>设置 BitArray.appendBits(Int32 value, Int32 numBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.clear">
            <summary>设置 BitArray.clear() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.ensureCapacityInt32">
            <summary>设置 BitArray.ensureCapacity(Int32 size) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.flipInt32">
            <summary>设置 BitArray.flip(Int32 i) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.getNextSetInt32">
            <summary>设置 BitArray.getNextSet(Int32 from) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.getNextUnsetInt32">
            <summary>设置 BitArray.getNextUnset(Int32 from) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.isRangeInt32Int32Boolean">
            <summary>设置 BitArray.isRange(Int32 start, Int32 end, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.reverse">
            <summary>设置 BitArray.reverse() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.setBulkInt32Int32">
            <summary>设置 BitArray.setBulk(Int32 i, Int32 newBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.setRangeInt32Int32">
            <summary>设置 BitArray.setRange(Int32 start, Int32 end) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.toBytesInt32ByteArrayInt32Int32">
            <summary>设置 BitArray.toBytes(Int32 bitOffset, Byte[] array, Int32 offset, Int32 numBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.AllInstances.xorBitArray">
            <summary>设置 BitArray.xor(BitArray other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.ArrayGet">
            <summary>设置 BitArray.get_Array() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitArray.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitArray.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.Clone">
            <summary>设置 BitArray.Clone() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.Constructor">
            <summary>设置 BitArray.BitArray() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.ConstructorInt32">
            <summary>设置 BitArray.BitArray(Int32 size) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.ConstructorInt32ArrayInt32">
            <summary>设置 BitArray.BitArray(Int32[] bits, Int32 size) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.EqualsObject">
            <summary>设置 BitArray.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.GetHashCode">
            <summary>设置 BitArray.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.ItemGetInt32">
            <summary>设置 BitArray.get_Item(Int32 i) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.ItemSetInt32Boolean">
            <summary>设置 BitArray.set_Item(Int32 i, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.SizeGet">
            <summary>设置 BitArray.get_Size() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.SizeInBytesGet">
            <summary>设置 BitArray.get_SizeInBytes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.StaticConstructor">
            <summary>设置 BitArray.BitArray() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.ToString">
            <summary>设置 BitArray.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.appendBitArrayBitArray">
            <summary>设置 BitArray.appendBitArray(BitArray other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.appendBitBoolean">
            <summary>设置 BitArray.appendBit(Boolean bit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.appendBitsInt32Int32">
            <summary>设置 BitArray.appendBits(Int32 value, Int32 numBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.clear">
            <summary>设置 BitArray.clear() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.ensureCapacityInt32">
            <summary>设置 BitArray.ensureCapacity(Int32 size) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.flipInt32">
            <summary>设置 BitArray.flip(Int32 i) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.getNextSetInt32">
            <summary>设置 BitArray.getNextSet(Int32 from) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.getNextUnsetInt32">
            <summary>设置 BitArray.getNextUnset(Int32 from) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.isRangeInt32Int32Boolean">
            <summary>设置 BitArray.isRange(Int32 start, Int32 end, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.makeArrayInt32">
            <summary>设置 BitArray.makeArray(Int32 size) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.numberOfTrailingZerosInt32">
            <summary>设置 BitArray.numberOfTrailingZeros(Int32 num) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.reverse">
            <summary>设置 BitArray.reverse() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.setBulkInt32Int32">
            <summary>设置 BitArray.setBulk(Int32 i, Int32 newBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.setRangeInt32Int32">
            <summary>设置 BitArray.setRange(Int32 start, Int32 end) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.toBytesInt32ByteArrayInt32Int32">
            <summary>设置 BitArray.toBytes(Int32 bitOffset, Byte[] array, Int32 offset, Int32 numBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitArray.xorBitArray">
            <summary>设置 BitArray.xor(BitArray other) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimBitMatrix">
            <summary>ZXing.Common.BitMatrix 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitMatrix.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitMatrix.#ctor(ZXing.Common.BitMatrix)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimBitMatrix.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.Clone">
            <summary>设置 BitMatrix.Clone() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.DimensionGet">
            <summary>设置 BitMatrix.get_Dimension() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.EqualsObject">
            <summary>设置 BitMatrix.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.GetHashCode01">
            <summary>设置 BitMatrix.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.HeightGet">
            <summary>设置 BitMatrix.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.ItemGetInt32Int32">
            <summary>设置 BitMatrix.get_Item(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.ItemSetInt32Int32Boolean">
            <summary>设置 BitMatrix.set_Item(Int32 x, Int32 y, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.RowSizeGet">
            <summary>设置 BitMatrix.get_RowSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.ToBitmap">
            <summary>设置 BitMatrix.ToBitmap() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.ToBitmapBarcodeFormatString">
            <summary>设置 BitMatrix.ToBitmap(BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.ToString01">
            <summary>设置 BitMatrix.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.ToStringStringString">
            <summary>设置 BitMatrix.ToString(String setString, String unsetString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.ToStringStringStringString">
            <summary>设置 BitMatrix.ToString(String setString, String unsetString, String lineSeparator) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.WidthGet">
            <summary>设置 BitMatrix.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.buildToStringStringStringString">
            <summary>设置 BitMatrix.buildToString(String setString, String unsetString, String lineSeparator) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.clear">
            <summary>设置 BitMatrix.clear() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.flipInt32Int32">
            <summary>设置 BitMatrix.flip(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.flipWhenFuncOfInt32Int32Boolean">
            <summary>设置 BitMatrix.flipWhen(Func`3&lt;Int32,Int32,Boolean&gt; shouldBeFlipped) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.getBottomRightOnBit">
            <summary>设置 BitMatrix.getBottomRightOnBit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.getEnclosingRectangle">
            <summary>设置 BitMatrix.getEnclosingRectangle() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.getRowInt32BitArray">
            <summary>设置 BitMatrix.getRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.getTopLeftOnBit">
            <summary>设置 BitMatrix.getTopLeftOnBit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.rotate180">
            <summary>设置 BitMatrix.rotate180() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.setRegionInt32Int32Int32Int32">
            <summary>设置 BitMatrix.setRegion(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.setRowInt32BitArray">
            <summary>设置 BitMatrix.setRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.AllInstances.xorBitMatrix">
            <summary>设置 BitMatrix.xor(BitMatrix mask) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitMatrix.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitMatrix.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.Clone">
            <summary>设置 BitMatrix.Clone() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ConstructorInt32">
            <summary>设置 BitMatrix.BitMatrix(Int32 dimension) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ConstructorInt32Int32">
            <summary>设置 BitMatrix.BitMatrix(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ConstructorInt32Int32Int32Array">
            <summary>设置 BitMatrix.BitMatrix(Int32 width, Int32 height, Int32[] bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ConstructorInt32Int32Int32Int32Array">
            <summary>设置 BitMatrix.BitMatrix(Int32 width, Int32 height, Int32 rowSize, Int32[] bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.DimensionGet">
            <summary>设置 BitMatrix.get_Dimension() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.EqualsObject">
            <summary>设置 BitMatrix.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.GetHashCode">
            <summary>设置 BitMatrix.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.HeightGet">
            <summary>设置 BitMatrix.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ItemGetInt32Int32">
            <summary>设置 BitMatrix.get_Item(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ItemSetInt32Int32Boolean">
            <summary>设置 BitMatrix.set_Item(Int32 x, Int32 y, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.RowSizeGet">
            <summary>设置 BitMatrix.get_RowSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ToBitmap">
            <summary>设置 BitMatrix.ToBitmap() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ToBitmapBarcodeFormatString">
            <summary>设置 BitMatrix.ToBitmap(BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ToString">
            <summary>设置 BitMatrix.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ToStringStringString">
            <summary>设置 BitMatrix.ToString(String setString, String unsetString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.ToStringStringStringString">
            <summary>设置 BitMatrix.ToString(String setString, String unsetString, String lineSeparator) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.WidthGet">
            <summary>设置 BitMatrix.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.buildToStringStringStringString">
            <summary>设置 BitMatrix.buildToString(String setString, String unsetString, String lineSeparator) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.clear">
            <summary>设置 BitMatrix.clear() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.flipInt32Int32">
            <summary>设置 BitMatrix.flip(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.flipWhenFuncOfInt32Int32Boolean">
            <summary>设置 BitMatrix.flipWhen(Func`3&lt;Int32,Int32,Boolean&gt; shouldBeFlipped) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.getBottomRightOnBit">
            <summary>设置 BitMatrix.getBottomRightOnBit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.getEnclosingRectangle">
            <summary>设置 BitMatrix.getEnclosingRectangle() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.getRowInt32BitArray">
            <summary>设置 BitMatrix.getRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.getTopLeftOnBit">
            <summary>设置 BitMatrix.getTopLeftOnBit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.parseBooleanArrayArray">
            <summary>设置 BitMatrix.parse(Boolean[][] image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.parseStringStringString">
            <summary>设置 BitMatrix.parse(String stringRepresentation, String setString, String unsetString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.rotate180">
            <summary>设置 BitMatrix.rotate180() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.setRegionInt32Int32Int32Int32">
            <summary>设置 BitMatrix.setRegion(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.setRowInt32BitArray">
            <summary>设置 BitMatrix.setRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitMatrix.xorBitMatrix">
            <summary>设置 BitMatrix.xor(BitMatrix mask) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimBitSource">
            <summary>ZXing.Common.BitSource 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitSource.#ctor(ZXing.Common.BitSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimBitSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.AllInstances.BitOffsetGet">
            <summary>设置 BitSource.get_BitOffset() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.AllInstances.ByteOffsetGet">
            <summary>设置 BitSource.get_ByteOffset() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.AllInstances.available">
            <summary>设置 BitSource.available() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.AllInstances.readBitsInt32">
            <summary>设置 BitSource.readBits(Int32 numBits) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimBitSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.BitOffsetGet">
            <summary>设置 BitSource.get_BitOffset() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.ByteOffsetGet">
            <summary>设置 BitSource.get_ByteOffset() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.ConstructorByteArray">
            <summary>设置 BitSource.BitSource(Byte[] bytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.available">
            <summary>设置 BitSource.available() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimBitSource.readBitsInt32">
            <summary>设置 BitSource.readBits(Int32 numBits) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimCharacterSetECI">
            <summary>ZXing.Common.CharacterSetECI 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimCharacterSetECI.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimCharacterSetECI.#ctor(ZXing.Common.CharacterSetECI)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimCharacterSetECI.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.AllInstances.EncodingNameGet">
            <summary>设置 CharacterSetECI.get_EncodingName() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimCharacterSetECI.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimCharacterSetECI.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.ConstructorInt32String">
            <summary>设置 CharacterSetECI.CharacterSetECI(Int32 value, String encodingName) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.EncodingNameGet">
            <summary>设置 CharacterSetECI.get_EncodingName() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.StaticConstructor">
            <summary>设置 CharacterSetECI.CharacterSetECI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.addCharacterSetInt32String">
            <summary>设置 CharacterSetECI.addCharacterSet(Int32 value, String encodingName) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.addCharacterSetInt32StringArray">
            <summary>设置 CharacterSetECI.addCharacterSet(Int32 value, String[] encodingNames) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.getCharacterSetECIByNameString">
            <summary>设置 CharacterSetECI.getCharacterSetECIByName(String name) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimCharacterSetECI.getCharacterSetECIByValueInt32">
            <summary>设置 CharacterSetECI.getCharacterSetECIByValue(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDecoderResult">
            <summary>ZXing.Common.DecoderResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecoderResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecoderResult.#ctor(ZXing.Common.DecoderResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDecoderResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ByteSegmentsGet">
            <summary>设置 DecoderResult.get_ByteSegments() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ByteSegmentsSetIListOfByteArray">
            <summary>设置 DecoderResult.set_ByteSegments(IList`1&lt;Byte[]&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ECLevelGet">
            <summary>设置 DecoderResult.get_ECLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ECLevelSetString">
            <summary>设置 DecoderResult.set_ECLevel(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ErasuresGet">
            <summary>设置 DecoderResult.get_Erasures() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ErasuresSetInt32">
            <summary>设置 DecoderResult.set_Erasures(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ErrorsCorrectedGet">
            <summary>设置 DecoderResult.get_ErrorsCorrected() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.ErrorsCorrectedSetInt32">
            <summary>设置 DecoderResult.set_ErrorsCorrected(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.NumBitsGet">
            <summary>设置 DecoderResult.get_NumBits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.NumBitsSetInt32">
            <summary>设置 DecoderResult.set_NumBits(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.OtherGet">
            <summary>设置 DecoderResult.get_Other() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.OtherSetObject">
            <summary>设置 DecoderResult.set_Other(Object value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.RawBytesGet">
            <summary>设置 DecoderResult.get_RawBytes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.RawBytesSetByteArray">
            <summary>设置 DecoderResult.set_RawBytes(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.StructuredAppendGet">
            <summary>设置 DecoderResult.get_StructuredAppend() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.StructuredAppendParityGet">
            <summary>设置 DecoderResult.get_StructuredAppendParity() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.StructuredAppendParitySetInt32">
            <summary>设置 DecoderResult.set_StructuredAppendParity(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.StructuredAppendSequenceNumberGet">
            <summary>设置 DecoderResult.get_StructuredAppendSequenceNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.StructuredAppendSequenceNumberSetInt32">
            <summary>设置 DecoderResult.set_StructuredAppendSequenceNumber(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.TextGet">
            <summary>设置 DecoderResult.get_Text() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.AllInstances.TextSetString">
            <summary>设置 DecoderResult.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecoderResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecoderResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ByteSegmentsGet">
            <summary>设置 DecoderResult.get_ByteSegments() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ByteSegmentsSetIListOfByteArray">
            <summary>设置 DecoderResult.set_ByteSegments(IList`1&lt;Byte[]&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ConstructorByteArrayInt32StringIListOfByteArrayString">
            <summary>设置 DecoderResult.DecoderResult(Byte[] rawBytes, Int32 numBits, String text, IList`1&lt;Byte[]&gt; byteSegments, String ecLevel) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ConstructorByteArrayInt32StringIListOfByteArrayStringInt32Int32">
            <summary>设置 DecoderResult.DecoderResult(Byte[] rawBytes, Int32 numBits, String text, IList`1&lt;Byte[]&gt; byteSegments, String ecLevel, Int32 saSequence, Int32 saParity) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ConstructorByteArrayStringIListOfByteArrayString">
            <summary>设置 DecoderResult.DecoderResult(Byte[] rawBytes, String text, IList`1&lt;Byte[]&gt; byteSegments, String ecLevel) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ConstructorByteArrayStringIListOfByteArrayStringInt32Int32">
            <summary>设置 DecoderResult.DecoderResult(Byte[] rawBytes, String text, IList`1&lt;Byte[]&gt; byteSegments, String ecLevel, Int32 saSequence, Int32 saParity) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ECLevelGet">
            <summary>设置 DecoderResult.get_ECLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ECLevelSetString">
            <summary>设置 DecoderResult.set_ECLevel(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ErasuresGet">
            <summary>设置 DecoderResult.get_Erasures() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ErasuresSetInt32">
            <summary>设置 DecoderResult.set_Erasures(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ErrorsCorrectedGet">
            <summary>设置 DecoderResult.get_ErrorsCorrected() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.ErrorsCorrectedSetInt32">
            <summary>设置 DecoderResult.set_ErrorsCorrected(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.NumBitsGet">
            <summary>设置 DecoderResult.get_NumBits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.NumBitsSetInt32">
            <summary>设置 DecoderResult.set_NumBits(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.OtherGet">
            <summary>设置 DecoderResult.get_Other() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.OtherSetObject">
            <summary>设置 DecoderResult.set_Other(Object value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.RawBytesGet">
            <summary>设置 DecoderResult.get_RawBytes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.RawBytesSetByteArray">
            <summary>设置 DecoderResult.set_RawBytes(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.StructuredAppendGet">
            <summary>设置 DecoderResult.get_StructuredAppend() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.StructuredAppendParityGet">
            <summary>设置 DecoderResult.get_StructuredAppendParity() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.StructuredAppendParitySetInt32">
            <summary>设置 DecoderResult.set_StructuredAppendParity(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.StructuredAppendSequenceNumberGet">
            <summary>设置 DecoderResult.get_StructuredAppendSequenceNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.StructuredAppendSequenceNumberSetInt32">
            <summary>设置 DecoderResult.set_StructuredAppendSequenceNumber(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.TextGet">
            <summary>设置 DecoderResult.get_Text() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecoderResult.TextSetString">
            <summary>设置 DecoderResult.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDecodingOptions">
            <summary>ZXing.Common.DecodingOptions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecodingOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecodingOptions.#ctor(ZXing.Common.DecodingOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AllowedEANExtensionsGet">
            <summary>设置 DecodingOptions.get_AllowedEANExtensions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AllowedEANExtensionsSetInt32Array">
            <summary>设置 DecodingOptions.set_AllowedEANExtensions(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AllowedLengthsGet">
            <summary>设置 DecodingOptions.get_AllowedLengths() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AllowedLengthsSetInt32Array">
            <summary>设置 DecodingOptions.set_AllowedLengths(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AssumeCode39CheckDigitGet">
            <summary>设置 DecodingOptions.get_AssumeCode39CheckDigit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AssumeCode39CheckDigitSetBoolean">
            <summary>设置 DecodingOptions.set_AssumeCode39CheckDigit(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AssumeGS1Get">
            <summary>设置 DecodingOptions.get_AssumeGS1() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AssumeGS1SetBoolean">
            <summary>设置 DecodingOptions.set_AssumeGS1(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AssumeMSICheckDigitGet">
            <summary>设置 DecodingOptions.get_AssumeMSICheckDigit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.AssumeMSICheckDigitSetBoolean">
            <summary>设置 DecodingOptions.set_AssumeMSICheckDigit(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.CharacterSetGet">
            <summary>设置 DecodingOptions.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.CharacterSetSetString">
            <summary>设置 DecodingOptions.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.HintsGet">
            <summary>设置 DecodingOptions.get_Hints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.HintsSetIDictionaryOfDecodeHintTypeObject">
            <summary>设置 DecodingOptions.set_Hints(IDictionary`2&lt;DecodeHintType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.PossibleFormatsGet">
            <summary>设置 DecodingOptions.get_PossibleFormats() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 DecodingOptions.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.PureBarcodeGet">
            <summary>设置 DecodingOptions.get_PureBarcode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.PureBarcodeSetBoolean">
            <summary>设置 DecodingOptions.set_PureBarcode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.ReturnCodabarStartEndGet">
            <summary>设置 DecodingOptions.get_ReturnCodabarStartEnd() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.ReturnCodabarStartEndSetBoolean">
            <summary>设置 DecodingOptions.set_ReturnCodabarStartEnd(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.TryHarderGet">
            <summary>设置 DecodingOptions.get_TryHarder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.TryHarderSetBoolean">
            <summary>设置 DecodingOptions.set_TryHarder(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.UseCode39ExtendedModeGet">
            <summary>设置 DecodingOptions.get_UseCode39ExtendedMode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.UseCode39ExtendedModeSetBoolean">
            <summary>设置 DecodingOptions.set_UseCode39ExtendedMode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.UseCode39RelaxedExtendedModeGet">
            <summary>设置 DecodingOptions.get_UseCode39RelaxedExtendedMode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.UseCode39RelaxedExtendedModeSetBoolean">
            <summary>设置 DecodingOptions.set_UseCode39RelaxedExtendedMode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.ValueChangedAddActionOfObjectEventArgs">
            <summary>设置 DecodingOptions.add_ValueChanged(Action`2&lt;Object,EventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances.ValueChangedRemoveActionOfObjectEventArgs">
            <summary>设置 DecodingOptions.remove_ValueChanged(Action`2&lt;Object,EventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllInstances._ctorb__0ObjectEventArgs">
            <summary>设置 DecodingOptions.&lt;.ctor&gt;b__0(Object o, EventArgs args) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllowedEANExtensionsGet">
            <summary>设置 DecodingOptions.get_AllowedEANExtensions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllowedEANExtensionsSetInt32Array">
            <summary>设置 DecodingOptions.set_AllowedEANExtensions(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllowedLengthsGet">
            <summary>设置 DecodingOptions.get_AllowedLengths() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AllowedLengthsSetInt32Array">
            <summary>设置 DecodingOptions.set_AllowedLengths(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AssumeCode39CheckDigitGet">
            <summary>设置 DecodingOptions.get_AssumeCode39CheckDigit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AssumeCode39CheckDigitSetBoolean">
            <summary>设置 DecodingOptions.set_AssumeCode39CheckDigit(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AssumeGS1Get">
            <summary>设置 DecodingOptions.get_AssumeGS1() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AssumeGS1SetBoolean">
            <summary>设置 DecodingOptions.set_AssumeGS1(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AssumeMSICheckDigitGet">
            <summary>设置 DecodingOptions.get_AssumeMSICheckDigit() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.AssumeMSICheckDigitSetBoolean">
            <summary>设置 DecodingOptions.set_AssumeMSICheckDigit(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecodingOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDecodingOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.CharacterSetGet">
            <summary>设置 DecodingOptions.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.CharacterSetSetString">
            <summary>设置 DecodingOptions.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.Constructor">
            <summary>设置 DecodingOptions.DecodingOptions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.HintsGet">
            <summary>设置 DecodingOptions.get_Hints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.HintsSetIDictionaryOfDecodeHintTypeObject">
            <summary>设置 DecodingOptions.set_Hints(IDictionary`2&lt;DecodeHintType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.PossibleFormatsGet">
            <summary>设置 DecodingOptions.get_PossibleFormats() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 DecodingOptions.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.PureBarcodeGet">
            <summary>设置 DecodingOptions.get_PureBarcode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.PureBarcodeSetBoolean">
            <summary>设置 DecodingOptions.set_PureBarcode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.ReturnCodabarStartEndGet">
            <summary>设置 DecodingOptions.get_ReturnCodabarStartEnd() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.ReturnCodabarStartEndSetBoolean">
            <summary>设置 DecodingOptions.set_ReturnCodabarStartEnd(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.TryHarderGet">
            <summary>设置 DecodingOptions.get_TryHarder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.TryHarderSetBoolean">
            <summary>设置 DecodingOptions.set_TryHarder(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.UseCode39ExtendedModeGet">
            <summary>设置 DecodingOptions.get_UseCode39ExtendedMode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.UseCode39ExtendedModeSetBoolean">
            <summary>设置 DecodingOptions.set_UseCode39ExtendedMode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.UseCode39RelaxedExtendedModeGet">
            <summary>设置 DecodingOptions.get_UseCode39RelaxedExtendedMode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.UseCode39RelaxedExtendedModeSetBoolean">
            <summary>设置 DecodingOptions.set_UseCode39RelaxedExtendedMode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.ValueChangedAddActionOfObjectEventArgs">
            <summary>设置 DecodingOptions.add_ValueChanged(Action`2&lt;Object,EventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions.ValueChangedRemoveActionOfObjectEventArgs">
            <summary>设置 DecodingOptions.remove_ValueChanged(Action`2&lt;Object,EventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDecodingOptions._ctorb__0ObjectEventArgs">
            <summary>设置 DecodingOptions.&lt;.ctor&gt;b__0(Object o, EventArgs args) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDefaultGridSampler">
            <summary>ZXing.Common.DefaultGridSampler 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDefaultGridSampler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDefaultGridSampler.#ctor(ZXing.Common.DefaultGridSampler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDefaultGridSampler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDefaultGridSampler.AllInstances.sampleGridBitMatrixInt32Int32PerspectiveTransform">
            <summary>设置 DefaultGridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, PerspectiveTransform transform) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDefaultGridSampler.AllInstances.sampleGridBitMatrixInt32Int32SingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingle">
            <summary>设置 DefaultGridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, Single p1ToX, Single p1ToY, Single p2ToX, Single p2ToY, Single p3ToX, Single p3ToY, Single p4ToX, Single p4ToY, Single p1FromX, Single p1FromY, Single p2FromX, Single p2FromY, Single p3FromX, Single p3FromY, Single p4FromX, Single p4FromY) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDefaultGridSampler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDefaultGridSampler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDefaultGridSampler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDefaultGridSampler.Constructor">
            <summary>设置 DefaultGridSampler.DefaultGridSampler() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDefaultGridSampler.sampleGridBitMatrixInt32Int32PerspectiveTransform">
            <summary>设置 DefaultGridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, PerspectiveTransform transform) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDetectorResult">
            <summary>ZXing.Common.DetectorResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDetectorResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDetectorResult.#ctor(ZXing.Common.DetectorResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimDetectorResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.AllInstances.BitsGet">
            <summary>设置 DetectorResult.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.AllInstances.BitsSetBitMatrix">
            <summary>设置 DetectorResult.set_Bits(BitMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.AllInstances.PointsGet">
            <summary>设置 DetectorResult.get_Points() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.AllInstances.PointsSetResultPointArray">
            <summary>设置 DetectorResult.set_Points(ResultPoint[] value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDetectorResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimDetectorResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.BitsGet">
            <summary>设置 DetectorResult.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.BitsSetBitMatrix">
            <summary>设置 DetectorResult.set_Bits(BitMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.ConstructorBitMatrixResultPointArray">
            <summary>设置 DetectorResult.DetectorResult(BitMatrix bits, ResultPoint[] points) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.PointsGet">
            <summary>设置 DetectorResult.get_Points() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimDetectorResult.PointsSetResultPointArray">
            <summary>设置 DetectorResult.set_Points(ResultPoint[] value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimECI">
            <summary>ZXing.Common.ECI 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimECI.#ctor(ZXing.Common.ECI)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimECI.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimECI.AllInstances.ValueGet">
            <summary>设置 ECI.get_Value() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimECI.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimECI.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimECI.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimECI.ConstructorInt32">
            <summary>设置 ECI.ECI(Int32 value_Renamed) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimECI.ValueGet">
            <summary>设置 ECI.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimECI.getECIByValueInt32">
            <summary>设置 ECI.getECIByValue(Int32 value_Renamed) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimEncodingOptions">
            <summary>ZXing.Common.EncodingOptions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimEncodingOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimEncodingOptions.#ctor(ZXing.Common.EncodingOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.HeightGet">
            <summary>设置 EncodingOptions.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.HeightSetInt32">
            <summary>设置 EncodingOptions.set_Height(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.HintsGet">
            <summary>设置 EncodingOptions.get_Hints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.HintsSetIDictionaryOfEncodeHintTypeObject">
            <summary>设置 EncodingOptions.set_Hints(IDictionary`2&lt;EncodeHintType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.MarginGet">
            <summary>设置 EncodingOptions.get_Margin() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.MarginSetInt32">
            <summary>设置 EncodingOptions.set_Margin(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.PureBarcodeGet">
            <summary>设置 EncodingOptions.get_PureBarcode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.PureBarcodeSetBoolean">
            <summary>设置 EncodingOptions.set_PureBarcode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.WidthGet">
            <summary>设置 EncodingOptions.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.AllInstances.WidthSetInt32">
            <summary>设置 EncodingOptions.set_Width(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimEncodingOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimEncodingOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.Constructor">
            <summary>设置 EncodingOptions.EncodingOptions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.HeightGet">
            <summary>设置 EncodingOptions.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.HeightSetInt32">
            <summary>设置 EncodingOptions.set_Height(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.HintsGet">
            <summary>设置 EncodingOptions.get_Hints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.HintsSetIDictionaryOfEncodeHintTypeObject">
            <summary>设置 EncodingOptions.set_Hints(IDictionary`2&lt;EncodeHintType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.MarginGet">
            <summary>设置 EncodingOptions.get_Margin() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.MarginSetInt32">
            <summary>设置 EncodingOptions.set_Margin(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.PureBarcodeGet">
            <summary>设置 EncodingOptions.get_PureBarcode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.PureBarcodeSetBoolean">
            <summary>设置 EncodingOptions.set_PureBarcode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.WidthGet">
            <summary>设置 EncodingOptions.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimEncodingOptions.WidthSetInt32">
            <summary>设置 EncodingOptions.set_Width(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer">
            <summary>ZXing.Common.GlobalHistogramBinarizer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.#ctor(ZXing.Common.GlobalHistogramBinarizer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.AllInstances.BlackMatrixGet">
            <summary>设置 GlobalHistogramBinarizer.get_BlackMatrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.AllInstances.createBinarizerLuminanceSource">
            <summary>设置 GlobalHistogramBinarizer.createBinarizer(LuminanceSource source) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.AllInstances.getBlackRowInt32BitArray">
            <summary>设置 GlobalHistogramBinarizer.getBlackRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.AllInstances.initArraysInt32">
            <summary>设置 GlobalHistogramBinarizer.initArrays(Int32 luminanceSize) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.BlackMatrixGet">
            <summary>设置 GlobalHistogramBinarizer.get_BlackMatrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.ConstructorLuminanceSource">
            <summary>设置 GlobalHistogramBinarizer.GlobalHistogramBinarizer(LuminanceSource source) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.StaticConstructor">
            <summary>设置 GlobalHistogramBinarizer.GlobalHistogramBinarizer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.createBinarizerLuminanceSource">
            <summary>设置 GlobalHistogramBinarizer.createBinarizer(LuminanceSource source) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.estimateBlackPointInt32ArrayInt32Out">
            <summary>设置 GlobalHistogramBinarizer.estimateBlackPoint(Int32[] buckets, Int32&amp; blackPoint) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.getBlackRowInt32BitArray">
            <summary>设置 GlobalHistogramBinarizer.getBlackRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGlobalHistogramBinarizer.initArraysInt32">
            <summary>设置 GlobalHistogramBinarizer.initArrays(Int32 luminanceSize) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimGridSampler">
            <summary>ZXing.Common.GridSampler 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimGridSampler.#ctor(ZXing.Common.GridSampler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimGridSampler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.AllInstances.sampleGridBitMatrixInt32Int32PerspectiveTransform">
            <summary>设置 GridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, PerspectiveTransform transform) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimGridSampler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimGridSampler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.Constructor">
            <summary>设置 GridSampler.GridSampler() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.InstanceGet">
            <summary>设置 GridSampler.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.StaticConstructor">
            <summary>设置 GridSampler.GridSampler() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.checkAndNudgePointsBitMatrixSingleArray">
            <summary>设置 GridSampler.checkAndNudgePoints(BitMatrix image, Single[] points) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.sampleGridBitMatrixInt32Int32PerspectiveTransform">
            <summary>设置 GridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, PerspectiveTransform transform) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimGridSampler.setGridSamplerGridSampler">
            <summary>设置 GridSampler.setGridSampler(GridSampler newGridSampler) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimHybridBinarizer">
            <summary>ZXing.Common.HybridBinarizer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimHybridBinarizer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimHybridBinarizer.#ctor(ZXing.Common.HybridBinarizer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimHybridBinarizer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.AllInstances.BlackMatrixGet">
            <summary>设置 HybridBinarizer.get_BlackMatrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.AllInstances.binarizeEntireImage">
            <summary>设置 HybridBinarizer.binarizeEntireImage() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.AllInstances.createBinarizerLuminanceSource">
            <summary>设置 HybridBinarizer.createBinarizer(LuminanceSource source) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimHybridBinarizer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimHybridBinarizer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.BlackMatrixGet">
            <summary>设置 HybridBinarizer.get_BlackMatrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.ConstructorLuminanceSource">
            <summary>设置 HybridBinarizer.HybridBinarizer(LuminanceSource source) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.binarizeEntireImage">
            <summary>设置 HybridBinarizer.binarizeEntireImage() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.calculateBlackPointsByteArrayInt32Int32Int32Int32">
            <summary>设置 HybridBinarizer.calculateBlackPoints(Byte[] luminances, Int32 subWidth, Int32 subHeight, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.calculateThresholdForBlockByteArrayInt32Int32Int32Int32Int32ArrayArrayBitMatrix">
            <summary>设置 HybridBinarizer.calculateThresholdForBlock(Byte[] luminances, Int32 subWidth, Int32 subHeight, Int32 width, Int32 height, Int32[][] blackPoints, BitMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.capInt32Int32Int32">
            <summary>设置 HybridBinarizer.cap(Int32 value, Int32 min, Int32 max) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.createBinarizerLuminanceSource">
            <summary>设置 HybridBinarizer.createBinarizer(LuminanceSource source) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimHybridBinarizer.thresholdBlockByteArrayInt32Int32Int32Int32BitMatrix">
            <summary>设置 HybridBinarizer.thresholdBlock(Byte[] luminances, Int32 xoffset, Int32 yoffset, Int32 threshold, Int32 stride, BitMatrix matrix) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimPerspectiveTransform">
            <summary>ZXing.Common.PerspectiveTransform 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimPerspectiveTransform.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimPerspectiveTransform.#ctor(ZXing.Common.PerspectiveTransform)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimPerspectiveTransform.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.AllInstances.buildAdjoint">
            <summary>设置 PerspectiveTransform.buildAdjoint() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.AllInstances.timesPerspectiveTransform">
            <summary>设置 PerspectiveTransform.times(PerspectiveTransform other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.AllInstances.transformPointsSingleArray">
            <summary>设置 PerspectiveTransform.transformPoints(Single[] points) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.AllInstances.transformPointsSingleArraySingleArray">
            <summary>设置 PerspectiveTransform.transformPoints(Single[] xValues, Single[] yValues) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimPerspectiveTransform.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimPerspectiveTransform.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.ConstructorSingleSingleSingleSingleSingleSingleSingleSingleSingle">
            <summary>设置 PerspectiveTransform.PerspectiveTransform(Single a11, Single a21, Single a31, Single a12, Single a22, Single a32, Single a13, Single a23, Single a33) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.buildAdjoint">
            <summary>设置 PerspectiveTransform.buildAdjoint() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.quadrilateralToQuadrilateralSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingle">
            <summary>设置 PerspectiveTransform.quadrilateralToQuadrilateral(Single x0, Single y0, Single x1, Single y1, Single x2, Single y2, Single x3, Single y3, Single x0p, Single y0p, Single x1p, Single y1p, Single x2p, Single y2p, Single x3p, Single y3p) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.quadrilateralToSquareSingleSingleSingleSingleSingleSingleSingleSingle">
            <summary>设置 PerspectiveTransform.quadrilateralToSquare(Single x0, Single y0, Single x1, Single y1, Single x2, Single y2, Single x3, Single y3) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.squareToQuadrilateralSingleSingleSingleSingleSingleSingleSingleSingle">
            <summary>设置 PerspectiveTransform.squareToQuadrilateral(Single x0, Single y0, Single x1, Single y1, Single x2, Single y2, Single x3, Single y3) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.timesPerspectiveTransform">
            <summary>设置 PerspectiveTransform.times(PerspectiveTransform other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.transformPointsSingleArray">
            <summary>设置 PerspectiveTransform.transformPoints(Single[] points) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimPerspectiveTransform.transformPointsSingleArraySingleArray">
            <summary>设置 PerspectiveTransform.transformPoints(Single[] xValues, Single[] yValues) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.ShimStringUtils">
            <summary>ZXing.Common.StringUtils 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimStringUtils.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimStringUtils.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.ShimStringUtils.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimStringUtils.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimStringUtils.StaticConstructor">
            <summary>设置 StringUtils.StringUtils() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.ShimStringUtils.guessEncodingByteArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 StringUtils.guessEncoding(Byte[] bytes, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.StubDecodingOptions">
            <summary>ZXing.Common.DecodingOptions 的存根类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubDecodingOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubDecodingOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubDecodingOptions.InitializeStub">
            <summary>初始化 type StubDecodingOptions 的新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubDecodingOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubDecodingOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.StubDetectorResult">
            <summary>ZXing.Common.DetectorResult 的存根类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubDetectorResult.#ctor(ZXing.Common.BitMatrix,ZXing.ResultPoint[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubDetectorResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubDetectorResult.InitializeStub">
            <summary>初始化 type StubDetectorResult 的新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubDetectorResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubDetectorResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.StubEncodingOptions">
            <summary>ZXing.Common.EncodingOptions 的存根类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubEncodingOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubEncodingOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubEncodingOptions.InitializeStub">
            <summary>初始化 type StubEncodingOptions 的新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubEncodingOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubEncodingOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.StubGlobalHistogramBinarizer">
            <summary>ZXing.Common.GlobalHistogramBinarizer 的存根类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.#ctor(ZXing.LuminanceSource)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.BlackMatrix">
            <summary>设置 GlobalHistogramBinarizer.get_BlackMatrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.BlackMatrixGet">
            <summary>设置 GlobalHistogramBinarizer.get_BlackMatrix() 的 stub</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.CreateBinarizerLuminanceSource">
            <summary>设置 GlobalHistogramBinarizer.createBinarizer(LuminanceSource source) 的 stub</summary>
        </member>
        <member name="F:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.GetBlackRowInt32BitArray">
            <summary>设置 GlobalHistogramBinarizer.getBlackRow(Int32 y, BitArray row) 的 stub</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.InitializeStub">
            <summary>初始化 type StubGlobalHistogramBinarizer 的新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.LuminanceSource">
            <summary>设置 Binarizer.get_LuminanceSource() 的 stub</summary>
        </member>
        <member name="F:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.LuminanceSourceGet">
            <summary>设置 Binarizer.get_LuminanceSource() 的 stub</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.createBinarizer(ZXing.LuminanceSource)">
            <summary>设置 GlobalHistogramBinarizer.createBinarizer(LuminanceSource source) 的 存根</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGlobalHistogramBinarizer.getBlackRow(System.Int32,ZXing.Common.BitArray)">
            <summary>设置 GlobalHistogramBinarizer.getBlackRow(Int32 y, BitArray row) 的 存根</summary>
        </member>
        <member name="T:ZXing.Common.Fakes.StubGridSampler">
            <summary>ZXing.Common.GridSampler 的存根类型</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGridSampler.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGridSampler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGridSampler.InitializeStub">
            <summary>初始化 type StubGridSampler 的新实例</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGridSampler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Common.Fakes.StubGridSampler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.Common.Fakes.StubGridSampler.SampleGridBitMatrixInt32Int32PerspectiveTransform">
            <summary>设置 GridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, PerspectiveTransform transform) 的 stub</summary>
        </member>
        <member name="F:ZXing.Common.Fakes.StubGridSampler.SampleGridBitMatrixInt32Int32SingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingleSingle">
            <summary>设置 GridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, Single p1ToX, Single p1ToY, Single p2ToX, Single p2ToY, Single p3ToX, Single p3ToY, Single p4ToX, Single p4ToY, Single p1FromX, Single p1FromY, Single p2FromX, Single p2FromY, Single p3FromX, Single p3FromY, Single p4FromX, Single p4FromY) 的 stub</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGridSampler.sampleGrid(ZXing.Common.BitMatrix,System.Int32,System.Int32,ZXing.Common.PerspectiveTransform)">
            <summary>设置 GridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, PerspectiveTransform transform) 的 存根</summary>
        </member>
        <member name="M:ZXing.Common.Fakes.StubGridSampler.sampleGrid(ZXing.Common.BitMatrix,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>设置 GridSampler.sampleGrid(BitMatrix image, Int32 dimensionX, Int32 dimensionY, Single p1ToX, Single p1ToY, Single p2ToX, Single p2ToY, Single p3ToX, Single p3ToY, Single p4ToX, Single p4ToY, Single p1FromX, Single p1FromY, Single p2FromX, Single p2FromY, Single p3FromX, Single p3FromY, Single p4FromX, Single p4FromY) 的 存根</summary>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF">
            <summary>ZXing.Common.ReedSolomon.GenericGF 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.#ctor(ZXing.Common.ReedSolomon.GenericGF)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances.GeneratorBaseGet">
            <summary>设置 GenericGF.get_GeneratorBase() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances.SizeGet">
            <summary>设置 GenericGF.get_Size() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances.ToString01">
            <summary>设置 GenericGF.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances.expInt32">
            <summary>设置 GenericGF.exp(Int32 a) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances.inverseInt32">
            <summary>设置 GenericGF.inverse(Int32 a) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances.logInt32">
            <summary>设置 GenericGF.log(Int32 a) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.AllInstances.multiplyInt32Int32">
            <summary>设置 GenericGF.multiply(Int32 a, Int32 b) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.ConstructorInt32Int32Int32">
            <summary>设置 GenericGF.GenericGF(Int32 primitive, Int32 size, Int32 genBase) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.GeneratorBaseGet">
            <summary>设置 GenericGF.get_GeneratorBase() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.SizeGet">
            <summary>设置 GenericGF.get_Size() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.StaticConstructor">
            <summary>设置 GenericGF.GenericGF() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.ToString">
            <summary>设置 GenericGF.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.addOrSubtractInt32Int32">
            <summary>设置 GenericGF.addOrSubtract(Int32 a, Int32 b) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.expInt32">
            <summary>设置 GenericGF.exp(Int32 a) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.inverseInt32">
            <summary>设置 GenericGF.inverse(Int32 a) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.logInt32">
            <summary>设置 GenericGF.log(Int32 a) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimGenericGF.multiplyInt32Int32">
            <summary>设置 GenericGF.multiply(Int32 a, Int32 b) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder">
            <summary>ZXing.Common.ReedSolomon.ReedSolomonDecoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.#ctor(ZXing.Common.ReedSolomon.ReedSolomonDecoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.AllInstances.decodeInt32ArrayInt32">
            <summary>设置 ReedSolomonDecoder.decode(Int32[] received, Int32 twoS) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.ConstructorGenericGF">
            <summary>设置 ReedSolomonDecoder.ReedSolomonDecoder(GenericGF field) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonDecoder.decodeInt32ArrayInt32">
            <summary>设置 ReedSolomonDecoder.decode(Int32[] received, Int32 twoS) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder">
            <summary>ZXing.Common.ReedSolomon.ReedSolomonEncoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.#ctor(ZXing.Common.ReedSolomon.ReedSolomonEncoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.AllInstances.encodeInt32ArrayInt32">
            <summary>设置 ReedSolomonEncoder.encode(Int32[] toEncode, Int32 ecBytes) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.ConstructorGenericGF">
            <summary>设置 ReedSolomonEncoder.ReedSolomonEncoder(GenericGF field) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Common.ReedSolomon.Fakes.ShimReedSolomonEncoder.encodeInt32ArrayInt32">
            <summary>设置 ReedSolomonEncoder.encode(Int32[] toEncode, Int32 ecBytes) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement">
            <summary>ZXing.Datamatrix.Encoder.DefaultPlacement 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.#ctor(ZXing.Datamatrix.Encoder.DefaultPlacement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.BitsGet">
            <summary>设置 DefaultPlacement.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.NumcolsGet">
            <summary>设置 DefaultPlacement.get_Numcols() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.NumrowsGet">
            <summary>设置 DefaultPlacement.get_Numrows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.corner1Int32">
            <summary>设置 DefaultPlacement.corner1(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.corner2Int32">
            <summary>设置 DefaultPlacement.corner2(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.corner3Int32">
            <summary>设置 DefaultPlacement.corner3(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.corner4Int32">
            <summary>设置 DefaultPlacement.corner4(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.getBitInt32Int32">
            <summary>设置 DefaultPlacement.getBit(Int32 col, Int32 row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.hasBitInt32Int32">
            <summary>设置 DefaultPlacement.hasBit(Int32 col, Int32 row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.moduleInt32Int32Int32Int32">
            <summary>设置 DefaultPlacement.module(Int32 row, Int32 col, Int32 pos, Int32 bit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.place">
            <summary>设置 DefaultPlacement.place() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.setBitInt32Int32Boolean">
            <summary>设置 DefaultPlacement.setBit(Int32 col, Int32 row, Boolean bit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.AllInstances.utahInt32Int32Int32">
            <summary>设置 DefaultPlacement.utah(Int32 row, Int32 col, Int32 pos) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.BitsGet">
            <summary>设置 DefaultPlacement.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.ConstructorStringInt32Int32">
            <summary>设置 DefaultPlacement.DefaultPlacement(String codewords, Int32 numcols, Int32 numrows) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.NumcolsGet">
            <summary>设置 DefaultPlacement.get_Numcols() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.NumrowsGet">
            <summary>设置 DefaultPlacement.get_Numrows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.corner1Int32">
            <summary>设置 DefaultPlacement.corner1(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.corner2Int32">
            <summary>设置 DefaultPlacement.corner2(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.corner3Int32">
            <summary>设置 DefaultPlacement.corner3(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.corner4Int32">
            <summary>设置 DefaultPlacement.corner4(Int32 pos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.getBitInt32Int32">
            <summary>设置 DefaultPlacement.getBit(Int32 col, Int32 row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.hasBitInt32Int32">
            <summary>设置 DefaultPlacement.hasBit(Int32 col, Int32 row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.moduleInt32Int32Int32Int32">
            <summary>设置 DefaultPlacement.module(Int32 row, Int32 col, Int32 pos, Int32 bit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.place">
            <summary>设置 DefaultPlacement.place() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.setBitInt32Int32Boolean">
            <summary>设置 DefaultPlacement.setBit(Int32 col, Int32 row, Boolean bit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimDefaultPlacement.utahInt32Int32Int32">
            <summary>设置 DefaultPlacement.utah(Int32 row, Int32 col, Int32 pos) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation">
            <summary>ZXing.Datamatrix.Encoder.Encodation 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation.#ctor(ZXing.Datamatrix.Encoder.Encodation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimEncodation.Constructor">
            <summary>设置 Encodation.Encodation() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection">
            <summary>ZXing.Datamatrix.Encoder.ErrorCorrection 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.StaticConstructor">
            <summary>设置 ErrorCorrection.ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.createECCBlockStringInt32">
            <summary>设置 ErrorCorrection.createECCBlock(String codewords, Int32 numECWords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.createECCBlockStringInt32Int32Int32">
            <summary>设置 ErrorCorrection.createECCBlock(String codewords, Int32 start, Int32 len, Int32 numECWords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimErrorCorrection.encodeECC200StringSymbolInfo">
            <summary>设置 ErrorCorrection.encodeECC200(String codewords, SymbolInfo symbolInfo) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo">
            <summary>ZXing.Datamatrix.Encoder.SymbolInfo 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.#ctor(ZXing.Datamatrix.Encoder.SymbolInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.ToString01">
            <summary>设置 SymbolInfo.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getCodewordCount">
            <summary>设置 SymbolInfo.getCodewordCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getDataLengthForInterleavedBlockInt32">
            <summary>设置 SymbolInfo.getDataLengthForInterleavedBlock(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getErrorLengthForInterleavedBlockInt32">
            <summary>设置 SymbolInfo.getErrorLengthForInterleavedBlock(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getHorizontalDataRegions">
            <summary>设置 SymbolInfo.getHorizontalDataRegions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getInterleavedBlockCount">
            <summary>设置 SymbolInfo.getInterleavedBlockCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getSymbolDataHeight">
            <summary>设置 SymbolInfo.getSymbolDataHeight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getSymbolDataWidth">
            <summary>设置 SymbolInfo.getSymbolDataWidth() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getSymbolHeight">
            <summary>设置 SymbolInfo.getSymbolHeight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getSymbolWidth">
            <summary>设置 SymbolInfo.getSymbolWidth() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.AllInstances.getVerticalDataRegions">
            <summary>设置 SymbolInfo.getVerticalDataRegions() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.ConstructorBooleanInt32Int32Int32Int32Int32">
            <summary>设置 SymbolInfo.SymbolInfo(Boolean rectangular, Int32 dataCapacity, Int32 errorCodewords, Int32 matrixWidth, Int32 matrixHeight, Int32 dataRegions) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.ConstructorBooleanInt32Int32Int32Int32Int32Int32Int32">
            <summary>设置 SymbolInfo.SymbolInfo(Boolean rectangular, Int32 dataCapacity, Int32 errorCodewords, Int32 matrixWidth, Int32 matrixHeight, Int32 dataRegions, Int32 rsBlockData, Int32 rsBlockError) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.StaticConstructor">
            <summary>设置 SymbolInfo.SymbolInfo() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.ToString">
            <summary>设置 SymbolInfo.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getCodewordCount">
            <summary>设置 SymbolInfo.getCodewordCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getDataLengthForInterleavedBlockInt32">
            <summary>设置 SymbolInfo.getDataLengthForInterleavedBlock(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getErrorLengthForInterleavedBlockInt32">
            <summary>设置 SymbolInfo.getErrorLengthForInterleavedBlock(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getHorizontalDataRegions">
            <summary>设置 SymbolInfo.getHorizontalDataRegions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getInterleavedBlockCount">
            <summary>设置 SymbolInfo.getInterleavedBlockCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getSymbolDataHeight">
            <summary>设置 SymbolInfo.getSymbolDataHeight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getSymbolDataWidth">
            <summary>设置 SymbolInfo.getSymbolDataWidth() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getSymbolHeight">
            <summary>设置 SymbolInfo.getSymbolHeight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getSymbolWidth">
            <summary>设置 SymbolInfo.getSymbolWidth() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.getVerticalDataRegions">
            <summary>设置 SymbolInfo.getVerticalDataRegions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.lookupInt32">
            <summary>设置 SymbolInfo.lookup(Int32 dataCodewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.lookupInt32BooleanBoolean">
            <summary>设置 SymbolInfo.lookup(Int32 dataCodewords, Boolean allowRectangular, Boolean fail) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.lookupInt32SymbolShapeHint">
            <summary>设置 SymbolInfo.lookup(Int32 dataCodewords, SymbolShapeHint shape) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.lookupInt32SymbolShapeHintBoolean">
            <summary>设置 SymbolInfo.lookup(Int32 dataCodewords, SymbolShapeHint shape, Boolean fail) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.lookupInt32SymbolShapeHintDimensionDimensionBoolean">
            <summary>设置 SymbolInfo.lookup(Int32 dataCodewords, SymbolShapeHint shape, Dimension minSize, Dimension maxSize, Boolean fail) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.ShimSymbolInfo.overrideSymbolSetSymbolInfoArray">
            <summary>设置 SymbolInfo.overrideSymbolSet(SymbolInfo[] override) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.StubDefaultPlacement">
            <summary>ZXing.Datamatrix.Encoder.DefaultPlacement 的存根类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.StubDefaultPlacement.#ctor(System.String,System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.StubDefaultPlacement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.StubDefaultPlacement.InitializeStub">
            <summary>初始化 type StubDefaultPlacement 的新实例</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.StubDefaultPlacement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.StubDefaultPlacement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo">
            <summary>ZXing.Datamatrix.Encoder.SymbolInfo 的存根类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.GetDataLengthForInterleavedBlockInt32">
            <summary>设置 SymbolInfo.getDataLengthForInterleavedBlock(Int32 index) 的 stub</summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.GetInterleavedBlockCount">
            <summary>设置 SymbolInfo.getInterleavedBlockCount() 的 stub</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.InitializeStub">
            <summary>初始化 type StubSymbolInfo 的新实例</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.ToString">
            <summary>设置 SymbolInfo.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.ToString01">
            <summary>设置 SymbolInfo.ToString() 的 stub</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.getDataLengthForInterleavedBlock(System.Int32)">
            <summary>设置 SymbolInfo.getDataLengthForInterleavedBlock(Int32 index) 的 存根</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Encoder.Fakes.StubSymbolInfo.getInterleavedBlockCount">
            <summary>设置 SymbolInfo.getInterleavedBlockCount() 的 存根</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Fakes.ShimDataMatrixReader">
            <summary>ZXing.Datamatrix.DataMatrixReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.#ctor(ZXing.Datamatrix.DataMatrixReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 DataMatrixReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 DataMatrixReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.AllInstances.reset">
            <summary>设置 DataMatrixReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.Constructor">
            <summary>设置 DataMatrixReader.DataMatrixReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.StaticConstructor">
            <summary>设置 DataMatrixReader.DataMatrixReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.decodeBinaryBitmap">
            <summary>设置 DataMatrixReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 DataMatrixReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.extractPureBitsBitMatrix">
            <summary>设置 DataMatrixReader.extractPureBits(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.moduleSizeInt32ArrayBitMatrixInt32Out">
            <summary>设置 DataMatrixReader.moduleSize(Int32[] leftTopBlack, BitMatrix image, Int32&amp; modulesize) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixReader.reset">
            <summary>设置 DataMatrixReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter">
            <summary>ZXing.Datamatrix.DataMatrixWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.#ctor(ZXing.Datamatrix.DataMatrixWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.AllInstances.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 DataMatrixWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 DataMatrixWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.Constructor">
            <summary>设置 DataMatrixWriter.DataMatrixWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.convertByteMatrixToBitMatrixByteMatrix">
            <summary>设置 DataMatrixWriter.convertByteMatrixToBitMatrix(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.encodeLowLevelDefaultPlacementSymbolInfo">
            <summary>设置 DataMatrixWriter.encodeLowLevel(DefaultPlacement placement, SymbolInfo symbolInfo) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 DataMatrixWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDataMatrixWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 DataMatrixWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions">
            <summary>ZXing.Datamatrix.DatamatrixEncodingOptions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.#ctor(ZXing.Datamatrix.DatamatrixEncodingOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.DefaultEncodationGet">
            <summary>设置 DatamatrixEncodingOptions.get_DefaultEncodation() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.DefaultEncodationSetNullableOfInt32">
            <summary>设置 DatamatrixEncodingOptions.set_DefaultEncodation(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.MaxSizeGet">
            <summary>设置 DatamatrixEncodingOptions.get_MaxSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.MaxSizeSetDimension">
            <summary>设置 DatamatrixEncodingOptions.set_MaxSize(Dimension value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.MinSizeGet">
            <summary>设置 DatamatrixEncodingOptions.get_MinSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.MinSizeSetDimension">
            <summary>设置 DatamatrixEncodingOptions.set_MinSize(Dimension value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.SymbolShapeGet">
            <summary>设置 DatamatrixEncodingOptions.get_SymbolShape() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.AllInstances.SymbolShapeSetNullableOfSymbolShapeHint">
            <summary>设置 DatamatrixEncodingOptions.set_SymbolShape(Nullable`1&lt;SymbolShapeHint&gt; value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.Constructor">
            <summary>设置 DatamatrixEncodingOptions.DatamatrixEncodingOptions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.DefaultEncodationGet">
            <summary>设置 DatamatrixEncodingOptions.get_DefaultEncodation() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.DefaultEncodationSetNullableOfInt32">
            <summary>设置 DatamatrixEncodingOptions.set_DefaultEncodation(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.MaxSizeGet">
            <summary>设置 DatamatrixEncodingOptions.get_MaxSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.MaxSizeSetDimension">
            <summary>设置 DatamatrixEncodingOptions.set_MaxSize(Dimension value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.MinSizeGet">
            <summary>设置 DatamatrixEncodingOptions.get_MinSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.MinSizeSetDimension">
            <summary>设置 DatamatrixEncodingOptions.set_MinSize(Dimension value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.SymbolShapeGet">
            <summary>设置 DatamatrixEncodingOptions.get_SymbolShape() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.ShimDatamatrixEncodingOptions.SymbolShapeSetNullableOfSymbolShapeHint">
            <summary>设置 DatamatrixEncodingOptions.set_SymbolShape(Nullable`1&lt;SymbolShapeHint&gt; value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Fakes.StubDatamatrixEncodingOptions">
            <summary>ZXing.Datamatrix.DatamatrixEncodingOptions 的存根类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.StubDatamatrixEncodingOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.StubDatamatrixEncodingOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Fakes.StubDatamatrixEncodingOptions.InitializeStub">
            <summary>初始化 type StubDatamatrixEncodingOptions 的新实例</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.StubDatamatrixEncodingOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Fakes.StubDatamatrixEncodingOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Fakes.ShimDecoder">
            <summary>ZXing.Datamatrix.Internal.Decoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.#ctor(ZXing.Datamatrix.Internal.Decoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.AllInstances.correctErrorsByteArrayInt32">
            <summary>设置 Decoder.correctErrors(Byte[] codewordBytes, Int32 numDataCodewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.AllInstances.decodeBitMatrix">
            <summary>设置 Decoder.decode(BitMatrix bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.AllInstances.decodeBooleanArrayArray">
            <summary>设置 Decoder.decode(Boolean[][] image) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.Constructor">
            <summary>设置 Decoder.Decoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.correctErrorsByteArrayInt32">
            <summary>设置 Decoder.correctErrors(Byte[] codewordBytes, Int32 numDataCodewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.decodeBitMatrix">
            <summary>设置 Decoder.decode(BitMatrix bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDecoder.decodeBooleanArrayArray">
            <summary>设置 Decoder.decode(Boolean[][] image) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Fakes.ShimDetector">
            <summary>ZXing.Datamatrix.Internal.Detector 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDetector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDetector.#ctor(ZXing.Datamatrix.Internal.Detector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Fakes.ShimDetector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.AllInstances.correctTopRightRectangularResultPointResultPointResultPointResultPointInt32Int32">
            <summary>设置 Detector.correctTopRightRectangular(ResultPoint bottomLeft, ResultPoint bottomRight, ResultPoint topLeft, ResultPoint topRight, Int32 dimensionTop, Int32 dimensionRight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.AllInstances.correctTopRightResultPointResultPointResultPointResultPointInt32">
            <summary>设置 Detector.correctTopRight(ResultPoint bottomLeft, ResultPoint bottomRight, ResultPoint topLeft, ResultPoint topRight, Int32 dimension) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.AllInstances.detect">
            <summary>设置 Detector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.AllInstances.isValidResultPoint">
            <summary>设置 Detector.isValid(ResultPoint p) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDetector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimDetector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.ConstructorBitMatrix">
            <summary>设置 Detector.Detector(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.correctTopRightRectangularResultPointResultPointResultPointResultPointInt32Int32">
            <summary>设置 Detector.correctTopRightRectangular(ResultPoint bottomLeft, ResultPoint bottomRight, ResultPoint topLeft, ResultPoint topRight, Int32 dimensionTop, Int32 dimensionRight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.correctTopRightResultPointResultPointResultPointResultPointInt32">
            <summary>设置 Detector.correctTopRight(ResultPoint bottomLeft, ResultPoint bottomRight, ResultPoint topLeft, ResultPoint topRight, Int32 dimension) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.detect">
            <summary>设置 Detector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.distanceResultPointResultPoint">
            <summary>设置 Detector.distance(ResultPoint a, ResultPoint b) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.incrementIDictionaryOfResultPointInt32ResultPoint">
            <summary>设置 Detector.increment(IDictionary`2&lt;ResultPoint,Int32&gt; table, ResultPoint key) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.isValidResultPoint">
            <summary>设置 Detector.isValid(ResultPoint p) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimDetector.sampleGridBitMatrixResultPointResultPointResultPointResultPointInt32Int32">
            <summary>设置 Detector.sampleGrid(BitMatrix image, ResultPoint topLeft, ResultPoint bottomLeft, ResultPoint bottomRight, ResultPoint topRight, Int32 dimensionX, Int32 dimensionY) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Fakes.ShimVersion">
            <summary>ZXing.Datamatrix.Internal.Version 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimVersion.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimVersion.#ctor(ZXing.Datamatrix.Internal.Version)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances.ToString01">
            <summary>设置 Version.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances.getDataRegionSizeColumns">
            <summary>设置 Version.getDataRegionSizeColumns() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances.getDataRegionSizeRows">
            <summary>设置 Version.getDataRegionSizeRows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances.getSymbolSizeColumns">
            <summary>设置 Version.getSymbolSizeColumns() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances.getSymbolSizeRows">
            <summary>设置 Version.getSymbolSizeRows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances.getTotalCodewords">
            <summary>设置 Version.getTotalCodewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.AllInstances.getVersionNumber">
            <summary>设置 Version.getVersionNumber() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimVersion.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Datamatrix.Internal.Fakes.ShimVersion.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.StaticConstructor">
            <summary>设置 Version.Version() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.ToString">
            <summary>设置 Version.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.buildVersions">
            <summary>设置 Version.buildVersions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.getDataRegionSizeColumns">
            <summary>设置 Version.getDataRegionSizeColumns() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.getDataRegionSizeRows">
            <summary>设置 Version.getDataRegionSizeRows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.getSymbolSizeColumns">
            <summary>设置 Version.getSymbolSizeColumns() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.getSymbolSizeRows">
            <summary>设置 Version.getSymbolSizeRows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.getTotalCodewords">
            <summary>设置 Version.getTotalCodewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.getVersionForDimensionsInt32Int32">
            <summary>设置 Version.getVersionForDimensions(Int32 numRows, Int32 numColumns) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Datamatrix.Internal.Fakes.ShimVersion.getVersionNumber">
            <summary>设置 Version.getVersionNumber() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeReader">
            <summary>ZXing.BarcodeReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.#ctor(ZXing.BarcodeReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.Bind(ZXing.IBarcodeReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.Bind(ZXing.IMultipleBarcodeReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.Bind(ZXing.IBarcodeReaderGeneric{System.Drawing.Bitmap})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReader.Bind(ZXing.IMultipleBarcodeReaderGeneric{System.Drawing.Bitmap})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReader.Constructor">
            <summary>设置 BarcodeReader.BarcodeReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReader.ConstructorReaderFuncOfBitmapLuminanceSourceFuncOfLuminanceSourceBinarizer">
            <summary>设置 BarcodeReader.BarcodeReader(Reader reader, Func`2&lt;Bitmap,LuminanceSource&gt; createLuminanceSource, Func`2&lt;LuminanceSource,Binarizer&gt; createBinarizer) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReader.ConstructorReaderFuncOfBitmapLuminanceSourceFuncOfLuminanceSourceBinarizerFuncOfByteArrayInt32Int32RGBLuminanceSourceBitmapFormatLuminanceSource">
            <summary>设置 BarcodeReader.BarcodeReader(Reader reader, Func`2&lt;Bitmap,LuminanceSource&gt; createLuminanceSource, Func`2&lt;LuminanceSource,Binarizer&gt; createBinarizer, Func`5&lt;Byte[],Int32,Int32,BitmapFormat,LuminanceSource&gt; createRGBLuminanceSource) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReader.StaticConstructor">
            <summary>设置 BarcodeReader.BarcodeReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReader._cctorb__8Bitmap">
            <summary>设置 BarcodeReader.&lt;.cctor&gt;b__8(Bitmap bitmap) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeReaderGeneric`1">
            <summary>ZXing.BarcodeReaderGeneric`1 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReaderGeneric`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReaderGeneric`1.#ctor(ZXing.BarcodeReaderGeneric{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.AutoRotateGet">
            <summary>设置 BarcodeReaderGeneric`1.get_AutoRotate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.AutoRotateSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_AutoRotate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.CharacterSetGet">
            <summary>设置 BarcodeReaderGeneric`1.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.CharacterSetSetString">
            <summary>设置 BarcodeReaderGeneric`1.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.CreateBinarizerGet">
            <summary>设置 BarcodeReaderGeneric`1.get_CreateBinarizer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.CreateLuminanceSourceGet">
            <summary>设置 BarcodeReaderGeneric`1.get_CreateLuminanceSource() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.DecodeByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 BarcodeReaderGeneric`1.Decode(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.DecodeLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.DecodeMultipleByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.DecodeMultipleLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.DecodeMultipleT0">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(!0 barcodeBitmap) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.DecodeT0">
            <summary>设置 BarcodeReaderGeneric`1.Decode(!0 barcodeBitmap) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.OnResultFoundResult">
            <summary>设置 BarcodeReaderGeneric`1.OnResultFound(Result result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.OnResultPointFoundResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.OnResultPointFound(ResultPoint resultPoint) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.OnResultsFoundIEnumerableOfResult">
            <summary>设置 BarcodeReaderGeneric`1.OnResultsFound(IEnumerable`1&lt;Result&gt; results) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.OptionsGet">
            <summary>设置 BarcodeReaderGeneric`1.get_Options() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.OptionsSetDecodingOptions">
            <summary>设置 BarcodeReaderGeneric`1.set_Options(DecodingOptions value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.PossibleFormatsGet">
            <summary>设置 BarcodeReaderGeneric`1.get_PossibleFormats() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 BarcodeReaderGeneric`1.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.PureBarcodeGet">
            <summary>设置 BarcodeReaderGeneric`1.get_PureBarcode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.PureBarcodeSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_PureBarcode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.ReaderGet">
            <summary>设置 BarcodeReaderGeneric`1.get_Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.ResultFoundAddActionOfResult">
            <summary>设置 BarcodeReaderGeneric`1.add_ResultFound(Action`1&lt;Result&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.ResultFoundRemoveActionOfResult">
            <summary>设置 BarcodeReaderGeneric`1.remove_ResultFound(Action`1&lt;Result&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.ResultPointFoundAddActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.add_ResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.ResultPointFoundRemoveActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.remove_ResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.TryHarderGet">
            <summary>设置 BarcodeReaderGeneric`1.get_TryHarder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.TryHarderSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_TryHarder(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.TryInvertedGet">
            <summary>设置 BarcodeReaderGeneric`1.get_TryInverted() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.TryInvertedSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_TryInverted(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances._get_Optionsb__0ObjectEventArgs">
            <summary>设置 BarcodeReaderGeneric`1.&lt;get_Options&gt;b__0(Object o, EventArgs args) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances._set_Optionsb__2ObjectEventArgs">
            <summary>设置 BarcodeReaderGeneric`1.&lt;set_Options&gt;b__2(Object o, EventArgs args) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.explicitResultPointFoundAddActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.add_explicitResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AllInstances.explicitResultPointFoundRemoveActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.remove_explicitResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AutoRotateGet">
            <summary>设置 BarcodeReaderGeneric`1.get_AutoRotate() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.AutoRotateSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_AutoRotate(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReaderGeneric`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReaderGeneric`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReaderGeneric`1.Bind(ZXing.IBarcodeReaderGeneric{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeReaderGeneric`1.Bind(ZXing.IMultipleBarcodeReaderGeneric{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.CharacterSetGet">
            <summary>设置 BarcodeReaderGeneric`1.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.CharacterSetSetString">
            <summary>设置 BarcodeReaderGeneric`1.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.Constructor">
            <summary>设置 BarcodeReaderGeneric`1.BarcodeReaderGeneric`1() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.ConstructorReaderFuncOfT0LuminanceSourceFuncOfLuminanceSourceBinarizer">
            <summary>设置 BarcodeReaderGeneric`1.BarcodeReaderGeneric`1(Reader reader, Func`2&lt;!0,LuminanceSource&gt; createLuminanceSource, Func`2&lt;LuminanceSource,Binarizer&gt; createBinarizer) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.ConstructorReaderFuncOfT0LuminanceSourceFuncOfLuminanceSourceBinarizerFuncOfByteArrayInt32Int32RGBLuminanceSourceBitmapFormatLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.BarcodeReaderGeneric`1(Reader reader, Func`2&lt;!0,LuminanceSource&gt; createLuminanceSource, Func`2&lt;LuminanceSource,Binarizer&gt; createBinarizer, Func`5&lt;Byte[],Int32,Int32,BitmapFormat,LuminanceSource&gt; createRGBLuminanceSource) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.CreateBinarizerGet">
            <summary>设置 BarcodeReaderGeneric`1.get_CreateBinarizer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.CreateLuminanceSourceGet">
            <summary>设置 BarcodeReaderGeneric`1.get_CreateLuminanceSource() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.DecodeByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 BarcodeReaderGeneric`1.Decode(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.DecodeLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.DecodeMultipleByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.DecodeMultipleLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.DecodeMultipleT0">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(!0 barcodeBitmap) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.DecodeT0">
            <summary>设置 BarcodeReaderGeneric`1.Decode(!0 barcodeBitmap) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.OnResultFoundResult">
            <summary>设置 BarcodeReaderGeneric`1.OnResultFound(Result result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.OnResultPointFoundResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.OnResultPointFound(ResultPoint resultPoint) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.OnResultsFoundIEnumerableOfResult">
            <summary>设置 BarcodeReaderGeneric`1.OnResultsFound(IEnumerable`1&lt;Result&gt; results) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.OptionsGet">
            <summary>设置 BarcodeReaderGeneric`1.get_Options() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.OptionsSetDecodingOptions">
            <summary>设置 BarcodeReaderGeneric`1.set_Options(DecodingOptions value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.PossibleFormatsGet">
            <summary>设置 BarcodeReaderGeneric`1.get_PossibleFormats() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 BarcodeReaderGeneric`1.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.PureBarcodeGet">
            <summary>设置 BarcodeReaderGeneric`1.get_PureBarcode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.PureBarcodeSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_PureBarcode(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.ReaderGet">
            <summary>设置 BarcodeReaderGeneric`1.get_Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.ResultFoundAddActionOfResult">
            <summary>设置 BarcodeReaderGeneric`1.add_ResultFound(Action`1&lt;Result&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.ResultFoundRemoveActionOfResult">
            <summary>设置 BarcodeReaderGeneric`1.remove_ResultFound(Action`1&lt;Result&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.ResultPointFoundAddActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.add_ResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.ResultPointFoundRemoveActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.remove_ResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.StaticConstructor">
            <summary>设置 BarcodeReaderGeneric`1.BarcodeReaderGeneric`1() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.TryHarderGet">
            <summary>设置 BarcodeReaderGeneric`1.get_TryHarder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.TryHarderSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_TryHarder(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.TryInvertedGet">
            <summary>设置 BarcodeReaderGeneric`1.get_TryInverted() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.TryInvertedSetBoolean">
            <summary>设置 BarcodeReaderGeneric`1.set_TryInverted(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1._cctorb__4LuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.&lt;.cctor&gt;b__4(LuminanceSource luminanceSource) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1._cctorb__5ByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 BarcodeReaderGeneric`1.&lt;.cctor&gt;b__5(Byte[] rawBytes, Int32 width, Int32 height, BitmapFormat format) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1._get_Optionsb__0ObjectEventArgs">
            <summary>设置 BarcodeReaderGeneric`1.&lt;get_Options&gt;b__0(Object o, EventArgs args) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1._set_Optionsb__2ObjectEventArgs">
            <summary>设置 BarcodeReaderGeneric`1.&lt;set_Options&gt;b__2(Object o, EventArgs args) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.explicitResultPointFoundAddActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.add_explicitResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeReaderGeneric`1.explicitResultPointFoundRemoveActionOfResultPoint">
            <summary>设置 BarcodeReaderGeneric`1.remove_explicitResultPointFound(Action`1&lt;ResultPoint&gt; value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriter">
            <summary>ZXing.BarcodeWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriter.#ctor(ZXing.BarcodeWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriter.Bind(ZXing.IBarcodeWriter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriter.Bind(ZXing.IBarcodeWriterGeneric{System.Drawing.Bitmap})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriter.Constructor">
            <summary>设置 BarcodeWriter.BarcodeWriter() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriterGeneric`1">
            <summary>ZXing.BarcodeWriterGeneric`1 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterGeneric`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterGeneric`1.#ctor(ZXing.BarcodeWriterGeneric{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.EncodeString">
            <summary>设置 BarcodeWriterGeneric`1.Encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.EncoderGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Encoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.EncoderSetWriter">
            <summary>设置 BarcodeWriterGeneric`1.set_Encoder(Writer value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.FormatGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Format() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.FormatSetBarcodeFormat">
            <summary>设置 BarcodeWriterGeneric`1.set_Format(BarcodeFormat value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.OptionsGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Options() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.OptionsSetEncodingOptions">
            <summary>设置 BarcodeWriterGeneric`1.set_Options(EncodingOptions value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.RendererGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Renderer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.RendererSetIBarcodeRendererOfT0">
            <summary>设置 BarcodeWriterGeneric`1.set_Renderer(IBarcodeRenderer`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.WriteBitMatrix">
            <summary>设置 BarcodeWriterGeneric`1.Write(BitMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.AllInstances.WriteString">
            <summary>设置 BarcodeWriterGeneric`1.Write(String contents) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterGeneric`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterGeneric`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterGeneric`1.Bind(ZXing.IBarcodeWriterGeneric{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.Constructor">
            <summary>设置 BarcodeWriterGeneric`1.BarcodeWriterGeneric`1() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.EncodeString">
            <summary>设置 BarcodeWriterGeneric`1.Encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.EncoderGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Encoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.EncoderSetWriter">
            <summary>设置 BarcodeWriterGeneric`1.set_Encoder(Writer value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.FormatGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Format() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.FormatSetBarcodeFormat">
            <summary>设置 BarcodeWriterGeneric`1.set_Format(BarcodeFormat value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.OptionsGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Options() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.OptionsSetEncodingOptions">
            <summary>设置 BarcodeWriterGeneric`1.set_Options(EncodingOptions value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.RendererGet">
            <summary>设置 BarcodeWriterGeneric`1.get_Renderer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.RendererSetIBarcodeRendererOfT0">
            <summary>设置 BarcodeWriterGeneric`1.set_Renderer(IBarcodeRenderer`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.WriteBitMatrix">
            <summary>设置 BarcodeWriterGeneric`1.Write(BitMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterGeneric`1.WriteString">
            <summary>设置 BarcodeWriterGeneric`1.Write(String contents) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriterPixelData">
            <summary>ZXing.BarcodeWriterPixelData 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterPixelData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterPixelData.#ctor(ZXing.BarcodeWriterPixelData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriterPixelData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterPixelData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterPixelData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterPixelData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterPixelData.Bind(ZXing.IBarcodeWriterGeneric{ZXing.Rendering.PixelData})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterPixelData.Constructor">
            <summary>设置 BarcodeWriterPixelData.BarcodeWriterPixelData() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriterSvg">
            <summary>ZXing.BarcodeWriterSvg 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterSvg.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterSvg.#ctor(ZXing.BarcodeWriterSvg)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBarcodeWriterSvg.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterSvg.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterSvg.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterSvg.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBarcodeWriterSvg.Bind(ZXing.IBarcodeWriterGeneric{ZXing.Rendering.SvgRenderer.SvgImage})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBarcodeWriterSvg.Constructor">
            <summary>设置 BarcodeWriterSvg.BarcodeWriterSvg() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBaseLuminanceSource">
            <summary>ZXing.BaseLuminanceSource 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBaseLuminanceSource.#ctor(ZXing.BaseLuminanceSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.CropSupportedGet">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.InversionSupportedGet">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.MatrixGet">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.RotateSupportedGet">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.cropInt32Int32Int32Int32">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.getRowInt32ByteArray">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.invert">
            <summary>设置 BaseLuminanceSource.invert() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.rotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.AllInstances.rotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBaseLuminanceSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBaseLuminanceSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.ConstructorByteArrayInt32Int32">
            <summary>设置 BaseLuminanceSource.BaseLuminanceSource(Byte[] luminanceArray, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.ConstructorInt32Int32">
            <summary>设置 BaseLuminanceSource.BaseLuminanceSource(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.CropSupportedGet">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.InversionSupportedGet">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.MatrixGet">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.RotateSupportedGet">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.cropInt32Int32Int32Int32">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.getRowInt32ByteArray">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.invert">
            <summary>设置 BaseLuminanceSource.invert() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.rotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBaseLuminanceSource.rotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBinarizer">
            <summary>ZXing.Binarizer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBinarizer.#ctor(ZXing.Binarizer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBinarizer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.AllInstances.HeightGet">
            <summary>设置 Binarizer.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.AllInstances.LuminanceSourceGet">
            <summary>设置 Binarizer.get_LuminanceSource() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.AllInstances.WidthGet">
            <summary>设置 Binarizer.get_Width() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBinarizer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBinarizer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.ConstructorLuminanceSource">
            <summary>设置 Binarizer.Binarizer(LuminanceSource source) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.HeightGet">
            <summary>设置 Binarizer.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.LuminanceSourceGet">
            <summary>设置 Binarizer.get_LuminanceSource() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinarizer.WidthGet">
            <summary>设置 Binarizer.get_Width() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBinaryBitmap">
            <summary>ZXing.BinaryBitmap 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBinaryBitmap.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBinaryBitmap.#ctor(ZXing.BinaryBitmap)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBinaryBitmap.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.BlackMatrixGet">
            <summary>设置 BinaryBitmap.get_BlackMatrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.CropSupportedGet">
            <summary>设置 BinaryBitmap.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.HeightGet">
            <summary>设置 BinaryBitmap.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.RotateSupportedGet">
            <summary>设置 BinaryBitmap.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.ToString01">
            <summary>设置 BinaryBitmap.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.WidthGet">
            <summary>设置 BinaryBitmap.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.cropInt32Int32Int32Int32">
            <summary>设置 BinaryBitmap.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.getBlackRowInt32BitArray">
            <summary>设置 BinaryBitmap.getBlackRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.rotateCounterClockwise">
            <summary>设置 BinaryBitmap.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.AllInstances.rotateCounterClockwise45">
            <summary>设置 BinaryBitmap.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBinaryBitmap.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBinaryBitmap.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.BlackMatrixGet">
            <summary>设置 BinaryBitmap.get_BlackMatrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.ConstructorBinarizer">
            <summary>设置 BinaryBitmap.BinaryBitmap(Binarizer binarizer) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.ConstructorBitMatrix">
            <summary>设置 BinaryBitmap.BinaryBitmap(BitMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.CropSupportedGet">
            <summary>设置 BinaryBitmap.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.HeightGet">
            <summary>设置 BinaryBitmap.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.RotateSupportedGet">
            <summary>设置 BinaryBitmap.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.ToString">
            <summary>设置 BinaryBitmap.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.WidthGet">
            <summary>设置 BinaryBitmap.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.cropInt32Int32Int32Int32">
            <summary>设置 BinaryBitmap.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.getBlackRowInt32BitArray">
            <summary>设置 BinaryBitmap.getBlackRow(Int32 y, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.rotateCounterClockwise">
            <summary>设置 BinaryBitmap.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBinaryBitmap.rotateCounterClockwise45">
            <summary>设置 BinaryBitmap.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBitmapLuminanceSource">
            <summary>ZXing.BitmapLuminanceSource 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBitmapLuminanceSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBitmapLuminanceSource.#ctor(ZXing.BitmapLuminanceSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimBitmapLuminanceSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBitmapLuminanceSource.AllInstances.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 BitmapLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBitmapLuminanceSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimBitmapLuminanceSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBitmapLuminanceSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBitmapLuminanceSource.ConstructorBitmap">
            <summary>设置 BitmapLuminanceSource.BitmapLuminanceSource(Bitmap bitmap) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBitmapLuminanceSource.ConstructorInt32Int32">
            <summary>设置 BitmapLuminanceSource.BitmapLuminanceSource(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimBitmapLuminanceSource.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 BitmapLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimDimension">
            <summary>ZXing.Dimension 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimDimension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimDimension.#ctor(ZXing.Dimension)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimDimension.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.AllInstances.EqualsObject">
            <summary>设置 Dimension.Equals(Object other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.AllInstances.GetHashCode01">
            <summary>设置 Dimension.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.AllInstances.HeightGet">
            <summary>设置 Dimension.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.AllInstances.ToString01">
            <summary>设置 Dimension.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.AllInstances.WidthGet">
            <summary>设置 Dimension.get_Width() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimDimension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimDimension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.ConstructorInt32Int32">
            <summary>设置 Dimension.Dimension(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.EqualsObject">
            <summary>设置 Dimension.Equals(Object other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.GetHashCode">
            <summary>设置 Dimension.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.HeightGet">
            <summary>设置 Dimension.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.ToString">
            <summary>设置 Dimension.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimDimension.WidthGet">
            <summary>设置 Dimension.get_Width() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimFormatException">
            <summary>ZXing.FormatException 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimFormatException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimFormatException.#ctor(ZXing.FormatException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimFormatException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimFormatException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimFormatException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimFormatException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimFormatException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimFormatException.Constructor">
            <summary>设置 FormatException.FormatException() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimFormatException.ConstructorException">
            <summary>设置 FormatException.FormatException(Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimFormatException.InstanceGet">
            <summary>设置 FormatException.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimFormatException.getInstanceException">
            <summary>设置 FormatException.getInstance(Exception innerExc) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimInvertedLuminanceSource">
            <summary>ZXing.InvertedLuminanceSource 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimInvertedLuminanceSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimInvertedLuminanceSource.#ctor(ZXing.InvertedLuminanceSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.CropSupportedGet">
            <summary>设置 InvertedLuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.MatrixGet">
            <summary>设置 InvertedLuminanceSource.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.RotateSupportedGet">
            <summary>设置 InvertedLuminanceSource.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.cropInt32Int32Int32Int32">
            <summary>设置 InvertedLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.getRowInt32ByteArray">
            <summary>设置 InvertedLuminanceSource.getRow(Int32 y, Byte[] row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.invert">
            <summary>设置 InvertedLuminanceSource.invert() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.rotateCounterClockwise">
            <summary>设置 InvertedLuminanceSource.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.AllInstances.rotateCounterClockwise45">
            <summary>设置 InvertedLuminanceSource.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimInvertedLuminanceSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimInvertedLuminanceSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.ConstructorLuminanceSource">
            <summary>设置 InvertedLuminanceSource.InvertedLuminanceSource(LuminanceSource delegate) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.CropSupportedGet">
            <summary>设置 InvertedLuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.MatrixGet">
            <summary>设置 InvertedLuminanceSource.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.RotateSupportedGet">
            <summary>设置 InvertedLuminanceSource.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.cropInt32Int32Int32Int32">
            <summary>设置 InvertedLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.getRowInt32ByteArray">
            <summary>设置 InvertedLuminanceSource.getRow(Int32 y, Byte[] row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.invert">
            <summary>设置 InvertedLuminanceSource.invert() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.rotateCounterClockwise">
            <summary>设置 InvertedLuminanceSource.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimInvertedLuminanceSource.rotateCounterClockwise45">
            <summary>设置 InvertedLuminanceSource.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimLuminanceSource">
            <summary>ZXing.LuminanceSource 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimLuminanceSource.#ctor(ZXing.LuminanceSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimLuminanceSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.CropSupportedGet">
            <summary>设置 LuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.HeightGet">
            <summary>设置 LuminanceSource.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.HeightSetInt32">
            <summary>设置 LuminanceSource.set_Height(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.InversionSupportedGet">
            <summary>设置 LuminanceSource.get_InversionSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.RotateSupportedGet">
            <summary>设置 LuminanceSource.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.ToString01">
            <summary>设置 LuminanceSource.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.WidthGet">
            <summary>设置 LuminanceSource.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.WidthSetInt32">
            <summary>设置 LuminanceSource.set_Width(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.cropInt32Int32Int32Int32">
            <summary>设置 LuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.invert">
            <summary>设置 LuminanceSource.invert() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.rotateCounterClockwise">
            <summary>设置 LuminanceSource.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.AllInstances.rotateCounterClockwise45">
            <summary>设置 LuminanceSource.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimLuminanceSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimLuminanceSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.ConstructorInt32Int32">
            <summary>设置 LuminanceSource.LuminanceSource(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.CropSupportedGet">
            <summary>设置 LuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.HeightGet">
            <summary>设置 LuminanceSource.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.HeightSetInt32">
            <summary>设置 LuminanceSource.set_Height(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.InversionSupportedGet">
            <summary>设置 LuminanceSource.get_InversionSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.RotateSupportedGet">
            <summary>设置 LuminanceSource.get_RotateSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.ToString">
            <summary>设置 LuminanceSource.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.WidthGet">
            <summary>设置 LuminanceSource.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.WidthSetInt32">
            <summary>设置 LuminanceSource.set_Width(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.cropInt32Int32Int32Int32">
            <summary>设置 LuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.invert">
            <summary>设置 LuminanceSource.invert() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.rotateCounterClockwise">
            <summary>设置 LuminanceSource.rotateCounterClockwise() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimLuminanceSource.rotateCounterClockwise45">
            <summary>设置 LuminanceSource.rotateCounterClockwise45() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimMultiFormatReader">
            <summary>ZXing.MultiFormatReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatReader.#ctor(ZXing.MultiFormatReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimMultiFormatReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.AllInstances.HintsSetIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatReader.set_Hints(IDictionary`2&lt;DecodeHintType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 MultiFormatReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.AllInstances.decodeInternalBinaryBitmap">
            <summary>设置 MultiFormatReader.decodeInternal(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.AllInstances.decodeWithStateBinaryBitmap">
            <summary>设置 MultiFormatReader.decodeWithState(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.AllInstances.reset">
            <summary>设置 MultiFormatReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.Constructor">
            <summary>设置 MultiFormatReader.MultiFormatReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.HintsSetIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatReader.set_Hints(IDictionary`2&lt;DecodeHintType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.decodeBinaryBitmap">
            <summary>设置 MultiFormatReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.decodeInternalBinaryBitmap">
            <summary>设置 MultiFormatReader.decodeInternal(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.decodeWithStateBinaryBitmap">
            <summary>设置 MultiFormatReader.decodeWithState(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatReader.reset">
            <summary>设置 MultiFormatReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimMultiFormatWriter">
            <summary>ZXing.MultiFormatWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatWriter.#ctor(ZXing.MultiFormatWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimMultiFormatWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.AllInstances.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 MultiFormatWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 MultiFormatWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimMultiFormatWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.Constructor">
            <summary>设置 MultiFormatWriter.MultiFormatWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.StaticConstructor">
            <summary>设置 MultiFormatWriter.MultiFormatWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.SupportedWritersGet">
            <summary>设置 MultiFormatWriter.get_SupportedWriters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__1">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__1() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__2">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__2() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__3">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__3() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__4">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__4() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__5">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__5() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__6">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__6() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__7">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__7() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__8">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__8() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__9">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__9() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__a">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__a() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__b">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__b() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__c">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__c() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__d">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__d() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__e">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__e() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter._cctorb__f">
            <summary>设置 MultiFormatWriter.&lt;.cctor&gt;b__f() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 MultiFormatWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimMultiFormatWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 MultiFormatWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimPlanarYUVLuminanceSource">
            <summary>ZXing.PlanarYUVLuminanceSource 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimPlanarYUVLuminanceSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimPlanarYUVLuminanceSource.#ctor(ZXing.PlanarYUVLuminanceSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 PlanarYUVLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.CropSupportedGet">
            <summary>设置 PlanarYUVLuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.MatrixGet">
            <summary>设置 PlanarYUVLuminanceSource.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.ThumbnailHeightGet">
            <summary>设置 PlanarYUVLuminanceSource.get_ThumbnailHeight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.ThumbnailWidthGet">
            <summary>设置 PlanarYUVLuminanceSource.get_ThumbnailWidth() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.cropInt32Int32Int32Int32">
            <summary>设置 PlanarYUVLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.getRowInt32ByteArray">
            <summary>设置 PlanarYUVLuminanceSource.getRow(Int32 y, Byte[] row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.renderThumbnail">
            <summary>设置 PlanarYUVLuminanceSource.renderThumbnail() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.AllInstances.reverseHorizontalInt32Int32">
            <summary>设置 PlanarYUVLuminanceSource.reverseHorizontal(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimPlanarYUVLuminanceSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimPlanarYUVLuminanceSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.ConstructorByteArrayInt32Int32">
            <summary>设置 PlanarYUVLuminanceSource.PlanarYUVLuminanceSource(Byte[] luminances, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.ConstructorByteArrayInt32Int32Int32Int32Int32Int32Boolean">
            <summary>设置 PlanarYUVLuminanceSource.PlanarYUVLuminanceSource(Byte[] yuvData, Int32 dataWidth, Int32 dataHeight, Int32 left, Int32 top, Int32 width, Int32 height, Boolean reverseHoriz) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 PlanarYUVLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.CropSupportedGet">
            <summary>设置 PlanarYUVLuminanceSource.get_CropSupported() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.MatrixGet">
            <summary>设置 PlanarYUVLuminanceSource.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.ThumbnailHeightGet">
            <summary>设置 PlanarYUVLuminanceSource.get_ThumbnailHeight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.ThumbnailWidthGet">
            <summary>设置 PlanarYUVLuminanceSource.get_ThumbnailWidth() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.cropInt32Int32Int32Int32">
            <summary>设置 PlanarYUVLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.getRowInt32ByteArray">
            <summary>设置 PlanarYUVLuminanceSource.getRow(Int32 y, Byte[] row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.renderThumbnail">
            <summary>设置 PlanarYUVLuminanceSource.renderThumbnail() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimPlanarYUVLuminanceSource.reverseHorizontalInt32Int32">
            <summary>设置 PlanarYUVLuminanceSource.reverseHorizontal(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimRGBLuminanceSource">
            <summary>ZXing.RGBLuminanceSource 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimRGBLuminanceSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimRGBLuminanceSource.#ctor(ZXing.RGBLuminanceSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceARGB32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceARGB32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceBGR24ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceBGR24(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceBGR32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceBGR32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceBGRA32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceBGRA32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceByteArrayRGBLuminanceSourceBitmapFormat">
            <summary>设置 RGBLuminanceSource.CalculateLuminance(Byte[] rgbRawBytes, BitmapFormat bitmapFormat) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceRGB24ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGB24(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceRGB32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGB32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceRGB565ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGB565(Byte[] rgb565RawData) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CalculateLuminanceRGBA32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGBA32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.AllInstances.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 RGBLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimRGBLuminanceSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimRGBLuminanceSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceARGB32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceARGB32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceBGR24ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceBGR24(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceBGR32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceBGR32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceBGRA32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceBGRA32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceByteArrayRGBLuminanceSourceBitmapFormat">
            <summary>设置 RGBLuminanceSource.CalculateLuminance(Byte[] rgbRawBytes, BitmapFormat bitmapFormat) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceRGB24ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGB24(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceRGB32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGB32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceRGB565ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGB565(Byte[] rgb565RawData) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CalculateLuminanceRGBA32ByteArray">
            <summary>设置 RGBLuminanceSource.CalculateLuminanceRGBA32(Byte[] rgbRawBytes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.ConstructorByteArrayInt32Int32">
            <summary>设置 RGBLuminanceSource.RGBLuminanceSource(Byte[] rgbRawBytes, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.ConstructorByteArrayInt32Int32Boolean">
            <summary>设置 RGBLuminanceSource.RGBLuminanceSource(Byte[] luminanceArray, Int32 width, Int32 height, Boolean is8Bit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.ConstructorByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 RGBLuminanceSource.RGBLuminanceSource(Byte[] rgbRawBytes, Int32 width, Int32 height, BitmapFormat bitmapFormat) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.ConstructorInt32Int32">
            <summary>设置 RGBLuminanceSource.RGBLuminanceSource(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 RGBLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimRGBLuminanceSource.DetermineBitmapFormatByteArrayInt32Int32">
            <summary>设置 RGBLuminanceSource.DetermineBitmapFormat(Byte[] rgbRawBytes, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimReaderException">
            <summary>ZXing.ReaderException 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimReaderException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimReaderException.#ctor(ZXing.ReaderException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimReaderException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimReaderException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimReaderException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimReaderException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimReaderException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimReaderException.Constructor">
            <summary>设置 ReaderException.ReaderException() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimReaderException.ConstructorException">
            <summary>设置 ReaderException.ReaderException(Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimReaderException.InstanceGet">
            <summary>设置 ReaderException.get_Instance() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimResult">
            <summary>ZXing.Result 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResult.#ctor(ZXing.Result)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.BarcodeFormatGet">
            <summary>设置 Result.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.BarcodeFormatSetBarcodeFormat">
            <summary>设置 Result.set_BarcodeFormat(BarcodeFormat value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.NumBitsGet">
            <summary>设置 Result.get_NumBits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.NumBitsSetInt32">
            <summary>设置 Result.set_NumBits(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.RawBytesGet">
            <summary>设置 Result.get_RawBytes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.RawBytesSetByteArray">
            <summary>设置 Result.set_RawBytes(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.ResultMetadataGet">
            <summary>设置 Result.get_ResultMetadata() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.ResultMetadataSetIDictionaryOfResultMetadataTypeObject">
            <summary>设置 Result.set_ResultMetadata(IDictionary`2&lt;ResultMetadataType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.ResultPointsGet">
            <summary>设置 Result.get_ResultPoints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.ResultPointsSetResultPointArray">
            <summary>设置 Result.set_ResultPoints(ResultPoint[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.TextGet">
            <summary>设置 Result.get_Text() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.TextSetString">
            <summary>设置 Result.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.TimestampGet">
            <summary>设置 Result.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.TimestampSetInt64">
            <summary>设置 Result.set_Timestamp(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.ToString01">
            <summary>设置 Result.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.addResultPointsResultPointArray">
            <summary>设置 Result.addResultPoints(ResultPoint[] newPoints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.putAllMetadataIDictionaryOfResultMetadataTypeObject">
            <summary>设置 Result.putAllMetadata(IDictionary`2&lt;ResultMetadataType,Object&gt; metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.AllInstances.putMetadataResultMetadataTypeObject">
            <summary>设置 Result.putMetadata(ResultMetadataType type, Object value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.BarcodeFormatGet">
            <summary>设置 Result.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.BarcodeFormatSetBarcodeFormat">
            <summary>设置 Result.set_BarcodeFormat(BarcodeFormat value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ConstructorStringByteArrayInt32ResultPointArrayBarcodeFormat">
            <summary>设置 Result.Result(String text, Byte[] rawBytes, Int32 numBits, ResultPoint[] resultPoints, BarcodeFormat format) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ConstructorStringByteArrayInt32ResultPointArrayBarcodeFormatInt64">
            <summary>设置 Result.Result(String text, Byte[] rawBytes, Int32 numBits, ResultPoint[] resultPoints, BarcodeFormat format, Int64 timestamp) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ConstructorStringByteArrayResultPointArrayBarcodeFormat">
            <summary>设置 Result.Result(String text, Byte[] rawBytes, ResultPoint[] resultPoints, BarcodeFormat format) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ConstructorStringByteArrayResultPointArrayBarcodeFormatInt64">
            <summary>设置 Result.Result(String text, Byte[] rawBytes, ResultPoint[] resultPoints, BarcodeFormat format, Int64 timestamp) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.NumBitsGet">
            <summary>设置 Result.get_NumBits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.NumBitsSetInt32">
            <summary>设置 Result.set_NumBits(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.RawBytesGet">
            <summary>设置 Result.get_RawBytes() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.RawBytesSetByteArray">
            <summary>设置 Result.set_RawBytes(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ResultMetadataGet">
            <summary>设置 Result.get_ResultMetadata() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ResultMetadataSetIDictionaryOfResultMetadataTypeObject">
            <summary>设置 Result.set_ResultMetadata(IDictionary`2&lt;ResultMetadataType,Object&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ResultPointsGet">
            <summary>设置 Result.get_ResultPoints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ResultPointsSetResultPointArray">
            <summary>设置 Result.set_ResultPoints(ResultPoint[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.TextGet">
            <summary>设置 Result.get_Text() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.TextSetString">
            <summary>设置 Result.set_Text(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.TimestampGet">
            <summary>设置 Result.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.TimestampSetInt64">
            <summary>设置 Result.set_Timestamp(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.ToString">
            <summary>设置 Result.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.addResultPointsResultPointArray">
            <summary>设置 Result.addResultPoints(ResultPoint[] newPoints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.putAllMetadataIDictionaryOfResultMetadataTypeObject">
            <summary>设置 Result.putAllMetadata(IDictionary`2&lt;ResultMetadataType,Object&gt; metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResult.putMetadataResultMetadataTypeObject">
            <summary>设置 Result.putMetadata(ResultMetadataType type, Object value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimResultPoint">
            <summary>ZXing.ResultPoint 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResultPoint.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResultPoint.#ctor(ZXing.ResultPoint)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimResultPoint.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.AllInstances.EqualsObject">
            <summary>设置 ResultPoint.Equals(Object other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.AllInstances.GetHashCode01">
            <summary>设置 ResultPoint.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.AllInstances.ToString01">
            <summary>设置 ResultPoint.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.AllInstances.XGet">
            <summary>设置 ResultPoint.get_X() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.AllInstances.YGet">
            <summary>设置 ResultPoint.get_Y() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResultPoint.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimResultPoint.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.Constructor">
            <summary>设置 ResultPoint.ResultPoint() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.ConstructorSingleSingle">
            <summary>设置 ResultPoint.ResultPoint(Single x, Single y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.EqualsObject">
            <summary>设置 ResultPoint.Equals(Object other) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.GetHashCode">
            <summary>设置 ResultPoint.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.ToString">
            <summary>设置 ResultPoint.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.XGet">
            <summary>设置 ResultPoint.get_X() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.YGet">
            <summary>设置 ResultPoint.get_Y() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.crossProductZResultPointResultPointResultPoint">
            <summary>设置 ResultPoint.crossProductZ(ResultPoint pointA, ResultPoint pointB, ResultPoint pointC) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.distanceResultPointResultPoint">
            <summary>设置 ResultPoint.distance(ResultPoint pattern1, ResultPoint pattern2) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimResultPoint.orderBestPatternsResultPointArray">
            <summary>设置 ResultPoint.orderBestPatterns(ResultPoint[] patterns) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimSupportClass">
            <summary>ZXing.SupportClass 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimSupportClass.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.FillOf1M0ArrayInt32Int32M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0[],System.Int32,System.Int32,``0})">
            <summary>设置 SupportClass.Fill(!!0[] array, Int32 startIndex, Int32 endIndex, !!0 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.FillOf1M0ArrayM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0[],``0})">
            <summary>设置 SupportClass.Fill(!!0[] array, !!0 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimSupportClass.GetCharsFromStringStringInt32Int32CharArrayInt32">
            <summary>设置 SupportClass.GetCharsFromString(String sourceString, Int32 sourceStart, Int32 sourceEnd, Char[] destinationArray, Int32 destinationStart) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.GetValueOf1IDictionaryOfDecodeHintTypeObjectDecodeHintTypeM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object},ZXing.DecodeHintType,``0,``0})">
            <summary>设置 SupportClass.GetValue(IDictionary`2&lt;DecodeHintType,Object&gt; hints, DecodeHintType hintType, !!0 default) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.JoinOf1StringIEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.IEnumerable{``0},System.String})">
            <summary>设置 SupportClass.Join(String separator, IEnumerable`1&lt;!!0&gt; values) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimSupportClass.SetCapacityOf1IListOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IList{``0},System.Int32})">
            <summary>设置 SupportClass.SetCapacity(IList`1&lt;!!0&gt; vector, Int32 newCapacity) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimSupportClass.ToBinaryStringInt32">
            <summary>设置 SupportClass.ToBinaryString(Int32 x) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimSupportClass.bitCountInt32">
            <summary>设置 SupportClass.bitCount(Int32 n) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimSupportClass.toStringArrayICollectionOfString">
            <summary>设置 SupportClass.toStringArray(ICollection`1&lt;String&gt; strings) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimWriterException">
            <summary>ZXing.WriterException 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimWriterException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimWriterException.#ctor(ZXing.WriterException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.ShimWriterException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimWriterException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimWriterException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimWriterException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Fakes.ShimWriterException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimWriterException.Constructor">
            <summary>设置 WriterException.WriterException() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimWriterException.ConstructorString">
            <summary>设置 WriterException.WriterException(String message) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Fakes.ShimWriterException.ConstructorStringException">
            <summary>设置 WriterException.WriterException(String message, Exception innerExc) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBarcodeReader">
            <summary>ZXing.BarcodeReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReader.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReader.#ctor(ZXing.Reader,System.Func{System.Drawing.Bitmap,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReader.#ctor(ZXing.Reader,System.Func{System.Drawing.Bitmap,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer},System.Func{System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat,ZXing.LuminanceSource})">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReader.Decode(ZXing.LuminanceSource)">
            <summary>设置 BarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBarcodeReader.DecodeLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReader.DecodeMultiple(ZXing.LuminanceSource)">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBarcodeReader.DecodeMultipleLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReader.InitializeStub">
            <summary>初始化 type StubBarcodeReader 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBarcodeReaderGeneric`1">
            <summary>ZXing.BarcodeReaderGeneric`1 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReaderGeneric`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReaderGeneric`1.#ctor(ZXing.Reader,System.Func{`0,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReaderGeneric`1.#ctor(ZXing.Reader,System.Func{`0,ZXing.LuminanceSource},System.Func{ZXing.LuminanceSource,ZXing.Binarizer},System.Func{System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat,ZXing.LuminanceSource})">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeReaderGeneric`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReaderGeneric`1.Decode(ZXing.LuminanceSource)">
            <summary>设置 BarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBarcodeReaderGeneric`1.DecodeLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReaderGeneric`1.DecodeMultiple(ZXing.LuminanceSource)">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBarcodeReaderGeneric`1.DecodeMultipleLuminanceSource">
            <summary>设置 BarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeReaderGeneric`1.InitializeStub">
            <summary>初始化 type StubBarcodeReaderGeneric 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeReaderGeneric`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeReaderGeneric`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBarcodeWriter">
            <summary>ZXing.BarcodeWriter 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriter.InitializeStub">
            <summary>初始化 type StubBarcodeWriter 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBarcodeWriterGeneric`1">
            <summary>ZXing.BarcodeWriterGeneric`1 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriterGeneric`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterGeneric`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriterGeneric`1.InitializeStub">
            <summary>初始化 type StubBarcodeWriterGeneric 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterGeneric`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterGeneric`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBarcodeWriterPixelData">
            <summary>ZXing.BarcodeWriterPixelData 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriterPixelData.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterPixelData.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriterPixelData.InitializeStub">
            <summary>初始化 type StubBarcodeWriterPixelData 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterPixelData.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterPixelData.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBarcodeWriterSvg">
            <summary>ZXing.BarcodeWriterSvg 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriterSvg.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterSvg.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBarcodeWriterSvg.InitializeStub">
            <summary>初始化 type StubBarcodeWriterSvg 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterSvg.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBarcodeWriterSvg.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBaseLuminanceSource">
            <summary>ZXing.BaseLuminanceSource 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.AttachBackingFieldToHeight">
            <summary>附加委托以将 StubBaseLuminanceSource.Height 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.AttachBackingFieldToWidth">
            <summary>附加委托以将 StubBaseLuminanceSource.Width 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 BaseLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 BaseLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.CropInt32Int32Int32Int32">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.CropSupported">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.CropSupportedGet">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.GetRowInt32ByteArray">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.Height">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.HeightGet">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.HeightSetInt32">
            <summary>设置 LuminanceSource.set_Height(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.InitializeStub">
            <summary>初始化 type StubBaseLuminanceSource 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.InversionSupported">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.InversionSupportedGet">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.Invert">
            <summary>设置 BaseLuminanceSource.invert() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.Matrix">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.MatrixGet">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.RotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.RotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.RotateSupported">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.RotateSupportedGet">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.ToString">
            <summary>设置 LuminanceSource.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.ToString01">
            <summary>设置 LuminanceSource.ToString() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBaseLuminanceSource.Width">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.WidthGet">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBaseLuminanceSource.WidthSetInt32">
            <summary>设置 LuminanceSource.set_Width(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.invert">
            <summary>设置 BaseLuminanceSource.invert() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.rotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBaseLuminanceSource.rotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBinarizer">
            <summary>ZXing.Binarizer 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBinarizer.#ctor(ZXing.LuminanceSource)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBinarizer.BlackMatrix">
            <summary>设置 Binarizer.get_BlackMatrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBinarizer.BlackMatrixGet">
            <summary>设置 Binarizer.get_BlackMatrix() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBinarizer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBinarizer.CreateBinarizerLuminanceSource">
            <summary>设置 Binarizer.createBinarizer(LuminanceSource source) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBinarizer.GetBlackRowInt32BitArray">
            <summary>设置 Binarizer.getBlackRow(Int32 y, BitArray row) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBinarizer.InitializeStub">
            <summary>初始化 type StubBinarizer 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBinarizer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBinarizer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBinarizer.LuminanceSource">
            <summary>设置 Binarizer.get_LuminanceSource() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBinarizer.LuminanceSourceGet">
            <summary>设置 Binarizer.get_LuminanceSource() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBinarizer.createBinarizer(ZXing.LuminanceSource)">
            <summary>设置 Binarizer.createBinarizer(LuminanceSource source) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBinarizer.getBlackRow(System.Int32,ZXing.Common.BitArray)">
            <summary>设置 Binarizer.getBlackRow(Int32 y, BitArray row) 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubBitmapLuminanceSource">
            <summary>ZXing.BitmapLuminanceSource 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.#ctor(System.Drawing.Bitmap)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.AttachBackingFieldToHeight">
            <summary>附加委托以将 StubBitmapLuminanceSource.Height 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.AttachBackingFieldToWidth">
            <summary>附加委托以将 StubBitmapLuminanceSource.Width 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 BitmapLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 BitmapLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.CropInt32Int32Int32Int32">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.CropSupported">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.CropSupportedGet">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.GetRowInt32ByteArray">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.Height">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.HeightGet">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.HeightSetInt32">
            <summary>设置 LuminanceSource.set_Height(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.InitializeStub">
            <summary>初始化 type StubBitmapLuminanceSource 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.InversionSupported">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.InversionSupportedGet">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.Invert">
            <summary>设置 BaseLuminanceSource.invert() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.Matrix">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.MatrixGet">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.RotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.RotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.RotateSupported">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.RotateSupportedGet">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.ToString">
            <summary>设置 LuminanceSource.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.ToString01">
            <summary>设置 LuminanceSource.ToString() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubBitmapLuminanceSource.Width">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.WidthGet">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubBitmapLuminanceSource.WidthSetInt32">
            <summary>设置 LuminanceSource.set_Width(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.invert">
            <summary>设置 BaseLuminanceSource.invert() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.rotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubBitmapLuminanceSource.rotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubIBarcodeReader">
            <summary>ZXing.IBarcodeReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.#ctor">
            <summary>初始化 type StubIBarcodeReader 的新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.AttachBackingFieldToCharacterSet">
            <summary>附加委托以将 StubIBarcodeReader.CharacterSet 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.AttachBackingFieldToOptions">
            <summary>附加委托以将 StubIBarcodeReader.Options 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.AttachBackingFieldToPossibleFormats">
            <summary>附加委托以将 StubIBarcodeReader.PossibleFormats 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.AttachBackingFieldToPureBarcode">
            <summary>附加委托以将 StubIBarcodeReader.PureBarcode 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.AttachBackingFieldToTryHarder">
            <summary>附加委托以将 StubIBarcodeReader.TryHarder 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#CharacterSet">
            <summary>设置 IBarcodeReader.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.CharacterSetGet">
            <summary>设置 IBarcodeReader.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.CharacterSetSetString">
            <summary>设置 IBarcodeReader.set_CharacterSet(String value) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.DecodeBitmap">
            <summary>设置 IBarcodeReader.Decode(Bitmap barcodeBitmap) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.DecodeByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 IBarcodeReader.Decode(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.DecodeLuminanceSource">
            <summary>设置 IBarcodeReader.Decode(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#Options">
            <summary>设置 IBarcodeReader.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.OptionsGet">
            <summary>设置 IBarcodeReader.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.OptionsSetDecodingOptions">
            <summary>设置 IBarcodeReader.set_Options(DecodingOptions value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#PossibleFormats">
            <summary>设置 IBarcodeReader.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.PossibleFormatsGet">
            <summary>设置 IBarcodeReader.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 IBarcodeReader.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#PureBarcode">
            <summary>设置 IBarcodeReader.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.PureBarcodeGet">
            <summary>设置 IBarcodeReader.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.PureBarcodeSetBoolean">
            <summary>设置 IBarcodeReader.set_PureBarcode(Boolean value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#TryHarder">
            <summary>设置 IBarcodeReader.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.TryHarderGet">
            <summary>设置 IBarcodeReader.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReader.TryHarderSetBoolean">
            <summary>设置 IBarcodeReader.set_TryHarder(Boolean value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#Decode(System.Drawing.Bitmap)">
            <summary>设置 IBarcodeReader.Decode(Bitmap barcodeBitmap) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#Decode(ZXing.LuminanceSource)">
            <summary>设置 IBarcodeReader.Decode(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReader.ZXing#IBarcodeReader#Decode(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>设置 IBarcodeReader.Decode(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubIBarcodeReaderGeneric`1">
            <summary>ZXing.IBarcodeReaderGeneric`1 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.#ctor">
            <summary>初始化 type StubIBarcodeReaderGeneric 的新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.AttachBackingFieldToCharacterSet">
            <summary>附加委托以将 StubIBarcodeReaderGeneric.CharacterSet 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.AttachBackingFieldToOptions">
            <summary>附加委托以将 StubIBarcodeReaderGeneric.Options 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.AttachBackingFieldToPossibleFormats">
            <summary>附加委托以将 StubIBarcodeReaderGeneric.PossibleFormats 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.AttachBackingFieldToPureBarcode">
            <summary>附加委托以将 StubIBarcodeReaderGeneric.PureBarcode 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.AttachBackingFieldToTryHarder">
            <summary>附加委托以将 StubIBarcodeReaderGeneric.TryHarder 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#CharacterSet">
            <summary>设置 IBarcodeReaderGeneric`1.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.CharacterSetGet">
            <summary>设置 IBarcodeReaderGeneric`1.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.CharacterSetSetString">
            <summary>设置 IBarcodeReaderGeneric`1.set_CharacterSet(String value) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.DecodeByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 IBarcodeReaderGeneric`1.Decode(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.DecodeLuminanceSource">
            <summary>设置 IBarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.DecodeT0">
            <summary>设置 IBarcodeReaderGeneric`1.Decode(!0 barcodeBitmap) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#Options">
            <summary>设置 IBarcodeReaderGeneric`1.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.OptionsGet">
            <summary>设置 IBarcodeReaderGeneric`1.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.OptionsSetDecodingOptions">
            <summary>设置 IBarcodeReaderGeneric`1.set_Options(DecodingOptions value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#PossibleFormats">
            <summary>设置 IBarcodeReaderGeneric`1.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.PossibleFormatsGet">
            <summary>设置 IBarcodeReaderGeneric`1.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 IBarcodeReaderGeneric`1.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#PureBarcode">
            <summary>设置 IBarcodeReaderGeneric`1.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.PureBarcodeGet">
            <summary>设置 IBarcodeReaderGeneric`1.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.PureBarcodeSetBoolean">
            <summary>设置 IBarcodeReaderGeneric`1.set_PureBarcode(Boolean value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#TryHarder">
            <summary>设置 IBarcodeReaderGeneric`1.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.TryHarderGet">
            <summary>设置 IBarcodeReaderGeneric`1.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeReaderGeneric`1.TryHarderSetBoolean">
            <summary>设置 IBarcodeReaderGeneric`1.set_TryHarder(Boolean value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#Decode(ZXing.LuminanceSource)">
            <summary>设置 IBarcodeReaderGeneric`1.Decode(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#Decode(`0)">
            <summary>设置 IBarcodeReaderGeneric`1.Decode(!0 barcodeBitmap) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeReaderGeneric`1.ZXing#IBarcodeReaderGeneric{T}#Decode(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>设置 IBarcodeReaderGeneric`1.Decode(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubIBarcodeWriter">
            <summary>ZXing.IBarcodeWriter 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeWriter.#ctor">
            <summary>初始化 type StubIBarcodeWriter 的新实例</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeWriter.EncodeString">
            <summary>设置 IBarcodeWriter.Encode(String contents) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeWriter.ZXing#IBarcodeWriter#Encode(System.String)">
            <summary>设置 IBarcodeWriter.Encode(String contents) 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubIBarcodeWriterGeneric`1">
            <summary>ZXing.IBarcodeWriterGeneric`1 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeWriterGeneric`1.#ctor">
            <summary>初始化 type StubIBarcodeWriterGeneric 的新实例</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeWriterGeneric`1.EncodeString">
            <summary>设置 IBarcodeWriterGeneric`1.Encode(String contents) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeWriterGeneric`1.WriteBitMatrix">
            <summary>设置 IBarcodeWriterGeneric`1.Write(BitMatrix matrix) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIBarcodeWriterGeneric`1.WriteString">
            <summary>设置 IBarcodeWriterGeneric`1.Write(String contents) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeWriterGeneric`1.ZXing#IBarcodeWriterGeneric{TOutput}#Encode(System.String)">
            <summary>设置 IBarcodeWriterGeneric`1.Encode(String contents) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeWriterGeneric`1.ZXing#IBarcodeWriterGeneric{TOutput}#Write(System.String)">
            <summary>设置 IBarcodeWriterGeneric`1.Write(String contents) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIBarcodeWriterGeneric`1.ZXing#IBarcodeWriterGeneric{TOutput}#Write(ZXing.Common.BitMatrix)">
            <summary>设置 IBarcodeWriterGeneric`1.Write(BitMatrix matrix) 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubIMultipleBarcodeReader">
            <summary>ZXing.IMultipleBarcodeReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.#ctor">
            <summary>初始化 type StubIMultipleBarcodeReader 的新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.AttachBackingFieldToCharacterSet">
            <summary>附加委托以将 StubIMultipleBarcodeReader.CharacterSet 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.AttachBackingFieldToOptions">
            <summary>附加委托以将 StubIMultipleBarcodeReader.Options 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.AttachBackingFieldToPossibleFormats">
            <summary>附加委托以将 StubIMultipleBarcodeReader.PossibleFormats 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.AttachBackingFieldToPureBarcode">
            <summary>附加委托以将 StubIMultipleBarcodeReader.PureBarcode 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.AttachBackingFieldToTryHarder">
            <summary>附加委托以将 StubIMultipleBarcodeReader.TryHarder 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#CharacterSet">
            <summary>设置 IMultipleBarcodeReader.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.CharacterSetGet">
            <summary>设置 IMultipleBarcodeReader.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.CharacterSetSetString">
            <summary>设置 IMultipleBarcodeReader.set_CharacterSet(String value) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.DecodeMultipleBitmap">
            <summary>设置 IMultipleBarcodeReader.DecodeMultiple(Bitmap barcodeBitmap) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.DecodeMultipleByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 IMultipleBarcodeReader.DecodeMultiple(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.DecodeMultipleLuminanceSource">
            <summary>设置 IMultipleBarcodeReader.DecodeMultiple(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#Options">
            <summary>设置 IMultipleBarcodeReader.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.OptionsGet">
            <summary>设置 IMultipleBarcodeReader.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.OptionsSetDecodingOptions">
            <summary>设置 IMultipleBarcodeReader.set_Options(DecodingOptions value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#PossibleFormats">
            <summary>设置 IMultipleBarcodeReader.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.PossibleFormatsGet">
            <summary>设置 IMultipleBarcodeReader.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 IMultipleBarcodeReader.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#PureBarcode">
            <summary>设置 IMultipleBarcodeReader.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.PureBarcodeGet">
            <summary>设置 IMultipleBarcodeReader.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.PureBarcodeSetBoolean">
            <summary>设置 IMultipleBarcodeReader.set_PureBarcode(Boolean value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#TryHarder">
            <summary>设置 IMultipleBarcodeReader.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.TryHarderGet">
            <summary>设置 IMultipleBarcodeReader.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReader.TryHarderSetBoolean">
            <summary>设置 IMultipleBarcodeReader.set_TryHarder(Boolean value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#DecodeMultiple(System.Drawing.Bitmap)">
            <summary>设置 IMultipleBarcodeReader.DecodeMultiple(Bitmap barcodeBitmap) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#DecodeMultiple(ZXing.LuminanceSource)">
            <summary>设置 IMultipleBarcodeReader.DecodeMultiple(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReader.ZXing#IMultipleBarcodeReader#DecodeMultiple(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>设置 IMultipleBarcodeReader.DecodeMultiple(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1">
            <summary>ZXing.IMultipleBarcodeReaderGeneric`1 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.#ctor">
            <summary>初始化 type StubIMultipleBarcodeReaderGeneric 的新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.AttachBackingFieldToCharacterSet">
            <summary>附加委托以将 StubIMultipleBarcodeReaderGeneric.CharacterSet 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.AttachBackingFieldToOptions">
            <summary>附加委托以将 StubIMultipleBarcodeReaderGeneric.Options 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.AttachBackingFieldToPossibleFormats">
            <summary>附加委托以将 StubIMultipleBarcodeReaderGeneric.PossibleFormats 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.AttachBackingFieldToPureBarcode">
            <summary>附加委托以将 StubIMultipleBarcodeReaderGeneric.PureBarcode 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.AttachBackingFieldToTryHarder">
            <summary>附加委托以将 StubIMultipleBarcodeReaderGeneric.TryHarder 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#CharacterSet">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.CharacterSetGet">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_CharacterSet() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.CharacterSetSetString">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.set_CharacterSet(String value) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.DecodeMultipleByteArrayInt32Int32RGBLuminanceSourceBitmapFormat">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.DecodeMultiple(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.DecodeMultipleLuminanceSource">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.DecodeMultipleT0">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.DecodeMultiple(!0 barcodeBitmap) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#Options">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.OptionsGet">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_Options() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.OptionsSetDecodingOptions">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.set_Options(DecodingOptions value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#PossibleFormats">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.PossibleFormatsGet">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_PossibleFormats() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.PossibleFormatsSetIListOfBarcodeFormat">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.set_PossibleFormats(IList`1&lt;BarcodeFormat&gt; value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#PureBarcode">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.PureBarcodeGet">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_PureBarcode() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.PureBarcodeSetBoolean">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.set_PureBarcode(Boolean value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#TryHarder">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.TryHarderGet">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.get_TryHarder() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.TryHarderSetBoolean">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.set_TryHarder(Boolean value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#DecodeMultiple(ZXing.LuminanceSource)">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.DecodeMultiple(LuminanceSource luminanceSource) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#DecodeMultiple(`0)">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.DecodeMultiple(!0 barcodeBitmap) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubIMultipleBarcodeReaderGeneric`1.ZXing#IMultipleBarcodeReaderGeneric{T}#DecodeMultiple(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>设置 IMultipleBarcodeReaderGeneric`1.DecodeMultiple(Byte[] rawRGB, Int32 width, Int32 height, BitmapFormat format) 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubLuminanceSource">
            <summary>ZXing.LuminanceSource 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.AttachBackingFieldToHeight">
            <summary>附加委托以将 StubLuminanceSource.Height 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.AttachBackingFieldToWidth">
            <summary>附加委托以将 StubLuminanceSource.Width 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.CropInt32Int32Int32Int32">
            <summary>设置 LuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.CropSupported">
            <summary>设置 LuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.CropSupportedGet">
            <summary>设置 LuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.GetRowInt32ByteArray">
            <summary>设置 LuminanceSource.getRow(Int32 y, Byte[] row) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.Height">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.HeightGet">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.HeightSetInt32">
            <summary>设置 LuminanceSource.set_Height(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.InitializeStub">
            <summary>初始化 type StubLuminanceSource 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.InversionSupported">
            <summary>设置 LuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.InversionSupportedGet">
            <summary>设置 LuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.Invert">
            <summary>设置 LuminanceSource.invert() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.Matrix">
            <summary>设置 LuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.MatrixGet">
            <summary>设置 LuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.RotateCounterClockwise">
            <summary>设置 LuminanceSource.rotateCounterClockwise() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.RotateCounterClockwise45">
            <summary>设置 LuminanceSource.rotateCounterClockwise45() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.RotateSupported">
            <summary>设置 LuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.RotateSupportedGet">
            <summary>设置 LuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.ToString">
            <summary>设置 LuminanceSource.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.ToString01">
            <summary>设置 LuminanceSource.ToString() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubLuminanceSource.Width">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.WidthGet">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubLuminanceSource.WidthSetInt32">
            <summary>设置 LuminanceSource.set_Width(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>设置 LuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>设置 LuminanceSource.getRow(Int32 y, Byte[] row) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.invert">
            <summary>设置 LuminanceSource.invert() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.rotateCounterClockwise">
            <summary>设置 LuminanceSource.rotateCounterClockwise() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubLuminanceSource.rotateCounterClockwise45">
            <summary>设置 LuminanceSource.rotateCounterClockwise45() 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubRGBLuminanceSource">
            <summary>ZXing.RGBLuminanceSource 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.#ctor(System.Byte[],System.Int32,System.Int32,ZXing.RGBLuminanceSource.BitmapFormat)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.AttachBackingFieldToHeight">
            <summary>附加委托以将 StubRGBLuminanceSource.Height 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.AttachBackingFieldToWidth">
            <summary>附加委托以将 StubRGBLuminanceSource.Width 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.CreateLuminanceSource(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 RGBLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.CreateLuminanceSourceByteArrayInt32Int32">
            <summary>设置 RGBLuminanceSource.CreateLuminanceSource(Byte[] newLuminances, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.CropInt32Int32Int32Int32">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.CropSupported">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.CropSupportedGet">
            <summary>设置 BaseLuminanceSource.get_CropSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.GetRowInt32ByteArray">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.Height">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.HeightGet">
            <summary>设置 LuminanceSource.get_Height() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.HeightSetInt32">
            <summary>设置 LuminanceSource.set_Height(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.InitializeStub">
            <summary>初始化 type StubRGBLuminanceSource 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.InversionSupported">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.InversionSupportedGet">
            <summary>设置 BaseLuminanceSource.get_InversionSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.Invert">
            <summary>设置 BaseLuminanceSource.invert() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.Matrix">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.MatrixGet">
            <summary>设置 BaseLuminanceSource.get_Matrix() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.RotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.RotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.RotateSupported">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.RotateSupportedGet">
            <summary>设置 BaseLuminanceSource.get_RotateSupported() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.ToString">
            <summary>设置 LuminanceSource.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.ToString01">
            <summary>设置 LuminanceSource.ToString() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubRGBLuminanceSource.Width">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.WidthGet">
            <summary>设置 LuminanceSource.get_Width() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubRGBLuminanceSource.WidthSetInt32">
            <summary>设置 LuminanceSource.set_Width(Int32 value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>设置 BaseLuminanceSource.crop(Int32 left, Int32 top, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.getRow(System.Int32,System.Byte[])">
            <summary>设置 BaseLuminanceSource.getRow(Int32 y, Byte[] row) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.invert">
            <summary>设置 BaseLuminanceSource.invert() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.rotateCounterClockwise">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise() 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubRGBLuminanceSource.rotateCounterClockwise45">
            <summary>设置 BaseLuminanceSource.rotateCounterClockwise45() 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubReader">
            <summary>ZXing.Reader 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReader.#ctor">
            <summary>初始化 type StubReader 的新实例</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReader.DecodeBinaryBitmap">
            <summary>设置 Reader.decode(BinaryBitmap image) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReader.DecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Reader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReader.Reset">
            <summary>设置 Reader.reset() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReader.ZXing#Reader#decode(ZXing.BinaryBitmap)">
            <summary>设置 Reader.decode(BinaryBitmap image) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReader.ZXing#Reader#decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 Reader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReader.ZXing#Reader#reset">
            <summary>设置 Reader.reset() 的 存根</summary>
        </member>
        <member name="T:ZXing.Fakes.StubReaderException">
            <summary>ZXing.ReaderException 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.#ctor(System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubReaderException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubReaderException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.InitializeStub">
            <summary>初始化 type StubReaderException 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubReaderException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubReaderException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubReaderException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.Fakes.StubResultPoint">
            <summary>ZXing.ResultPoint 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubResultPoint.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.Fakes.StubResultPoint.#ctor(System.Single,System.Single)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubResultPoint.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Fakes.StubResultPoint.Equals(System.Object)">
            <summary>设置 ResultPoint.Equals(Object other) 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubResultPoint.EqualsObject">
            <summary>设置 ResultPoint.Equals(Object other) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubResultPoint.GetHashCode">
            <summary>设置 ResultPoint.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubResultPoint.GetHashCode01">
            <summary>设置 ResultPoint.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubResultPoint.InitializeStub">
            <summary>初始化 type StubResultPoint 的新实例</summary>
        </member>
        <member name="P:ZXing.Fakes.StubResultPoint.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Fakes.StubResultPoint.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Fakes.StubResultPoint.ToString">
            <summary>设置 ResultPoint.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.Fakes.StubResultPoint.ToString01">
            <summary>设置 ResultPoint.ToString() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubResultPoint.X">
            <summary>设置 ResultPoint.get_X() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubResultPoint.XGet">
            <summary>设置 ResultPoint.get_X() 的 stub</summary>
        </member>
        <member name="P:ZXing.Fakes.StubResultPoint.Y">
            <summary>设置 ResultPoint.get_Y() 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubResultPoint.YGet">
            <summary>设置 ResultPoint.get_Y() 的 stub</summary>
        </member>
        <member name="T:ZXing.Fakes.StubWriter">
            <summary>ZXing.Writer 的存根类型</summary>
        </member>
        <member name="M:ZXing.Fakes.StubWriter.#ctor">
            <summary>初始化 type StubWriter 的新实例</summary>
        </member>
        <member name="F:ZXing.Fakes.StubWriter.EncodeStringBarcodeFormatInt32Int32">
            <summary>设置 Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 stub</summary>
        </member>
        <member name="F:ZXing.Fakes.StubWriter.EncodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.Fakes.StubWriter.ZXing#Writer#encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32)">
            <summary>设置 Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 存根</summary>
        </member>
        <member name="M:ZXing.Fakes.StubWriter.ZXing#Writer#encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>设置 Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="T:ZXing.IMB.Fakes.ShimIMBReader">
            <summary>ZXing.IMB.IMBReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.IMB.Fakes.ShimIMBReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.IMB.Fakes.ShimIMBReader.#ctor(ZXing.IMB.IMBReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.IMB.Fakes.ShimIMBReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.binaryStringToDecString">
            <summary>设置 IMBReader.binaryStringToDec(String binary) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 IMBReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.doDecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 IMBReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.fillListsBitArrayBitArrayBitArrayListOfInt32RefListOfInt32RefListOfInt32RefInt32Int32">
            <summary>设置 IMBReader.fillLists(BitArray row, BitArray topRow, BitArray botRow, List`1&lt;Int32&gt;&amp; listRow, List`1&lt;Int32&gt;&amp; listTop, List`1&lt;Int32&gt;&amp; listBot, Int32 start, Int32 stop) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.getCodeWordsInt32ArrayOutStringIDictionaryOfInt32Int32IDictionaryOfInt32Int32Int32ArrayArrayCharArrayArray">
            <summary>设置 IMBReader.getCodeWords(Int32[]&amp; codeWord, String imb, IDictionary`2&lt;Int32,Int32&gt; table1Check, IDictionary`2&lt;Int32,Int32&gt; table2Check, Int32[][] barPos, Char[][] barType) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.getNumberBarsBitArrayInt32Int32Int32">
            <summary>设置 IMBReader.getNumberBars(BitArray row, Int32 start, Int32 stop, Int32 barWidth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.getTrackingNumberString">
            <summary>设置 IMBReader.getTrackingNumber(String imb) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.invertedBinaryStringString">
            <summary>设置 IMBReader.invertedBinaryString(String binary) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.isIMBBitArrayInt32RefInt32RefInt32Ref">
            <summary>设置 IMBReader.isIMB(BitArray row, Int32&amp; pixelStartOffset, Int32&amp; pixelStopOffset, Int32&amp; pixelBarLength) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.AllInstances.reset">
            <summary>设置 IMBReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.IMB.Fakes.ShimIMBReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.IMB.Fakes.ShimIMBReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.IMB.Fakes.ShimIMBReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.Constructor">
            <summary>设置 IMBReader.IMBReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.StaticConstructor">
            <summary>设置 IMBReader.IMBReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.binaryStringToDecString">
            <summary>设置 IMBReader.binaryStringToDec(String binary) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 IMBReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.doDecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 IMBReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.getNumberBarsBitArrayInt32Int32Int32">
            <summary>设置 IMBReader.getNumberBars(BitArray row, Int32 start, Int32 stop, Int32 barWidth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.getTrackingNumberString">
            <summary>设置 IMBReader.getTrackingNumber(String imb) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.invertedBinaryStringString">
            <summary>设置 IMBReader.invertedBinaryString(String binary) 的 填充码</summary>
        </member>
        <member name="P:ZXing.IMB.Fakes.ShimIMBReader.reset">
            <summary>设置 IMBReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Maxicode.Fakes.ShimMaxiCodeReader">
            <summary>ZXing.Maxicode.MaxiCodeReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.#ctor(ZXing.Maxicode.MaxiCodeReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 MaxiCodeReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MaxiCodeReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.AllInstances.reset">
            <summary>设置 MaxiCodeReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.Constructor">
            <summary>设置 MaxiCodeReader.MaxiCodeReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.StaticConstructor">
            <summary>设置 MaxiCodeReader.MaxiCodeReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.decodeBinaryBitmap">
            <summary>设置 MaxiCodeReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MaxiCodeReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.extractPureBitsBitMatrix">
            <summary>设置 MaxiCodeReader.extractPureBits(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Fakes.ShimMaxiCodeReader.reset">
            <summary>设置 MaxiCodeReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Maxicode.Internal.Fakes.ShimDecoder">
            <summary>ZXing.Maxicode.Internal.Decoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Maxicode.Internal.Fakes.ShimDecoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Maxicode.Internal.Fakes.ShimDecoder.#ctor(ZXing.Maxicode.Internal.Decoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Maxicode.Internal.Fakes.ShimDecoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.AllInstances.correctErrorsByteArrayInt32Int32Int32Int32">
            <summary>设置 Decoder.correctErrors(Byte[] codewordBytes, Int32 start, Int32 dataCodewords, Int32 ecCodewords, Int32 mode) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.AllInstances.decodeBitMatrix">
            <summary>设置 Decoder.decode(BitMatrix bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.AllInstances.decodeBitMatrixIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Decoder.decode(BitMatrix bits, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Maxicode.Internal.Fakes.ShimDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Maxicode.Internal.Fakes.ShimDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.Constructor">
            <summary>设置 Decoder.Decoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.correctErrorsByteArrayInt32Int32Int32Int32">
            <summary>设置 Decoder.correctErrors(Byte[] codewordBytes, Int32 start, Int32 dataCodewords, Int32 ecCodewords, Int32 mode) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.decodeBitMatrix">
            <summary>设置 Decoder.decode(BitMatrix bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Maxicode.Internal.Fakes.ShimDecoder.decodeBitMatrixIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Decoder.decode(BitMatrix bits, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Multi.Fakes.ShimByQuadrantReader">
            <summary>ZXing.Multi.ByQuadrantReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimByQuadrantReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimByQuadrantReader.#ctor(ZXing.Multi.ByQuadrantReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Multi.Fakes.ShimByQuadrantReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 ByQuadrantReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 ByQuadrantReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.AllInstances.reset">
            <summary>设置 ByQuadrantReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimByQuadrantReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimByQuadrantReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimByQuadrantReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.ConstructorReader">
            <summary>设置 ByQuadrantReader.ByQuadrantReader(Reader delegate) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.decodeBinaryBitmap">
            <summary>设置 ByQuadrantReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 ByQuadrantReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.makeAbsoluteResultPointArrayInt32Int32">
            <summary>设置 ByQuadrantReader.makeAbsolute(ResultPoint[] points, Int32 leftOffset, Int32 topOffset) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimByQuadrantReader.reset">
            <summary>设置 ByQuadrantReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader">
            <summary>ZXing.Multi.GenericMultipleBarcodeReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.#ctor(ZXing.Multi.GenericMultipleBarcodeReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 GenericMultipleBarcodeReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 GenericMultipleBarcodeReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.AllInstances.decodeMultipleBinaryBitmap">
            <summary>设置 GenericMultipleBarcodeReader.decodeMultiple(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.AllInstances.decodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 GenericMultipleBarcodeReader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.AllInstances.doDecodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObjectIListOfResultInt32Int32Int32">
            <summary>设置 GenericMultipleBarcodeReader.doDecodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints, IList`1&lt;Result&gt; results, Int32 xOffset, Int32 yOffset, Int32 currentDepth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.AllInstances.reset">
            <summary>设置 GenericMultipleBarcodeReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.Bind(ZXing.Multi.MultipleBarcodeReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.ConstructorReader">
            <summary>设置 GenericMultipleBarcodeReader.GenericMultipleBarcodeReader(Reader delegate) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.decodeBinaryBitmap">
            <summary>设置 GenericMultipleBarcodeReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 GenericMultipleBarcodeReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.decodeMultipleBinaryBitmap">
            <summary>设置 GenericMultipleBarcodeReader.decodeMultiple(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.decodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 GenericMultipleBarcodeReader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.doDecodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObjectIListOfResultInt32Int32Int32">
            <summary>设置 GenericMultipleBarcodeReader.doDecodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints, IList`1&lt;Result&gt; results, Int32 xOffset, Int32 yOffset, Int32 currentDepth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.reset">
            <summary>设置 GenericMultipleBarcodeReader.reset() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.Fakes.ShimGenericMultipleBarcodeReader.translateResultPointsResultInt32Int32">
            <summary>设置 GenericMultipleBarcodeReader.translateResultPoints(Result result, Int32 xOffset, Int32 yOffset) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Multi.Fakes.StubMultipleBarcodeReader">
            <summary>ZXing.Multi.MultipleBarcodeReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.StubMultipleBarcodeReader.#ctor">
            <summary>初始化 type StubMultipleBarcodeReader 的新实例</summary>
        </member>
        <member name="F:ZXing.Multi.Fakes.StubMultipleBarcodeReader.DecodeMultipleBinaryBitmap">
            <summary>设置 MultipleBarcodeReader.decodeMultiple(BinaryBitmap image) 的 stub</summary>
        </member>
        <member name="F:ZXing.Multi.Fakes.StubMultipleBarcodeReader.DecodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultipleBarcodeReader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.StubMultipleBarcodeReader.ZXing#Multi#MultipleBarcodeReader#decodeMultiple(ZXing.BinaryBitmap)">
            <summary>设置 MultipleBarcodeReader.decodeMultiple(BinaryBitmap image) 的 存根</summary>
        </member>
        <member name="M:ZXing.Multi.Fakes.StubMultipleBarcodeReader.ZXing#Multi#MultipleBarcodeReader#decodeMultiple(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 MultipleBarcodeReader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="T:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader">
            <summary>ZXing.Multi.QrCode.QRCodeMultiReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.#ctor(ZXing.Multi.QrCode.QRCodeMultiReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.AllInstances.ProcessStructuredAppendListOfResult">
            <summary>设置 QRCodeMultiReader.ProcessStructuredAppend(List`1&lt;Result&gt; results) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.AllInstances.SaSequenceSortResultResult">
            <summary>设置 QRCodeMultiReader.SaSequenceSort(Result a, Result b) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.AllInstances.decodeMultipleBinaryBitmap">
            <summary>设置 QRCodeMultiReader.decodeMultiple(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.AllInstances.decodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 QRCodeMultiReader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.Bind(ZXing.Multi.MultipleBarcodeReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.Constructor">
            <summary>设置 QRCodeMultiReader.QRCodeMultiReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.ProcessStructuredAppendListOfResult">
            <summary>设置 QRCodeMultiReader.ProcessStructuredAppend(List`1&lt;Result&gt; results) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.SaSequenceSortResultResult">
            <summary>设置 QRCodeMultiReader.SaSequenceSort(Result a, Result b) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.StaticConstructor">
            <summary>设置 QRCodeMultiReader.QRCodeMultiReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.decodeMultipleBinaryBitmap">
            <summary>设置 QRCodeMultiReader.decodeMultiple(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Fakes.ShimQRCodeMultiReader.decodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 QRCodeMultiReader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector">
            <summary>ZXing.Multi.QrCode.Internal.MultiDetector 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.#ctor(ZXing.Multi.QrCode.Internal.MultiDetector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.AllInstances.detectMultiIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiDetector.detectMulti(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.ConstructorBitMatrix">
            <summary>设置 MultiDetector.MultiDetector(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.StaticConstructor">
            <summary>设置 MultiDetector.MultiDetector() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Multi.QrCode.Internal.Fakes.ShimMultiDetector.detectMultiIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiDetector.detectMulti(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCodaBarReader">
            <summary>ZXing.OneD.CodaBarReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarReader.#ctor(ZXing.OneD.CodaBarReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCodaBarReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.AllInstances.counterAppendInt32">
            <summary>设置 CodaBarReader.counterAppend(Int32 e) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 CodaBarReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.AllInstances.findStartPattern">
            <summary>设置 CodaBarReader.findStartPattern() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.AllInstances.setCountersBitArray">
            <summary>设置 CodaBarReader.setCounters(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.AllInstances.toNarrowWidePatternInt32">
            <summary>设置 CodaBarReader.toNarrowWidePattern(Int32 position) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.AllInstances.validatePatternInt32">
            <summary>设置 CodaBarReader.validatePattern(Int32 start) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.Constructor">
            <summary>设置 CodaBarReader.CodaBarReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.StaticConstructor">
            <summary>设置 CodaBarReader.CodaBarReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.arrayContainsCharArrayChar">
            <summary>设置 CodaBarReader.arrayContains(Char[] array, Char key) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.counterAppendInt32">
            <summary>设置 CodaBarReader.counterAppend(Int32 e) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 CodaBarReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.findStartPattern">
            <summary>设置 CodaBarReader.findStartPattern() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.setCountersBitArray">
            <summary>设置 CodaBarReader.setCounters(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.toNarrowWidePatternInt32">
            <summary>设置 CodaBarReader.toNarrowWidePattern(Int32 position) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarReader.validatePatternInt32">
            <summary>设置 CodaBarReader.validatePattern(Int32 start) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCodaBarWriter">
            <summary>ZXing.OneD.CodaBarWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarWriter.#ctor(ZXing.OneD.CodaBarWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCodaBarWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarWriter.AllInstances.encodeString">
            <summary>设置 CodaBarWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCodaBarWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarWriter.Constructor">
            <summary>设置 CodaBarWriter.CodaBarWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarWriter.StaticConstructor">
            <summary>设置 CodaBarWriter.CodaBarWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCodaBarWriter.encodeString">
            <summary>设置 CodaBarWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode128EncodingOptions">
            <summary>ZXing.OneD.Code128EncodingOptions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128EncodingOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128EncodingOptions.#ctor(ZXing.OneD.Code128EncodingOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode128EncodingOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128EncodingOptions.AllInstances.ForceCodesetBGet">
            <summary>设置 Code128EncodingOptions.get_ForceCodesetB() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128EncodingOptions.AllInstances.ForceCodesetBSetBoolean">
            <summary>设置 Code128EncodingOptions.set_ForceCodesetB(Boolean value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128EncodingOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128EncodingOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128EncodingOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128EncodingOptions.Constructor">
            <summary>设置 Code128EncodingOptions.Code128EncodingOptions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128EncodingOptions.ForceCodesetBGet">
            <summary>设置 Code128EncodingOptions.get_ForceCodesetB() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128EncodingOptions.ForceCodesetBSetBoolean">
            <summary>设置 Code128EncodingOptions.set_ForceCodesetB(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode128Reader">
            <summary>ZXing.OneD.Code128Reader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Reader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Reader.#ctor(ZXing.OneD.Code128Reader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode128Reader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Reader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Code128Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Reader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Reader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Reader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Reader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Reader.Constructor">
            <summary>设置 Code128Reader.Code128Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Reader.StaticConstructor">
            <summary>设置 Code128Reader.Code128Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Reader.decodeCodeBitArrayInt32ArrayInt32Int32Out">
            <summary>设置 Code128Reader.decodeCode(BitArray row, Int32[] counters, Int32 rowOffset, Int32&amp; code) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Reader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Code128Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Reader.findStartPatternBitArray">
            <summary>设置 Code128Reader.findStartPattern(BitArray row) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode128Writer">
            <summary>ZXing.OneD.Code128Writer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Writer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Writer.#ctor(ZXing.OneD.Code128Writer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode128Writer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.AllInstances.chooseCodeStringInt32Int32">
            <summary>设置 Code128Writer.chooseCode(String value, Int32 start, Int32 oldCode) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.AllInstances.encodeString">
            <summary>设置 Code128Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Code128Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Writer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Writer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode128Writer.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.Constructor">
            <summary>设置 Code128Writer.Code128Writer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.chooseCodeStringInt32Int32">
            <summary>设置 Code128Writer.chooseCode(String value, Int32 start, Int32 oldCode) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.encodeString">
            <summary>设置 Code128Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode128Writer.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Code128Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode39Reader">
            <summary>ZXing.OneD.Code39Reader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Reader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Reader.#ctor(ZXing.OneD.Code39Reader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode39Reader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Code39Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.AlphabetGet">
            <summary>设置 Code39Reader.get_Alphabet() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Reader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Reader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Reader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.Constructor">
            <summary>设置 Code39Reader.Code39Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.ConstructorBoolean">
            <summary>设置 Code39Reader.Code39Reader(Boolean usingCheckDigit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.ConstructorBooleanBoolean">
            <summary>设置 Code39Reader.Code39Reader(Boolean usingCheckDigit, Boolean extendedMode) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.StaticConstructor">
            <summary>设置 Code39Reader.Code39Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.decodeExtendedString">
            <summary>设置 Code39Reader.decodeExtended(String encoded) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Code39Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.findAsteriskPatternBitArrayInt32Array">
            <summary>设置 Code39Reader.findAsteriskPattern(BitArray row, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.patternToCharInt32CharOut">
            <summary>设置 Code39Reader.patternToChar(Int32 pattern, Char&amp; c) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Reader.toNarrowWidePatternInt32Array">
            <summary>设置 Code39Reader.toNarrowWidePattern(Int32[] counters) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode39Writer">
            <summary>ZXing.OneD.Code39Writer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Writer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Writer.#ctor(ZXing.OneD.Code39Writer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode39Writer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Writer.AllInstances.encodeString">
            <summary>设置 Code39Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Writer.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Code39Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Writer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Writer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Writer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode39Writer.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Writer.Constructor">
            <summary>设置 Code39Writer.Code39Writer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Writer.encodeString">
            <summary>设置 Code39Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Writer.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Code39Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode39Writer.toIntArrayInt32Int32Array">
            <summary>设置 Code39Writer.toIntArray(Int32 a, Int32[] toReturn) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode93Reader">
            <summary>ZXing.OneD.Code93Reader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Reader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Reader.#ctor(ZXing.OneD.Code93Reader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode93Reader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Code93Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.AllInstances.findAsteriskPatternBitArray">
            <summary>设置 Code93Reader.findAsteriskPattern(BitArray row) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Reader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Reader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Reader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.Constructor">
            <summary>设置 Code93Reader.Code93Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.StaticConstructor">
            <summary>设置 Code93Reader.Code93Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.checkChecksumsStringBuilder">
            <summary>设置 Code93Reader.checkChecksums(StringBuilder result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.checkOneChecksumStringBuilderInt32Int32">
            <summary>设置 Code93Reader.checkOneChecksum(StringBuilder result, Int32 checkPosition, Int32 weightMax) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.decodeExtendedStringBuilder">
            <summary>设置 Code93Reader.decodeExtended(StringBuilder encoded) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Code93Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.findAsteriskPatternBitArray">
            <summary>设置 Code93Reader.findAsteriskPattern(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.patternToCharInt32CharOut">
            <summary>设置 Code93Reader.patternToChar(Int32 pattern, Char&amp; c) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Reader.toPatternInt32Array">
            <summary>设置 Code93Reader.toPattern(Int32[] counters) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode93Writer">
            <summary>ZXing.OneD.Code93Writer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Writer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Writer.#ctor(ZXing.OneD.Code93Writer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimCode93Writer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.AllInstances.encodeString">
            <summary>设置 Code93Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Code93Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Writer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Writer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimCode93Writer.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.Constructor">
            <summary>设置 Code93Writer.Code93Writer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.appendPatternBooleanArrayInt32Int32Array">
            <summary>设置 Code93Writer.appendPattern(Boolean[] target, Int32 pos, Int32[] pattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.appendPatternBooleanArrayInt32Int32ArrayBoolean">
            <summary>设置 Code93Writer.appendPattern(Boolean[] target, Int32 pos, Int32[] pattern, Boolean startColor) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.computeChecksumIndexStringInt32">
            <summary>设置 Code93Writer.computeChecksumIndex(String contents, Int32 maxWeight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.encodeString">
            <summary>设置 Code93Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Code93Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimCode93Writer.toIntArrayInt32Int32Array">
            <summary>设置 Code93Writer.toIntArray(Int32 a, Int32[] toReturn) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN13Reader">
            <summary>ZXing.OneD.EAN13Reader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Reader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Reader.#ctor(ZXing.OneD.EAN13Reader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN13Reader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.AllInstances.BarcodeFormatGet">
            <summary>设置 EAN13Reader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.AllInstances.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 EAN13Reader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder resultString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.BarcodeFormatGet">
            <summary>设置 EAN13Reader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Reader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Reader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Reader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.Constructor">
            <summary>设置 EAN13Reader.EAN13Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.StaticConstructor">
            <summary>设置 EAN13Reader.EAN13Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 EAN13Reader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder resultString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Reader.determineFirstDigitStringBuilderInt32">
            <summary>设置 EAN13Reader.determineFirstDigit(StringBuilder resultString, Int32 lgPatternFound) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN13Writer">
            <summary>ZXing.OneD.EAN13Writer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Writer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Writer.#ctor(ZXing.OneD.EAN13Writer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN13Writer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Writer.AllInstances.encodeString">
            <summary>设置 EAN13Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Writer.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 EAN13Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Writer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Writer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Writer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN13Writer.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Writer.Constructor">
            <summary>设置 EAN13Writer.EAN13Writer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Writer.encodeString">
            <summary>设置 EAN13Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN13Writer.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 EAN13Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN8Reader">
            <summary>ZXing.OneD.EAN8Reader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Reader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Reader.#ctor(ZXing.OneD.EAN8Reader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN8Reader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Reader.AllInstances.BarcodeFormatGet">
            <summary>设置 EAN8Reader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Reader.AllInstances.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 EAN8Reader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Reader.BarcodeFormatGet">
            <summary>设置 EAN8Reader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Reader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Reader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Reader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Reader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Reader.Constructor">
            <summary>设置 EAN8Reader.EAN8Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Reader.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 EAN8Reader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN8Writer">
            <summary>ZXing.OneD.EAN8Writer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Writer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Writer.#ctor(ZXing.OneD.EAN8Writer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimEAN8Writer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Writer.AllInstances.encodeString">
            <summary>设置 EAN8Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Writer.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 EAN8Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Writer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Writer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Writer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimEAN8Writer.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Writer.Constructor">
            <summary>设置 EAN8Writer.EAN8Writer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Writer.encodeString">
            <summary>设置 EAN8Writer.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimEAN8Writer.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 EAN8Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimITFReader">
            <summary>ZXing.OneD.ITFReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFReader.#ctor(ZXing.OneD.ITFReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimITFReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.AllInstances.decodeEndBitArray">
            <summary>设置 ITFReader.decodeEnd(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 ITFReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.AllInstances.decodeStartBitArray">
            <summary>设置 ITFReader.decodeStart(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.AllInstances.validateQuietZoneBitArrayInt32">
            <summary>设置 ITFReader.validateQuietZone(BitArray row, Int32 startPattern) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.Constructor">
            <summary>设置 ITFReader.ITFReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.StaticConstructor">
            <summary>设置 ITFReader.ITFReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.decodeDigitInt32ArrayInt32Out">
            <summary>设置 ITFReader.decodeDigit(Int32[] counters, Int32&amp; bestMatch) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.decodeEndBitArray">
            <summary>设置 ITFReader.decodeEnd(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.decodeMiddleBitArrayInt32Int32StringBuilder">
            <summary>设置 ITFReader.decodeMiddle(BitArray row, Int32 payloadStart, Int32 payloadEnd, StringBuilder resultString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 ITFReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.decodeStartBitArray">
            <summary>设置 ITFReader.decodeStart(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.findGuardPatternBitArrayInt32Int32Array">
            <summary>设置 ITFReader.findGuardPattern(BitArray row, Int32 rowOffset, Int32[] pattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.skipWhiteSpaceBitArray">
            <summary>设置 ITFReader.skipWhiteSpace(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFReader.validateQuietZoneBitArrayInt32">
            <summary>设置 ITFReader.validateQuietZone(BitArray row, Int32 startPattern) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimITFWriter">
            <summary>ZXing.OneD.ITFWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFWriter.#ctor(ZXing.OneD.ITFWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimITFWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFWriter.AllInstances.encodeString">
            <summary>设置 ITFWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 ITFWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimITFWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFWriter.Constructor">
            <summary>设置 ITFWriter.ITFWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFWriter.StaticConstructor">
            <summary>设置 ITFWriter.ITFWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFWriter.encodeString">
            <summary>设置 ITFWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimITFWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 ITFWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMSIReader">
            <summary>ZXing.OneD.MSIReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIReader.#ctor(ZXing.OneD.MSIReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMSIReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.AllInstances.calculateAverageCounterWidthInt32ArrayInt32">
            <summary>设置 MSIReader.calculateAverageCounterWidth(Int32[] counters, Int32 patternLength) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MSIReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.AllInstances.findEndPatternBitArrayInt32Int32Array">
            <summary>设置 MSIReader.findEndPattern(BitArray row, Int32 rowOffset, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.AllInstances.findStartPatternBitArrayInt32Array">
            <summary>设置 MSIReader.findStartPattern(BitArray row, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.AllInstances.toPatternInt32ArrayInt32">
            <summary>设置 MSIReader.toPattern(Int32[] counters, Int32 patternLength) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.CalculateChecksumLuhnString">
            <summary>设置 MSIReader.CalculateChecksumLuhn(String number) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.Constructor">
            <summary>设置 MSIReader.MSIReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.ConstructorBoolean">
            <summary>设置 MSIReader.MSIReader(Boolean usingCheckDigit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.StaticConstructor">
            <summary>设置 MSIReader.MSIReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.calculateAverageCounterWidthInt32ArrayInt32">
            <summary>设置 MSIReader.calculateAverageCounterWidth(Int32[] counters, Int32 patternLength) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MSIReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.findEndPatternBitArrayInt32Int32Array">
            <summary>设置 MSIReader.findEndPattern(BitArray row, Int32 rowOffset, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.findStartPatternBitArrayInt32Array">
            <summary>设置 MSIReader.findStartPattern(BitArray row, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.patternToCharInt32CharOut">
            <summary>设置 MSIReader.patternToChar(Int32 pattern, Char&amp; c) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIReader.toPatternInt32ArrayInt32">
            <summary>设置 MSIReader.toPattern(Int32[] counters, Int32 patternLength) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMSIWriter">
            <summary>ZXing.OneD.MSIWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIWriter.#ctor(ZXing.OneD.MSIWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMSIWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIWriter.AllInstances.encodeString">
            <summary>设置 MSIWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 MSIWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMSIWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIWriter.Constructor">
            <summary>设置 MSIWriter.MSIWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIWriter.StaticConstructor">
            <summary>设置 MSIWriter.MSIWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIWriter.encodeString">
            <summary>设置 MSIWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMSIWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 MSIWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMultiFormatOneDReader">
            <summary>ZXing.OneD.MultiFormatOneDReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.#ctor(ZXing.OneD.MultiFormatOneDReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatOneDReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.AllInstances.reset">
            <summary>设置 MultiFormatOneDReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.ConstructorIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatOneDReader.MultiFormatOneDReader(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatOneDReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatOneDReader.reset">
            <summary>设置 MultiFormatOneDReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader">
            <summary>ZXing.OneD.MultiFormatUPCEANReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.#ctor(ZXing.OneD.MultiFormatUPCEANReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatUPCEANReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.AllInstances.reset">
            <summary>设置 MultiFormatUPCEANReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.ConstructorIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatUPCEANReader.MultiFormatUPCEANReader(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 MultiFormatUPCEANReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimMultiFormatUPCEANReader.reset">
            <summary>设置 MultiFormatUPCEANReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimOneDReader">
            <summary>ZXing.OneD.OneDReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDReader.#ctor(ZXing.OneD.OneDReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimOneDReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 OneDReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.AllInstances.doDecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.AllInstances.reset">
            <summary>设置 OneDReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.Constructor">
            <summary>设置 OneDReader.OneDReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.StaticConstructor">
            <summary>设置 OneDReader.OneDReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.decodeBinaryBitmap">
            <summary>设置 OneDReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.doDecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.patternMatchVarianceInt32ArrayInt32ArrayInt32">
            <summary>设置 OneDReader.patternMatchVariance(Int32[] counters, Int32[] pattern, Int32 maxIndividualVariance) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.recordPatternBitArrayInt32Int32Array">
            <summary>设置 OneDReader.recordPattern(BitArray row, Int32 start, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.recordPatternBitArrayInt32Int32ArrayInt32">
            <summary>设置 OneDReader.recordPattern(BitArray row, Int32 start, Int32[] counters, Int32 numCounters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.recordPatternInReverseBitArrayInt32Int32Array">
            <summary>设置 OneDReader.recordPatternInReverse(BitArray row, Int32 start, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDReader.reset">
            <summary>设置 OneDReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter">
            <summary>ZXing.OneD.OneDimensionalCodeWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.#ctor(ZXing.OneD.OneDimensionalCodeWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.AllInstances.DefaultMarginGet">
            <summary>设置 OneDimensionalCodeWriter.get_DefaultMargin() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.AllInstances.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.CalculateChecksumDigitModulo10String">
            <summary>设置 OneDimensionalCodeWriter.CalculateChecksumDigitModulo10(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.Constructor">
            <summary>设置 OneDimensionalCodeWriter.OneDimensionalCodeWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.DefaultMarginGet">
            <summary>设置 OneDimensionalCodeWriter.get_DefaultMargin() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.appendPatternBooleanArrayInt32Int32ArrayBoolean">
            <summary>设置 OneDimensionalCodeWriter.appendPattern(Boolean[] target, Int32 pos, Int32[] pattern, Boolean startColor) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimOneDimensionalCodeWriter.renderResultBooleanArrayInt32Int32Int32">
            <summary>设置 OneDimensionalCodeWriter.renderResult(Boolean[] code, Int32 width, Int32 height, Int32 sidesMargin) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimPlesseyWriter">
            <summary>ZXing.OneD.PlesseyWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimPlesseyWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimPlesseyWriter.#ctor(ZXing.OneD.PlesseyWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimPlesseyWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimPlesseyWriter.AllInstances.encodeString">
            <summary>设置 PlesseyWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimPlesseyWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 PlesseyWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimPlesseyWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimPlesseyWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimPlesseyWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimPlesseyWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimPlesseyWriter.Constructor">
            <summary>设置 PlesseyWriter.PlesseyWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimPlesseyWriter.StaticConstructor">
            <summary>设置 PlesseyWriter.PlesseyWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimPlesseyWriter.encodeString">
            <summary>设置 PlesseyWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimPlesseyWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 PlesseyWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCAReader">
            <summary>ZXing.OneD.UPCAReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAReader.#ctor(ZXing.OneD.UPCAReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCAReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.AllInstances.BarcodeFormatGet">
            <summary>设置 UPCAReader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCAReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.AllInstances.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 UPCAReader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder resultString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCAReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.AllInstances.decodeRowInt32BitArrayInt32ArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCAReader.decodeRow(Int32 rowNumber, BitArray row, Int32[] startGuardRange, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.BarcodeFormatGet">
            <summary>设置 UPCAReader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.Constructor">
            <summary>设置 UPCAReader.UPCAReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCAReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 UPCAReader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder resultString) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCAReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.decodeRowInt32BitArrayInt32ArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCAReader.decodeRow(Int32 rowNumber, BitArray row, Int32[] startGuardRange, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAReader.maybeReturnResultResult">
            <summary>设置 UPCAReader.maybeReturnResult(Result result) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCAWriter">
            <summary>ZXing.OneD.UPCAWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAWriter.#ctor(ZXing.OneD.UPCAWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCAWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAWriter.AllInstances.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 UPCAWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 UPCAWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCAWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAWriter.Constructor">
            <summary>设置 UPCAWriter.UPCAWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAWriter.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 UPCAWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCAWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 UPCAWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEANReader">
            <summary>ZXing.OneD.UPCEANReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANReader.#ctor(ZXing.OneD.UPCEANReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEANReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.AllInstances.checkChecksumString">
            <summary>设置 UPCEANReader.checkChecksum(String s) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.AllInstances.decodeEndBitArrayInt32">
            <summary>设置 UPCEANReader.decodeEnd(BitArray row, Int32 endStart) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCEANReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.AllInstances.decodeRowInt32BitArrayInt32ArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCEANReader.decodeRow(Int32 rowNumber, BitArray row, Int32[] startGuardRange, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.Constructor">
            <summary>设置 UPCEANReader.UPCEANReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.StaticConstructor">
            <summary>设置 UPCEANReader.UPCEANReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.checkChecksumString">
            <summary>设置 UPCEANReader.checkChecksum(String s) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.checkStandardUPCEANChecksumString">
            <summary>设置 UPCEANReader.checkStandardUPCEANChecksum(String s) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.decodeDigitBitArrayInt32ArrayInt32Int32ArrayArrayInt32Out">
            <summary>设置 UPCEANReader.decodeDigit(BitArray row, Int32[] counters, Int32 rowOffset, Int32[][] patterns, Int32&amp; digit) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.decodeEndBitArrayInt32">
            <summary>设置 UPCEANReader.decodeEnd(BitArray row, Int32 endStart) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCEANReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.decodeRowInt32BitArrayInt32ArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 UPCEANReader.decodeRow(Int32 rowNumber, BitArray row, Int32[] startGuardRange, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.findGuardPatternBitArrayInt32BooleanInt32Array">
            <summary>设置 UPCEANReader.findGuardPattern(BitArray row, Int32 rowOffset, Boolean whiteFirst, Int32[] pattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.findGuardPatternBitArrayInt32BooleanInt32ArrayInt32Array">
            <summary>设置 UPCEANReader.findGuardPattern(BitArray row, Int32 rowOffset, Boolean whiteFirst, Int32[] pattern, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.findStartGuardPatternBitArray">
            <summary>设置 UPCEANReader.findStartGuardPattern(BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANReader.getStandardUPCEANChecksumString">
            <summary>设置 UPCEANReader.getStandardUPCEANChecksum(String s) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEANWriter">
            <summary>ZXing.OneD.UPCEANWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANWriter.#ctor(ZXing.OneD.UPCEANWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEANWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANWriter.AllInstances.DefaultMarginGet">
            <summary>设置 UPCEANWriter.get_DefaultMargin() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEANWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANWriter.Constructor">
            <summary>设置 UPCEANWriter.UPCEANWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEANWriter.DefaultMarginGet">
            <summary>设置 UPCEANWriter.get_DefaultMargin() 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEReader">
            <summary>ZXing.OneD.UPCEReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEReader.#ctor(ZXing.OneD.UPCEReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.AllInstances.BarcodeFormatGet">
            <summary>设置 UPCEReader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.AllInstances.checkChecksumString">
            <summary>设置 UPCEReader.checkChecksum(String s) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.AllInstances.decodeEndBitArrayInt32">
            <summary>设置 UPCEReader.decodeEnd(BitArray row, Int32 endStart) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.AllInstances.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 UPCEReader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.BarcodeFormatGet">
            <summary>设置 UPCEReader.get_BarcodeFormat() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.Constructor">
            <summary>设置 UPCEReader.UPCEReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.StaticConstructor">
            <summary>设置 UPCEReader.UPCEReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.checkChecksumString">
            <summary>设置 UPCEReader.checkChecksum(String s) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.convertUPCEtoUPCAString">
            <summary>设置 UPCEReader.convertUPCEtoUPCA(String upce) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.decodeEndBitArrayInt32">
            <summary>设置 UPCEReader.decodeEnd(BitArray row, Int32 endStart) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.decodeMiddleBitArrayInt32ArrayStringBuilder">
            <summary>设置 UPCEReader.decodeMiddle(BitArray row, Int32[] startRange, StringBuilder result) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEReader.determineNumSysAndCheckDigitStringBuilderInt32">
            <summary>设置 UPCEReader.determineNumSysAndCheckDigit(StringBuilder resultString, Int32 lgPatternFound) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEWriter">
            <summary>ZXing.OneD.UPCEWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEWriter.#ctor(ZXing.OneD.UPCEWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.ShimUPCEWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEWriter.AllInstances.encodeString">
            <summary>设置 UPCEWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 UPCEWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.ShimUPCEWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEWriter.Constructor">
            <summary>设置 UPCEWriter.UPCEWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEWriter.encodeString">
            <summary>设置 UPCEWriter.encode(String contents) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.ShimUPCEWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 UPCEWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.StubCode128EncodingOptions">
            <summary>ZXing.OneD.Code128EncodingOptions 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubCode128EncodingOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubCode128EncodingOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubCode128EncodingOptions.InitializeStub">
            <summary>初始化 type StubCode128EncodingOptions 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubCode128EncodingOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubCode128EncodingOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.StubCode93Writer">
            <summary>ZXing.OneD.Code93Writer 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubCode93Writer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubCode93Writer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubCode93Writer.DefaultMargin">
            <summary>设置 OneDimensionalCodeWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubCode93Writer.DefaultMarginGet">
            <summary>设置 OneDimensionalCodeWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubCode93Writer.EncodeString">
            <summary>设置 Code93Writer.encode(String contents) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubCode93Writer.EncodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 Code93Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubCode93Writer.InitializeStub">
            <summary>初始化 type StubCode93Writer 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubCode93Writer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubCode93Writer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubCode93Writer.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>设置 Code93Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubCode93Writer.encode(System.String)">
            <summary>设置 Code93Writer.encode(String contents) 的 存根</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.StubOneDReader">
            <summary>ZXing.OneD.OneDReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDReader.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubOneDReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubOneDReader.DecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubOneDReader.DecodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubOneDReader.DoDecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDReader.InitializeStub">
            <summary>初始化 type StubOneDReader 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubOneDReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubOneDReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubOneDReader.Reset">
            <summary>设置 OneDReader.reset() 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 OneDReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 OneDReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDReader.doDecode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 OneDReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDReader.reset">
            <summary>设置 OneDReader.reset() 的 存根</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter">
            <summary>ZXing.OneD.OneDimensionalCodeWriter 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.DefaultMargin">
            <summary>设置 OneDimensionalCodeWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.DefaultMarginGet">
            <summary>设置 OneDimensionalCodeWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.EncodeString">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.EncodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.InitializeStub">
            <summary>初始化 type StubOneDimensionalCodeWriter 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubOneDimensionalCodeWriter.encode(System.String)">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents) 的 存根</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.StubUPCAWriter">
            <summary>ZXing.OneD.UPCAWriter 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCAWriter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCAWriter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCAWriter.InitializeStub">
            <summary>初始化 type StubUPCAWriter 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCAWriter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCAWriter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.StubUPCEANWriter">
            <summary>ZXing.OneD.UPCEANWriter 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEANWriter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEANWriter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEANWriter.DefaultMargin">
            <summary>设置 UPCEANWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubUPCEANWriter.DefaultMarginGet">
            <summary>设置 UPCEANWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubUPCEANWriter.EncodeString">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubUPCEANWriter.EncodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEANWriter.InitializeStub">
            <summary>初始化 type StubUPCEANWriter 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEANWriter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEANWriter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEANWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEANWriter.encode(System.String)">
            <summary>设置 OneDimensionalCodeWriter.encode(String contents) 的 存根</summary>
        </member>
        <member name="T:ZXing.OneD.Fakes.StubUPCEWriter">
            <summary>ZXing.OneD.UPCEWriter 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEWriter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEWriter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEWriter.DefaultMargin">
            <summary>设置 UPCEANWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubUPCEWriter.DefaultMarginGet">
            <summary>设置 UPCEANWriter.get_DefaultMargin() 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubUPCEWriter.EncodeString">
            <summary>设置 UPCEWriter.encode(String contents) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.Fakes.StubUPCEWriter.EncodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 UPCEWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEWriter.InitializeStub">
            <summary>初始化 type StubUPCEWriter 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEWriter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.Fakes.StubUPCEWriter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEWriter.encode(System.String,ZXing.BarcodeFormat,System.Int32,System.Int32,System.Collections.Generic.IDictionary{ZXing.EncodeHintType,System.Object})">
            <summary>设置 UPCEWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.Fakes.StubUPCEWriter.encode(System.String)">
            <summary>设置 UPCEWriter.encode(String contents) 的 存根</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder">
            <summary>ZXing.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.#ctor(ZXing.OneD.RSS.Expanded.Decoders.AbstractExpandedDecoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.AllInstances.getInformation">
            <summary>设置 AbstractExpandedDecoder.getInformation() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.ConstructorBitArray">
            <summary>设置 AbstractExpandedDecoder.AbstractExpandedDecoder(BitArray information) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.createDecoderBitArray">
            <summary>设置 AbstractExpandedDecoder.createDecoder(BitArray information) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Decoders.Fakes.ShimAbstractExpandedDecoder.getInformation">
            <summary>设置 AbstractExpandedDecoder.getInformation() 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader">
            <summary>ZXing.OneD.RSS.Expanded.RSSExpandedReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.#ctor(ZXing.OneD.RSS.Expanded.RSSExpandedReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.adjustOddEvenCountsInt32">
            <summary>设置 RSSExpandedReader.adjustOddEvenCounts(Int32 numModules) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.checkChecksum">
            <summary>设置 RSSExpandedReader.checkChecksum() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.decodeDataCharacterBitArrayFinderPatternBooleanBoolean">
            <summary>设置 RSSExpandedReader.decodeDataCharacter(BitArray row, FinderPattern pattern, Boolean isOddPattern, Boolean leftChar) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.decodeRow2pairsInt32BitArray">
            <summary>设置 RSSExpandedReader.decodeRow2pairs(Int32 rowNumber, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 RSSExpandedReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.parseFoundFinderPatternBitArrayInt32Boolean">
            <summary>设置 RSSExpandedReader.parseFoundFinderPattern(BitArray row, Int32 rowNumber, Boolean oddPattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.reset">
            <summary>设置 RSSExpandedReader.reset() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.AllInstances.storeRowInt32Boolean">
            <summary>设置 RSSExpandedReader.storeRow(Int32 rowNumber, Boolean wasReversed) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.Constructor">
            <summary>设置 RSSExpandedReader.RSSExpandedReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.StaticConstructor">
            <summary>设置 RSSExpandedReader.RSSExpandedReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.adjustOddEvenCountsInt32">
            <summary>设置 RSSExpandedReader.adjustOddEvenCounts(Int32 numModules) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.checkChecksum">
            <summary>设置 RSSExpandedReader.checkChecksum() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.decodeDataCharacterBitArrayFinderPatternBooleanBoolean">
            <summary>设置 RSSExpandedReader.decodeDataCharacter(BitArray row, FinderPattern pattern, Boolean isOddPattern, Boolean leftChar) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.decodeRow2pairsInt32BitArray">
            <summary>设置 RSSExpandedReader.decodeRow2pairs(Int32 rowNumber, BitArray row) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 RSSExpandedReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.getNextSecondBarBitArrayInt32">
            <summary>设置 RSSExpandedReader.getNextSecondBar(BitArray row, Int32 initialPos) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.isNotA1leftFinderPatternBooleanBoolean">
            <summary>设置 RSSExpandedReader.isNotA1left(FinderPattern pattern, Boolean isOddPattern, Boolean leftChar) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.parseFoundFinderPatternBitArrayInt32Boolean">
            <summary>设置 RSSExpandedReader.parseFoundFinderPattern(BitArray row, Int32 rowNumber, Boolean oddPattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.reset">
            <summary>设置 RSSExpandedReader.reset() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.reverseCountersInt32Array">
            <summary>设置 RSSExpandedReader.reverseCounters(Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Expanded.Fakes.ShimRSSExpandedReader.storeRowInt32Boolean">
            <summary>设置 RSSExpandedReader.storeRow(Int32 rowNumber, Boolean wasReversed) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader">
            <summary>ZXing.OneD.RSS.AbstractRSSReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.#ctor(ZXing.OneD.RSS.AbstractRSSReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.AllInstances.getDataCharacterCounters">
            <summary>设置 AbstractRSSReader.getDataCharacterCounters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.AllInstances.getDecodeFinderCounters">
            <summary>设置 AbstractRSSReader.getDecodeFinderCounters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.AllInstances.getEvenCounts">
            <summary>设置 AbstractRSSReader.getEvenCounts() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.AllInstances.getEvenRoundingErrors">
            <summary>设置 AbstractRSSReader.getEvenRoundingErrors() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.AllInstances.getOddCounts">
            <summary>设置 AbstractRSSReader.getOddCounts() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.AllInstances.getOddRoundingErrors">
            <summary>设置 AbstractRSSReader.getOddRoundingErrors() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.Constructor">
            <summary>设置 AbstractRSSReader.AbstractRSSReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.StaticConstructor">
            <summary>设置 AbstractRSSReader.AbstractRSSReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.countInt32Array">
            <summary>设置 AbstractRSSReader.count(Int32[] array) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.decrementInt32ArraySingleArray">
            <summary>设置 AbstractRSSReader.decrement(Int32[] array, Single[] errors) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.getDataCharacterCounters">
            <summary>设置 AbstractRSSReader.getDataCharacterCounters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.getDecodeFinderCounters">
            <summary>设置 AbstractRSSReader.getDecodeFinderCounters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.getEvenCounts">
            <summary>设置 AbstractRSSReader.getEvenCounts() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.getEvenRoundingErrors">
            <summary>设置 AbstractRSSReader.getEvenRoundingErrors() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.getOddCounts">
            <summary>设置 AbstractRSSReader.getOddCounts() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.getOddRoundingErrors">
            <summary>设置 AbstractRSSReader.getOddRoundingErrors() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.incrementInt32ArraySingleArray">
            <summary>设置 AbstractRSSReader.increment(Int32[] array, Single[] errors) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.isFinderPatternInt32Array">
            <summary>设置 AbstractRSSReader.isFinderPattern(Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimAbstractRSSReader.parseFinderValueInt32ArrayInt32ArrayArrayInt32Out">
            <summary>设置 AbstractRSSReader.parseFinderValue(Int32[] counters, Int32[][] finderPatterns, Int32&amp; value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimDataCharacter">
            <summary>ZXing.OneD.RSS.DataCharacter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimDataCharacter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimDataCharacter.#ctor(ZXing.OneD.RSS.DataCharacter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances.ChecksumPortionGet">
            <summary>设置 DataCharacter.get_ChecksumPortion() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances.ChecksumPortionSetInt32">
            <summary>设置 DataCharacter.set_ChecksumPortion(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances.EqualsObject">
            <summary>设置 DataCharacter.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances.GetHashCode01">
            <summary>设置 DataCharacter.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances.ToString01">
            <summary>设置 DataCharacter.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances.ValueGet">
            <summary>设置 DataCharacter.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.AllInstances.ValueSetInt32">
            <summary>设置 DataCharacter.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimDataCharacter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimDataCharacter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.ChecksumPortionGet">
            <summary>设置 DataCharacter.get_ChecksumPortion() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.ChecksumPortionSetInt32">
            <summary>设置 DataCharacter.set_ChecksumPortion(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.ConstructorInt32Int32">
            <summary>设置 DataCharacter.DataCharacter(Int32 value, Int32 checksumPortion) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.EqualsObject">
            <summary>设置 DataCharacter.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.GetHashCode">
            <summary>设置 DataCharacter.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.ToString">
            <summary>设置 DataCharacter.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.ValueGet">
            <summary>设置 DataCharacter.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimDataCharacter.ValueSetInt32">
            <summary>设置 DataCharacter.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimFinderPattern">
            <summary>ZXing.OneD.RSS.FinderPattern 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimFinderPattern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimFinderPattern.#ctor(ZXing.OneD.RSS.FinderPattern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.EqualsObject">
            <summary>设置 FinderPattern.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.GetHashCode01">
            <summary>设置 FinderPattern.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.ResultPointsGet">
            <summary>设置 FinderPattern.get_ResultPoints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.ResultPointsSetResultPointArray">
            <summary>设置 FinderPattern.set_ResultPoints(ResultPoint[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.StartEndGet">
            <summary>设置 FinderPattern.get_StartEnd() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.StartEndSetInt32Array">
            <summary>设置 FinderPattern.set_StartEnd(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.ValueGet">
            <summary>设置 FinderPattern.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.AllInstances.ValueSetInt32">
            <summary>设置 FinderPattern.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimFinderPattern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimFinderPattern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.ConstructorInt32Int32ArrayInt32Int32Int32">
            <summary>设置 FinderPattern.FinderPattern(Int32 value, Int32[] startEnd, Int32 start, Int32 end, Int32 rowNumber) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.EqualsObject">
            <summary>设置 FinderPattern.Equals(Object o) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.GetHashCode">
            <summary>设置 FinderPattern.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.ResultPointsGet">
            <summary>设置 FinderPattern.get_ResultPoints() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.ResultPointsSetResultPointArray">
            <summary>设置 FinderPattern.set_ResultPoints(ResultPoint[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.StartEndGet">
            <summary>设置 FinderPattern.get_StartEnd() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.StartEndSetInt32Array">
            <summary>设置 FinderPattern.set_StartEnd(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.ValueGet">
            <summary>设置 FinderPattern.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimFinderPattern.ValueSetInt32">
            <summary>设置 FinderPattern.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimRSS14Reader">
            <summary>ZXing.OneD.RSS.RSS14Reader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.#ctor(ZXing.OneD.RSS.RSS14Reader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.AllInstances.adjustOddEvenCountsBooleanInt32">
            <summary>设置 RSS14Reader.adjustOddEvenCounts(Boolean outsideChar, Int32 numModules) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.AllInstances.decodeDataCharacterBitArrayFinderPatternBoolean">
            <summary>设置 RSS14Reader.decodeDataCharacter(BitArray row, FinderPattern pattern, Boolean outsideChar) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.AllInstances.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 RSS14Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.AllInstances.findFinderPatternBitArrayBoolean">
            <summary>设置 RSS14Reader.findFinderPattern(BitArray row, Boolean rightFinderPattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.AllInstances.parseFoundFinderPatternBitArrayInt32BooleanInt32Array">
            <summary>设置 RSS14Reader.parseFoundFinderPattern(BitArray row, Int32 rowNumber, Boolean right, Int32[] startEnd) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.AllInstances.reset">
            <summary>设置 RSS14Reader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.Constructor">
            <summary>设置 RSS14Reader.RSS14Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.StaticConstructor">
            <summary>设置 RSS14Reader.RSS14Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.adjustOddEvenCountsBooleanInt32">
            <summary>设置 RSS14Reader.adjustOddEvenCounts(Boolean outsideChar, Int32 numModules) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.decodeDataCharacterBitArrayFinderPatternBoolean">
            <summary>设置 RSS14Reader.decodeDataCharacter(BitArray row, FinderPattern pattern, Boolean outsideChar) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.decodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 RSS14Reader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.findFinderPatternBitArrayBoolean">
            <summary>设置 RSS14Reader.findFinderPattern(BitArray row, Boolean rightFinderPattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.parseFoundFinderPatternBitArrayInt32BooleanInt32Array">
            <summary>设置 RSS14Reader.parseFoundFinderPattern(BitArray row, Int32 rowNumber, Boolean right, Int32[] startEnd) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSS14Reader.reset">
            <summary>设置 RSS14Reader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.ShimRSSUtils">
            <summary>ZXing.OneD.RSS.RSSUtils 的填充码类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSSUtils.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSSUtils.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.ShimRSSUtils.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSSUtils.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSSUtils.combinsInt32Int32">
            <summary>设置 RSSUtils.combins(Int32 n, Int32 r) 的 填充码</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.ShimRSSUtils.getRSSvalueInt32ArrayInt32Boolean">
            <summary>设置 RSSUtils.getRSSvalue(Int32[] widths, Int32 maxWidth, Boolean noNarrow) 的 填充码</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader">
            <summary>ZXing.OneD.RSS.AbstractRSSReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.DecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.DecodeRowInt32BitArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="F:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.DoDecodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 OneDReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.InitializeStub">
            <summary>初始化 type StubAbstractRSSReader 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.Reset">
            <summary>设置 OneDReader.reset() 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.decode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 OneDReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.decodeRow(System.Int32,ZXing.Common.BitArray,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 OneDReader.decodeRow(Int32 rowNumber, BitArray row, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.doDecode(ZXing.BinaryBitmap,System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 OneDReader.doDecode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubAbstractRSSReader.reset">
            <summary>设置 OneDReader.reset() 的 存根</summary>
        </member>
        <member name="T:ZXing.OneD.RSS.Fakes.StubDataCharacter">
            <summary>ZXing.OneD.RSS.DataCharacter 的存根类型</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubDataCharacter.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.StubDataCharacter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubDataCharacter.Equals(System.Object)">
            <summary>设置 DataCharacter.Equals(Object o) 的 存根</summary>
        </member>
        <member name="F:ZXing.OneD.RSS.Fakes.StubDataCharacter.EqualsObject">
            <summary>设置 DataCharacter.Equals(Object o) 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubDataCharacter.GetHashCode">
            <summary>设置 DataCharacter.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:ZXing.OneD.RSS.Fakes.StubDataCharacter.GetHashCode01">
            <summary>设置 DataCharacter.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubDataCharacter.InitializeStub">
            <summary>初始化 type StubDataCharacter 的新实例</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.StubDataCharacter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.OneD.RSS.Fakes.StubDataCharacter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.OneD.RSS.Fakes.StubDataCharacter.ToString">
            <summary>设置 DataCharacter.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.OneD.RSS.Fakes.StubDataCharacter.ToString01">
            <summary>设置 DataCharacter.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions">
            <summary>ZXing.PDF417.PDF417EncodingOptions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.#ctor(ZXing.PDF417.PDF417EncodingOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.CharacterSetGet">
            <summary>设置 PDF417EncodingOptions.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.CharacterSetSetString">
            <summary>设置 PDF417EncodingOptions.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.CompactGet">
            <summary>设置 PDF417EncodingOptions.get_Compact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.CompactSetBoolean">
            <summary>设置 PDF417EncodingOptions.set_Compact(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.CompactionGet">
            <summary>设置 PDF417EncodingOptions.get_Compaction() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.CompactionSetCompaction">
            <summary>设置 PDF417EncodingOptions.set_Compaction(Compaction value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.DimensionsGet">
            <summary>设置 PDF417EncodingOptions.get_Dimensions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.DimensionsSetDimensions">
            <summary>设置 PDF417EncodingOptions.set_Dimensions(Dimensions value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.DisableECIGet">
            <summary>设置 PDF417EncodingOptions.get_DisableECI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.DisableECISetBoolean">
            <summary>设置 PDF417EncodingOptions.set_DisableECI(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.ErrorCorrectionGet">
            <summary>设置 PDF417EncodingOptions.get_ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.AllInstances.ErrorCorrectionSetPDF417ErrorCorrectionLevel">
            <summary>设置 PDF417EncodingOptions.set_ErrorCorrection(PDF417ErrorCorrectionLevel value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.CharacterSetGet">
            <summary>设置 PDF417EncodingOptions.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.CharacterSetSetString">
            <summary>设置 PDF417EncodingOptions.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.CompactGet">
            <summary>设置 PDF417EncodingOptions.get_Compact() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.CompactSetBoolean">
            <summary>设置 PDF417EncodingOptions.set_Compact(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.CompactionGet">
            <summary>设置 PDF417EncodingOptions.get_Compaction() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.CompactionSetCompaction">
            <summary>设置 PDF417EncodingOptions.set_Compaction(Compaction value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.Constructor">
            <summary>设置 PDF417EncodingOptions.PDF417EncodingOptions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.DimensionsGet">
            <summary>设置 PDF417EncodingOptions.get_Dimensions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.DimensionsSetDimensions">
            <summary>设置 PDF417EncodingOptions.set_Dimensions(Dimensions value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.DisableECIGet">
            <summary>设置 PDF417EncodingOptions.get_DisableECI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.DisableECISetBoolean">
            <summary>设置 PDF417EncodingOptions.set_DisableECI(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.ErrorCorrectionGet">
            <summary>设置 PDF417EncodingOptions.get_ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417EncodingOptions.ErrorCorrectionSetPDF417ErrorCorrectionLevel">
            <summary>设置 PDF417EncodingOptions.set_ErrorCorrection(PDF417ErrorCorrectionLevel value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417Reader">
            <summary>ZXing.PDF417.PDF417Reader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Reader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Reader.#ctor(ZXing.PDF417.PDF417Reader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417Reader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.AllInstances.decodeBinaryBitmap">
            <summary>设置 PDF417Reader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 PDF417Reader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.AllInstances.decodeMultipleBinaryBitmap">
            <summary>设置 PDF417Reader.decodeMultiple(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.AllInstances.decodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 PDF417Reader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.AllInstances.reset">
            <summary>设置 PDF417Reader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Reader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Reader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Reader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Reader.Bind(ZXing.Multi.MultipleBarcodeReader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.Constructor">
            <summary>设置 PDF417Reader.PDF417Reader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.decodeBinaryBitmap">
            <summary>设置 PDF417Reader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 PDF417Reader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObjectBoolean">
            <summary>设置 PDF417Reader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints, Boolean multiple) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.decodeMultipleBinaryBitmap">
            <summary>设置 PDF417Reader.decodeMultiple(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.decodeMultipleBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 PDF417Reader.decodeMultiple(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.getMaxCodewordWidthResultPointArray">
            <summary>设置 PDF417Reader.getMaxCodewordWidth(ResultPoint[] p) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.getMaxWidthResultPointResultPoint">
            <summary>设置 PDF417Reader.getMaxWidth(ResultPoint p1, ResultPoint p2) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.getMinCodewordWidthResultPointArray">
            <summary>设置 PDF417Reader.getMinCodewordWidth(ResultPoint[] p) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.getMinWidthResultPointResultPoint">
            <summary>设置 PDF417Reader.getMinWidth(ResultPoint p1, ResultPoint p2) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Reader.reset">
            <summary>设置 PDF417Reader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata">
            <summary>ZXing.PDF417.PDF417ResultMetadata 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.#ctor(ZXing.PDF417.PDF417ResultMetadata)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.FileIdGet">
            <summary>设置 PDF417ResultMetadata.get_FileId() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.FileIdSetString">
            <summary>设置 PDF417ResultMetadata.set_FileId(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.IsLastSegmentGet">
            <summary>设置 PDF417ResultMetadata.get_IsLastSegment() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.IsLastSegmentSetBoolean">
            <summary>设置 PDF417ResultMetadata.set_IsLastSegment(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.OptionalDataGet">
            <summary>设置 PDF417ResultMetadata.get_OptionalData() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.OptionalDataSetInt32Array">
            <summary>设置 PDF417ResultMetadata.set_OptionalData(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.SegmentIndexGet">
            <summary>设置 PDF417ResultMetadata.get_SegmentIndex() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.AllInstances.SegmentIndexSetInt32">
            <summary>设置 PDF417ResultMetadata.set_SegmentIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.Constructor">
            <summary>设置 PDF417ResultMetadata.PDF417ResultMetadata() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.FileIdGet">
            <summary>设置 PDF417ResultMetadata.get_FileId() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.FileIdSetString">
            <summary>设置 PDF417ResultMetadata.set_FileId(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.IsLastSegmentGet">
            <summary>设置 PDF417ResultMetadata.get_IsLastSegment() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.IsLastSegmentSetBoolean">
            <summary>设置 PDF417ResultMetadata.set_IsLastSegment(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.OptionalDataGet">
            <summary>设置 PDF417ResultMetadata.get_OptionalData() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.OptionalDataSetInt32Array">
            <summary>设置 PDF417ResultMetadata.set_OptionalData(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.SegmentIndexGet">
            <summary>设置 PDF417ResultMetadata.get_SegmentIndex() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417ResultMetadata.SegmentIndexSetInt32">
            <summary>设置 PDF417ResultMetadata.set_SegmentIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417Writer">
            <summary>ZXing.PDF417.PDF417Writer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Writer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Writer.#ctor(ZXing.PDF417.PDF417Writer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.ShimPDF417Writer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.AllInstances.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 PDF417Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 PDF417Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Writer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Writer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.ShimPDF417Writer.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.Constructor">
            <summary>设置 PDF417Writer.PDF417Writer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.bitMatrixFromBitArraySByteArrayArrayInt32">
            <summary>设置 PDF417Writer.bitMatrixFromBitArray(SByte[][] input, Int32 margin) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 PDF417Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 PDF417Writer.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.ShimPDF417Writer.rotateArraySByteArrayArray">
            <summary>设置 PDF417Writer.rotateArray(SByte[][] bitarray) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Fakes.StubPDF417EncodingOptions">
            <summary>ZXing.PDF417.PDF417EncodingOptions 的存根类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.StubPDF417EncodingOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.StubPDF417EncodingOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Fakes.StubPDF417EncodingOptions.InitializeStub">
            <summary>初始化 type StubPDF417EncodingOptions 的新实例</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.StubPDF417EncodingOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.PDF417.Fakes.StubPDF417EncodingOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection">
            <summary>ZXing.PDF417.Internal.EC.ErrorCorrection 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.#ctor(ZXing.PDF417.Internal.EC.ErrorCorrection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.AllInstances.decodeInt32ArrayInt32Int32ArrayInt32Out">
            <summary>设置 ErrorCorrection.decode(Int32[] received, Int32 numECCodewords, Int32[] erasures, Int32&amp; errorLocationsCount) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.Constructor">
            <summary>设置 ErrorCorrection.ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.EC.Fakes.ShimErrorCorrection.decodeInt32ArrayInt32Int32ArrayInt32Out">
            <summary>设置 ErrorCorrection.decode(Int32[] received, Int32 numECCodewords, Int32[] erasures, Int32&amp; errorLocationsCount) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata">
            <summary>ZXing.PDF417.Internal.BarcodeMetadata 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.#ctor(ZXing.PDF417.Internal.BarcodeMetadata)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.ColumnCountGet">
            <summary>设置 BarcodeMetadata.get_ColumnCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.ColumnCountSetInt32">
            <summary>设置 BarcodeMetadata.set_ColumnCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.ErrorCorrectionLevelGet">
            <summary>设置 BarcodeMetadata.get_ErrorCorrectionLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.ErrorCorrectionLevelSetInt32">
            <summary>设置 BarcodeMetadata.set_ErrorCorrectionLevel(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.RowCountGet">
            <summary>设置 BarcodeMetadata.get_RowCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.RowCountLowerGet">
            <summary>设置 BarcodeMetadata.get_RowCountLower() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.RowCountLowerSetInt32">
            <summary>设置 BarcodeMetadata.set_RowCountLower(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.RowCountSetInt32">
            <summary>设置 BarcodeMetadata.set_RowCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.RowCountUpperGet">
            <summary>设置 BarcodeMetadata.get_RowCountUpper() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.AllInstances.RowCountUpperSetInt32">
            <summary>设置 BarcodeMetadata.set_RowCountUpper(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.ColumnCountGet">
            <summary>设置 BarcodeMetadata.get_ColumnCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.ColumnCountSetInt32">
            <summary>设置 BarcodeMetadata.set_ColumnCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.ConstructorInt32Int32Int32Int32">
            <summary>设置 BarcodeMetadata.BarcodeMetadata(Int32 columnCount, Int32 rowCountUpperPart, Int32 rowCountLowerPart, Int32 errorCorrectionLevel) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.ErrorCorrectionLevelGet">
            <summary>设置 BarcodeMetadata.get_ErrorCorrectionLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.ErrorCorrectionLevelSetInt32">
            <summary>设置 BarcodeMetadata.set_ErrorCorrectionLevel(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.RowCountGet">
            <summary>设置 BarcodeMetadata.get_RowCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.RowCountLowerGet">
            <summary>设置 BarcodeMetadata.get_RowCountLower() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.RowCountLowerSetInt32">
            <summary>设置 BarcodeMetadata.set_RowCountLower(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.RowCountSetInt32">
            <summary>设置 BarcodeMetadata.set_RowCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.RowCountUpperGet">
            <summary>设置 BarcodeMetadata.get_RowCountUpper() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeMetadata.RowCountUpperSetInt32">
            <summary>设置 BarcodeMetadata.set_RowCountUpper(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue">
            <summary>ZXing.PDF417.Internal.BarcodeValue 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.#ctor(ZXing.PDF417.Internal.BarcodeValue)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.AllInstances.getConfidenceInt32">
            <summary>设置 BarcodeValue.getConfidence(Int32 barcodeValue) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.AllInstances.getValue">
            <summary>设置 BarcodeValue.getValue() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.AllInstances.setValueInt32">
            <summary>设置 BarcodeValue.setValue(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.Constructor">
            <summary>设置 BarcodeValue.BarcodeValue() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.getConfidenceInt32">
            <summary>设置 BarcodeValue.getConfidence(Int32 barcodeValue) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.getValue">
            <summary>设置 BarcodeValue.getValue() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBarcodeValue.setValueInt32">
            <summary>设置 BarcodeValue.setValue(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimBoundingBox">
            <summary>ZXing.PDF417.Internal.BoundingBox 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.#ctor(ZXing.PDF417.Internal.BoundingBox)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.BottomLeftGet">
            <summary>设置 BoundingBox.get_BottomLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.BottomLeftSetResultPoint">
            <summary>设置 BoundingBox.set_BottomLeft(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.BottomRightGet">
            <summary>设置 BoundingBox.get_BottomRight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.BottomRightSetResultPoint">
            <summary>设置 BoundingBox.set_BottomRight(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MaxXGet">
            <summary>设置 BoundingBox.get_MaxX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MaxXSetInt32">
            <summary>设置 BoundingBox.set_MaxX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MaxYGet">
            <summary>设置 BoundingBox.get_MaxY() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MaxYSetInt32">
            <summary>设置 BoundingBox.set_MaxY(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MinXGet">
            <summary>设置 BoundingBox.get_MinX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MinXSetInt32">
            <summary>设置 BoundingBox.set_MinX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MinYGet">
            <summary>设置 BoundingBox.get_MinY() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.MinYSetInt32">
            <summary>设置 BoundingBox.set_MinY(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.SetBottomRightResultPoint">
            <summary>设置 BoundingBox.SetBottomRight(ResultPoint bottomRight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.TopLeftGet">
            <summary>设置 BoundingBox.get_TopLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.TopLeftSetResultPoint">
            <summary>设置 BoundingBox.set_TopLeft(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.TopRightGet">
            <summary>设置 BoundingBox.get_TopRight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.TopRightSetResultPoint">
            <summary>设置 BoundingBox.set_TopRight(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.addMissingRowsInt32Int32Boolean">
            <summary>设置 BoundingBox.addMissingRows(Int32 missingStartRows, Int32 missingEndRows, Boolean isLeft) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.AllInstances.calculateMinMaxValues">
            <summary>设置 BoundingBox.calculateMinMaxValues() 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.BottomLeftGet">
            <summary>设置 BoundingBox.get_BottomLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.BottomLeftSetResultPoint">
            <summary>设置 BoundingBox.set_BottomLeft(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.BottomRightGet">
            <summary>设置 BoundingBox.get_BottomRight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.BottomRightSetResultPoint">
            <summary>设置 BoundingBox.set_BottomRight(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.ConstructorBitMatrixResultPointResultPointResultPointResultPoint">
            <summary>设置 BoundingBox.BoundingBox(BitMatrix image, ResultPoint topLeft, ResultPoint bottomLeft, ResultPoint topRight, ResultPoint bottomRight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.CreateBitMatrixResultPointResultPointResultPointResultPoint">
            <summary>设置 BoundingBox.Create(BitMatrix image, ResultPoint topLeft, ResultPoint bottomLeft, ResultPoint topRight, ResultPoint bottomRight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.CreateBoundingBox">
            <summary>设置 BoundingBox.Create(BoundingBox box) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MaxXGet">
            <summary>设置 BoundingBox.get_MaxX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MaxXSetInt32">
            <summary>设置 BoundingBox.set_MaxX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MaxYGet">
            <summary>设置 BoundingBox.get_MaxY() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MaxYSetInt32">
            <summary>设置 BoundingBox.set_MaxY(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MinXGet">
            <summary>设置 BoundingBox.get_MinX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MinXSetInt32">
            <summary>设置 BoundingBox.set_MinX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MinYGet">
            <summary>设置 BoundingBox.get_MinY() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.MinYSetInt32">
            <summary>设置 BoundingBox.set_MinY(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.SetBottomRightResultPoint">
            <summary>设置 BoundingBox.SetBottomRight(ResultPoint bottomRight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.TopLeftGet">
            <summary>设置 BoundingBox.get_TopLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.TopLeftSetResultPoint">
            <summary>设置 BoundingBox.set_TopLeft(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.TopRightGet">
            <summary>设置 BoundingBox.get_TopRight() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.TopRightSetResultPoint">
            <summary>设置 BoundingBox.set_TopRight(ResultPoint value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.addMissingRowsInt32Int32Boolean">
            <summary>设置 BoundingBox.addMissingRows(Int32 missingStartRows, Int32 missingEndRows, Boolean isLeft) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.calculateMinMaxValues">
            <summary>设置 BoundingBox.calculateMinMaxValues() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimBoundingBox.mergeBoundingBoxBoundingBox">
            <summary>设置 BoundingBox.merge(BoundingBox leftBox, BoundingBox rightBox) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimCodeword">
            <summary>ZXing.PDF417.Internal.Codeword 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimCodeword.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimCodeword.#ctor(ZXing.PDF417.Internal.Codeword)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.BucketGet">
            <summary>设置 Codeword.get_Bucket() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.BucketSetInt32">
            <summary>设置 Codeword.set_Bucket(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.EndXGet">
            <summary>设置 Codeword.get_EndX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.EndXSetInt32">
            <summary>设置 Codeword.set_EndX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.HasValidRowNumberGet">
            <summary>设置 Codeword.get_HasValidRowNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.IsValidRowNumberInt32">
            <summary>设置 Codeword.IsValidRowNumber(Int32 rowNumber) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.RowNumberGet">
            <summary>设置 Codeword.get_RowNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.RowNumberSetInt32">
            <summary>设置 Codeword.set_RowNumber(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.StartXGet">
            <summary>设置 Codeword.get_StartX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.StartXSetInt32">
            <summary>设置 Codeword.set_StartX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.ToString01">
            <summary>设置 Codeword.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.ValueGet">
            <summary>设置 Codeword.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.ValueSetInt32">
            <summary>设置 Codeword.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.WidthGet">
            <summary>设置 Codeword.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.AllInstances.setRowNumberAsRowIndicatorColumn">
            <summary>设置 Codeword.setRowNumberAsRowIndicatorColumn() 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimCodeword.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimCodeword.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.BucketGet">
            <summary>设置 Codeword.get_Bucket() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.BucketSetInt32">
            <summary>设置 Codeword.set_Bucket(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.ConstructorInt32Int32Int32Int32">
            <summary>设置 Codeword.Codeword(Int32 startX, Int32 endX, Int32 bucket, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.EndXGet">
            <summary>设置 Codeword.get_EndX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.EndXSetInt32">
            <summary>设置 Codeword.set_EndX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.HasValidRowNumberGet">
            <summary>设置 Codeword.get_HasValidRowNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.IsValidRowNumberInt32">
            <summary>设置 Codeword.IsValidRowNumber(Int32 rowNumber) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.RowNumberGet">
            <summary>设置 Codeword.get_RowNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.RowNumberSetInt32">
            <summary>设置 Codeword.set_RowNumber(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.StartXGet">
            <summary>设置 Codeword.get_StartX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.StartXSetInt32">
            <summary>设置 Codeword.set_StartX(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.StaticConstructor">
            <summary>设置 Codeword.Codeword() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.ToString">
            <summary>设置 Codeword.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.ValueGet">
            <summary>设置 Codeword.get_Value() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.ValueSetInt32">
            <summary>设置 Codeword.set_Value(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.WidthGet">
            <summary>设置 Codeword.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimCodeword.setRowNumberAsRowIndicatorColumn">
            <summary>设置 Codeword.setRowNumberAsRowIndicatorColumn() 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetectionResult">
            <summary>ZXing.PDF417.Internal.DetectionResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.#ctor(ZXing.PDF417.Internal.DetectionResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.BoxGet">
            <summary>设置 DetectionResult.get_Box() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.BoxSetBoundingBox">
            <summary>设置 DetectionResult.set_Box(BoundingBox value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.ColumnCountGet">
            <summary>设置 DetectionResult.get_ColumnCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.ColumnCountSetInt32">
            <summary>设置 DetectionResult.set_ColumnCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.DetectionResultColumnsGet">
            <summary>设置 DetectionResult.get_DetectionResultColumns() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.DetectionResultColumnsSetDetectionResultColumnArray">
            <summary>设置 DetectionResult.set_DetectionResultColumns(DetectionResultColumn[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.ErrorCorrectionLevelGet">
            <summary>设置 DetectionResult.get_ErrorCorrectionLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.MetadataGet">
            <summary>设置 DetectionResult.get_Metadata() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.MetadataSetBarcodeMetadata">
            <summary>设置 DetectionResult.set_Metadata(BarcodeMetadata value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.RowCountGet">
            <summary>设置 DetectionResult.get_RowCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.ToString01">
            <summary>设置 DetectionResult.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.adjustIndicatorColumnRowNumbersDetectionResultColumn">
            <summary>设置 DetectionResult.adjustIndicatorColumnRowNumbers(DetectionResultColumn detectionResultColumn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.adjustRowNumbers">
            <summary>设置 DetectionResult.adjustRowNumbers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.adjustRowNumbersByRow">
            <summary>设置 DetectionResult.adjustRowNumbersByRow() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.adjustRowNumbersFromBothRI">
            <summary>设置 DetectionResult.adjustRowNumbersFromBothRI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.adjustRowNumbersFromLRI">
            <summary>设置 DetectionResult.adjustRowNumbersFromLRI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.adjustRowNumbersFromRRI">
            <summary>设置 DetectionResult.adjustRowNumbersFromRRI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.adjustRowNumbersInt32Int32CodewordArray">
            <summary>设置 DetectionResult.adjustRowNumbers(Int32 barcodeColumn, Int32 codewordsRow, Codeword[] codewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.AllInstances.getDetectionResultColumns">
            <summary>设置 DetectionResult.getDetectionResultColumns() 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.BoxGet">
            <summary>设置 DetectionResult.get_Box() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.BoxSetBoundingBox">
            <summary>设置 DetectionResult.set_Box(BoundingBox value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.ColumnCountGet">
            <summary>设置 DetectionResult.get_ColumnCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.ColumnCountSetInt32">
            <summary>设置 DetectionResult.set_ColumnCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.ConstructorBarcodeMetadataBoundingBox">
            <summary>设置 DetectionResult.DetectionResult(BarcodeMetadata metadata, BoundingBox box) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.DetectionResultColumnsGet">
            <summary>设置 DetectionResult.get_DetectionResultColumns() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.DetectionResultColumnsSetDetectionResultColumnArray">
            <summary>设置 DetectionResult.set_DetectionResultColumns(DetectionResultColumn[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.ErrorCorrectionLevelGet">
            <summary>设置 DetectionResult.get_ErrorCorrectionLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.MetadataGet">
            <summary>设置 DetectionResult.get_Metadata() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.MetadataSetBarcodeMetadata">
            <summary>设置 DetectionResult.set_Metadata(BarcodeMetadata value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.RowCountGet">
            <summary>设置 DetectionResult.get_RowCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.ToString">
            <summary>设置 DetectionResult.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustIndicatorColumnRowNumbersDetectionResultColumn">
            <summary>设置 DetectionResult.adjustIndicatorColumnRowNumbers(DetectionResultColumn detectionResultColumn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumberCodewordCodeword">
            <summary>设置 DetectionResult.adjustRowNumber(Codeword codeword, Codeword otherCodeword) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumberIfValidInt32Int32Codeword">
            <summary>设置 DetectionResult.adjustRowNumberIfValid(Int32 rowIndicatorRowNumber, Int32 invalidRowCounts, Codeword codeword) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumbers">
            <summary>设置 DetectionResult.adjustRowNumbers() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumbersByRow">
            <summary>设置 DetectionResult.adjustRowNumbersByRow() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumbersFromBothRI">
            <summary>设置 DetectionResult.adjustRowNumbersFromBothRI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumbersFromLRI">
            <summary>设置 DetectionResult.adjustRowNumbersFromLRI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumbersFromRRI">
            <summary>设置 DetectionResult.adjustRowNumbersFromRRI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.adjustRowNumbersInt32Int32CodewordArray">
            <summary>设置 DetectionResult.adjustRowNumbers(Int32 barcodeColumn, Int32 codewordsRow, Codeword[] codewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResult.getDetectionResultColumns">
            <summary>设置 DetectionResult.getDetectionResultColumns() 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn">
            <summary>ZXing.PDF417.Internal.DetectionResultColumn 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.#ctor(ZXing.PDF417.Internal.DetectionResultColumn)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.BoxGet">
            <summary>设置 DetectionResultColumn.get_Box() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.BoxSetBoundingBox">
            <summary>设置 DetectionResultColumn.set_Box(BoundingBox value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.CodewordsGet">
            <summary>设置 DetectionResultColumn.get_Codewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.CodewordsSetCodewordArray">
            <summary>设置 DetectionResultColumn.set_Codewords(Codeword[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.IndexForRowInt32">
            <summary>设置 DetectionResultColumn.IndexForRow(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.RowForIndexInt32">
            <summary>设置 DetectionResultColumn.RowForIndex(Int32 codewordIndex) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.ToString01">
            <summary>设置 DetectionResultColumn.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.getCodewordInt32">
            <summary>设置 DetectionResultColumn.getCodeword(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.getCodewordNearbyInt32">
            <summary>设置 DetectionResultColumn.getCodewordNearby(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.imageRowToCodewordIndexInt32">
            <summary>设置 DetectionResultColumn.imageRowToCodewordIndex(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.AllInstances.setCodewordInt32Codeword">
            <summary>设置 DetectionResultColumn.setCodeword(Int32 imageRow, Codeword codeword) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.BoxGet">
            <summary>设置 DetectionResultColumn.get_Box() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.BoxSetBoundingBox">
            <summary>设置 DetectionResultColumn.set_Box(BoundingBox value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.CodewordsGet">
            <summary>设置 DetectionResultColumn.get_Codewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.CodewordsSetCodewordArray">
            <summary>设置 DetectionResultColumn.set_Codewords(Codeword[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.ConstructorBoundingBox">
            <summary>设置 DetectionResultColumn.DetectionResultColumn(BoundingBox box) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.IndexForRowInt32">
            <summary>设置 DetectionResultColumn.IndexForRow(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.RowForIndexInt32">
            <summary>设置 DetectionResultColumn.RowForIndex(Int32 codewordIndex) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.ToString">
            <summary>设置 DetectionResultColumn.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.getCodewordInt32">
            <summary>设置 DetectionResultColumn.getCodeword(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.getCodewordNearbyInt32">
            <summary>设置 DetectionResultColumn.getCodewordNearby(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.imageRowToCodewordIndexInt32">
            <summary>设置 DetectionResultColumn.imageRowToCodewordIndex(Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultColumn.setCodewordInt32Codeword">
            <summary>设置 DetectionResultColumn.setCodeword(Int32 imageRow, Codeword codeword) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn">
            <summary>ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.#ctor(ZXing.PDF417.Internal.DetectionResultRowIndicatorColumn)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.IsLeftGet">
            <summary>设置 DetectionResultRowIndicatorColumn.get_IsLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.IsLeftSetBoolean">
            <summary>设置 DetectionResultRowIndicatorColumn.set_IsLeft(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.ToString01">
            <summary>设置 DetectionResultRowIndicatorColumn.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.adjustCompleteIndicatorColumnRowNumbersBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.adjustCompleteIndicatorColumnRowNumbers(BarcodeMetadata metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.adjustIncompleteIndicatorColumnRowNumbersBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.adjustIncompleteIndicatorColumnRowNumbers(BarcodeMetadata metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.getBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.getBarcodeMetadata() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.getRowHeights">
            <summary>设置 DetectionResultRowIndicatorColumn.getRowHeights() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.removeIncorrectCodewordsCodewordArrayBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.removeIncorrectCodewords(Codeword[] codewords, BarcodeMetadata metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.AllInstances.setRowNumbers">
            <summary>设置 DetectionResultRowIndicatorColumn.setRowNumbers() 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.ConstructorBoundingBoxBoolean">
            <summary>设置 DetectionResultRowIndicatorColumn.DetectionResultRowIndicatorColumn(BoundingBox box, Boolean isLeft) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.IsLeftGet">
            <summary>设置 DetectionResultRowIndicatorColumn.get_IsLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.IsLeftSetBoolean">
            <summary>设置 DetectionResultRowIndicatorColumn.set_IsLeft(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.ToString">
            <summary>设置 DetectionResultRowIndicatorColumn.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.adjustCompleteIndicatorColumnRowNumbersBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.adjustCompleteIndicatorColumnRowNumbers(BarcodeMetadata metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.adjustIncompleteIndicatorColumnRowNumbersBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.adjustIncompleteIndicatorColumnRowNumbers(BarcodeMetadata metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.getBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.getBarcodeMetadata() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.getRowHeights">
            <summary>设置 DetectionResultRowIndicatorColumn.getRowHeights() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.removeIncorrectCodewordsCodewordArrayBarcodeMetadata">
            <summary>设置 DetectionResultRowIndicatorColumn.removeIncorrectCodewords(Codeword[] codewords, BarcodeMetadata metadata) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetectionResultRowIndicatorColumn.setRowNumbers">
            <summary>设置 DetectionResultRowIndicatorColumn.setRowNumbers() 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetector">
            <summary>ZXing.PDF417.Internal.Detector 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetector.#ctor(ZXing.PDF417.Internal.Detector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDetector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDetector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.Constructor">
            <summary>设置 Detector.Detector() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.StaticConstructor">
            <summary>设置 Detector.Detector() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.copyToResultResultPointArrayResultPointArrayInt32Array">
            <summary>设置 Detector.copyToResult(ResultPoint[] result, ResultPoint[] tmpResult, Int32[] destinationIndexes) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.detectBinaryBitmapIDictionaryOfDecodeHintTypeObjectBoolean">
            <summary>设置 Detector.detect(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints, Boolean multiple) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.detectBooleanBitMatrix">
            <summary>设置 Detector.detect(Boolean multiple, BitMatrix bitMatrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.findGuardPatternBitMatrixInt32Int32Int32BooleanInt32ArrayInt32Array">
            <summary>设置 Detector.findGuardPattern(BitMatrix matrix, Int32 column, Int32 row, Int32 width, Boolean whiteFirst, Int32[] pattern, Int32[] counters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.findRowsWithPatternBitMatrixInt32Int32Int32Int32Int32Array">
            <summary>设置 Detector.findRowsWithPattern(BitMatrix matrix, Int32 height, Int32 width, Int32 startRow, Int32 startColumn, Int32[] pattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.findVerticesBitMatrixInt32Int32">
            <summary>设置 Detector.findVertices(BitMatrix matrix, Int32 startRow, Int32 startColumn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDetector.patternMatchVarianceInt32ArrayInt32ArrayInt32">
            <summary>设置 Detector.patternMatchVariance(Int32[] counters, Int32[] pattern, Int32 maxIndividualVariance) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDimensions">
            <summary>ZXing.PDF417.Internal.Dimensions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDimensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDimensions.#ctor(ZXing.PDF417.Internal.Dimensions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimDimensions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.AllInstances.MaxColsGet">
            <summary>设置 Dimensions.get_MaxCols() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.AllInstances.MaxRowsGet">
            <summary>设置 Dimensions.get_MaxRows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.AllInstances.MinColsGet">
            <summary>设置 Dimensions.get_MinCols() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.AllInstances.MinRowsGet">
            <summary>设置 Dimensions.get_MinRows() 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDimensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimDimensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.ConstructorInt32Int32Int32Int32">
            <summary>设置 Dimensions.Dimensions(Int32 minCols, Int32 maxCols, Int32 minRows, Int32 maxRows) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.MaxColsGet">
            <summary>设置 Dimensions.get_MaxCols() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.MaxRowsGet">
            <summary>设置 Dimensions.get_MaxRows() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.MinColsGet">
            <summary>设置 Dimensions.get_MinCols() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimDimensions.MinRowsGet">
            <summary>设置 Dimensions.get_MinRows() 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder">
            <summary>ZXing.PDF417.Internal.PDF417CodewordDecoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.StaticConstructor">
            <summary>设置 PDF417CodewordDecoder.PDF417CodewordDecoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.getBitValueInt32Array">
            <summary>设置 PDF417CodewordDecoder.getBitValue(Int32[] moduleBitCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.getClosestDecodedValueInt32Array">
            <summary>设置 PDF417CodewordDecoder.getClosestDecodedValue(Int32[] moduleBitCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.getDecodedCodewordValueInt32Array">
            <summary>设置 PDF417CodewordDecoder.getDecodedCodewordValue(Int32[] moduleBitCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.getDecodedValueInt32Array">
            <summary>设置 PDF417CodewordDecoder.getDecodedValue(Int32[] moduleBitCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417CodewordDecoder.sampleBitCountsInt32Array">
            <summary>设置 PDF417CodewordDecoder.sampleBitCounts(Int32[] moduleBitCount) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult">
            <summary>ZXing.PDF417.Internal.PDF417DetectorResult 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.#ctor(ZXing.PDF417.Internal.PDF417DetectorResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.AllInstances.BitsGet">
            <summary>设置 PDF417DetectorResult.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.AllInstances.BitsSetBitMatrix">
            <summary>设置 PDF417DetectorResult.set_Bits(BitMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.AllInstances.PointsGet">
            <summary>设置 PDF417DetectorResult.get_Points() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.AllInstances.PointsSetListOfResultPointArray">
            <summary>设置 PDF417DetectorResult.set_Points(List`1&lt;ResultPoint[]&gt; value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.BitsGet">
            <summary>设置 PDF417DetectorResult.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.BitsSetBitMatrix">
            <summary>设置 PDF417DetectorResult.set_Bits(BitMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.ConstructorBitMatrixListOfResultPointArray">
            <summary>设置 PDF417DetectorResult.PDF417DetectorResult(BitMatrix bits, List`1&lt;ResultPoint[]&gt; points) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.PointsGet">
            <summary>设置 PDF417DetectorResult.get_Points() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417DetectorResult.PointsSetListOfResultPointArray">
            <summary>设置 PDF417DetectorResult.set_Points(List`1&lt;ResultPoint[]&gt; value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder">
            <summary>ZXing.PDF417.Internal.PDF417ScanningDecoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.StaticConstructor">
            <summary>设置 PDF417ScanningDecoder.PDF417ScanningDecoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.ToStringBarcodeValueArrayArray">
            <summary>设置 PDF417ScanningDecoder.ToString(BarcodeValue[][] barcodeMatrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.adjustBoundingBoxDetectionResultRowIndicatorColumn">
            <summary>设置 PDF417ScanningDecoder.adjustBoundingBox(DetectionResultRowIndicatorColumn rowIndicatorColumn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.adjustCodewordCountDetectionResultBarcodeValueArrayArray">
            <summary>设置 PDF417ScanningDecoder.adjustCodewordCount(DetectionResult detectionResult, BarcodeValue[][] barcodeMatrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.adjustCodewordStartColumnBitMatrixInt32Int32BooleanInt32Int32">
            <summary>设置 PDF417ScanningDecoder.adjustCodewordStartColumn(BitMatrix image, Int32 minColumn, Int32 maxColumn, Boolean leftToRight, Int32 codewordStartColumn, Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.checkCodewordSkewInt32Int32Int32">
            <summary>设置 PDF417ScanningDecoder.checkCodewordSkew(Int32 codewordSize, Int32 minCodewordWidth, Int32 maxCodewordWidth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.correctErrorsInt32ArrayInt32ArrayInt32">
            <summary>设置 PDF417ScanningDecoder.correctErrors(Int32[] codewords, Int32[] erasures, Int32 numECCodewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.createBarcodeMatrixDetectionResult">
            <summary>设置 PDF417ScanningDecoder.createBarcodeMatrix(DetectionResult detectionResult) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.createDecoderResultDetectionResult">
            <summary>设置 PDF417ScanningDecoder.createDecoderResult(DetectionResult detectionResult) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.createDecoderResultFromAmbiguousValuesInt32Int32ArrayInt32ArrayInt32ArrayInt32ArrayArray">
            <summary>设置 PDF417ScanningDecoder.createDecoderResultFromAmbiguousValues(Int32 ecLevel, Int32[] codewords, Int32[] erasureArray, Int32[] ambiguousIndexes, Int32[][] ambiguousIndexValues) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.decodeBitMatrixResultPointResultPointResultPointResultPointInt32Int32">
            <summary>设置 PDF417ScanningDecoder.decode(BitMatrix image, ResultPoint imageTopLeft, ResultPoint imageBottomLeft, ResultPoint imageTopRight, ResultPoint imageBottomRight, Int32 minCodewordWidth, Int32 maxCodewordWidth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.decodeCodewordsInt32ArrayInt32Int32Array">
            <summary>设置 PDF417ScanningDecoder.decodeCodewords(Int32[] codewords, Int32 ecLevel, Int32[] erasures) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.detectCodewordBitMatrixInt32Int32BooleanInt32Int32Int32Int32">
            <summary>设置 PDF417ScanningDecoder.detectCodeword(BitMatrix image, Int32 minColumn, Int32 maxColumn, Boolean leftToRight, Int32 startColumn, Int32 imageRow, Int32 minCodewordWidth, Int32 maxCodewordWidth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getBarcodeMetadataDetectionResultRowIndicatorColumnDetectionResultRowIndicatorColumn">
            <summary>设置 PDF417ScanningDecoder.getBarcodeMetadata(DetectionResultRowIndicatorColumn leftRowIndicatorColumn, DetectionResultRowIndicatorColumn rightRowIndicatorColumn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getBitCountForCodewordInt32">
            <summary>设置 PDF417ScanningDecoder.getBitCountForCodeword(Int32 codeword) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getCodewordBucketNumberInt32">
            <summary>设置 PDF417ScanningDecoder.getCodewordBucketNumber(Int32 codeword) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getCodewordBucketNumberInt32Array">
            <summary>设置 PDF417ScanningDecoder.getCodewordBucketNumber(Int32[] moduleBitCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getMaxInt32Array">
            <summary>设置 PDF417ScanningDecoder.getMax(Int32[] values) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getModuleBitCountBitMatrixInt32Int32BooleanInt32Int32">
            <summary>设置 PDF417ScanningDecoder.getModuleBitCount(BitMatrix image, Int32 minColumn, Int32 maxColumn, Boolean leftToRight, Int32 startColumn, Int32 imageRow) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getNumberOfECCodeWordsInt32">
            <summary>设置 PDF417ScanningDecoder.getNumberOfECCodeWords(Int32 barcodeECLevel) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getRowIndicatorColumnBitMatrixBoundingBoxResultPointBooleanInt32Int32">
            <summary>设置 PDF417ScanningDecoder.getRowIndicatorColumn(BitMatrix image, BoundingBox boundingBox, ResultPoint startPoint, Boolean leftToRight, Int32 minCodewordWidth, Int32 maxCodewordWidth) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.getStartColumnDetectionResultInt32Int32Boolean">
            <summary>设置 PDF417ScanningDecoder.getStartColumn(DetectionResult detectionResult, Int32 barcodeColumn, Int32 imageRow, Boolean leftToRight) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.isValidBarcodeColumnDetectionResultInt32">
            <summary>设置 PDF417ScanningDecoder.isValidBarcodeColumn(DetectionResult detectionResult, Int32 barcodeColumn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.mergeDetectionResultRowIndicatorColumnDetectionResultRowIndicatorColumn">
            <summary>设置 PDF417ScanningDecoder.merge(DetectionResultRowIndicatorColumn leftRowIndicatorColumn, DetectionResultRowIndicatorColumn rightRowIndicatorColumn) 的 填充码</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.ShimPDF417ScanningDecoder.verifyCodewordCountInt32ArrayInt32">
            <summary>设置 PDF417ScanningDecoder.verifyCodewordCount(Int32[] codewords, Int32 numECCodewords) 的 填充码</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.StubDetectionResult">
            <summary>ZXing.PDF417.Internal.DetectionResult 的存根类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.StubDetectionResult.#ctor(ZXing.PDF417.Internal.BarcodeMetadata,ZXing.PDF417.Internal.BoundingBox)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.StubDetectionResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.StubDetectionResult.InitializeStub">
            <summary>初始化 type StubDetectionResult 的新实例</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.StubDetectionResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.StubDetectionResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.StubDetectionResult.ToString">
            <summary>设置 DetectionResult.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Fakes.StubDetectionResult.ToString01">
            <summary>设置 DetectionResult.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn">
            <summary>ZXing.PDF417.Internal.DetectionResultColumn 的存根类型</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn.#ctor(ZXing.PDF417.Internal.BoundingBox)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn.InitializeStub">
            <summary>初始化 type StubDetectionResultColumn 的新实例</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn.ToString">
            <summary>设置 DetectionResultColumn.ToString() 的 存根</summary>
        </member>
        <member name="F:ZXing.PDF417.Internal.Fakes.StubDetectionResultColumn.ToString01">
            <summary>设置 DetectionResultColumn.ToString() 的 stub</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.ShimQRCodeReader">
            <summary>ZXing.QrCode.QRCodeReader 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeReader.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeReader.#ctor(ZXing.QrCode.QRCodeReader)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.ShimQRCodeReader.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.AllInstances.decodeBinaryBitmap">
            <summary>设置 QRCodeReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.AllInstances.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 QRCodeReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.AllInstances.getDecoder">
            <summary>设置 QRCodeReader.getDecoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.AllInstances.reset">
            <summary>设置 QRCodeReader.reset() 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeReader.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeReader.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeReader.Bind(ZXing.Reader)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.Constructor">
            <summary>设置 QRCodeReader.QRCodeReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.StaticConstructor">
            <summary>设置 QRCodeReader.QRCodeReader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.decodeBinaryBitmap">
            <summary>设置 QRCodeReader.decode(BinaryBitmap image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.decodeBinaryBitmapIDictionaryOfDecodeHintTypeObject">
            <summary>设置 QRCodeReader.decode(BinaryBitmap image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.extractPureBitsBitMatrix">
            <summary>设置 QRCodeReader.extractPureBits(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.getDecoder">
            <summary>设置 QRCodeReader.getDecoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.moduleSizeInt32ArrayBitMatrixSingleOut">
            <summary>设置 QRCodeReader.moduleSize(Int32[] leftTopBlack, BitMatrix image, Single&amp; msize) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeReader.reset">
            <summary>设置 QRCodeReader.reset() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.ShimQRCodeWriter">
            <summary>ZXing.QrCode.QRCodeWriter 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeWriter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeWriter.#ctor(ZXing.QrCode.QRCodeWriter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.ShimQRCodeWriter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeWriter.AllInstances.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 QRCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeWriter.AllInstances.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 QRCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeWriter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeWriter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeWriter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQRCodeWriter.Bind(ZXing.Writer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeWriter.Constructor">
            <summary>设置 QRCodeWriter.QRCodeWriter() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeWriter.encodeStringBarcodeFormatInt32Int32">
            <summary>设置 QRCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeWriter.encodeStringBarcodeFormatInt32Int32IDictionaryOfEncodeHintTypeObject">
            <summary>设置 QRCodeWriter.encode(String contents, BarcodeFormat format, Int32 width, Int32 height, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQRCodeWriter.renderResultQRCodeInt32Int32Int32">
            <summary>设置 QRCodeWriter.renderResult(QRCode code, Int32 width, Int32 height, Int32 quietZone) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions">
            <summary>ZXing.QrCode.QrCodeEncodingOptions 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.#ctor(ZXing.QrCode.QrCodeEncodingOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.CharacterSetGet">
            <summary>设置 QrCodeEncodingOptions.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.CharacterSetSetString">
            <summary>设置 QrCodeEncodingOptions.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.DisableECIGet">
            <summary>设置 QrCodeEncodingOptions.get_DisableECI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.DisableECISetBoolean">
            <summary>设置 QrCodeEncodingOptions.set_DisableECI(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.ErrorCorrectionGet">
            <summary>设置 QrCodeEncodingOptions.get_ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.ErrorCorrectionSetErrorCorrectionLevel">
            <summary>设置 QrCodeEncodingOptions.set_ErrorCorrection(ErrorCorrectionLevel value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.QrVersionGet">
            <summary>设置 QrCodeEncodingOptions.get_QrVersion() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.AllInstances.QrVersionSetNullableOfInt32">
            <summary>设置 QrCodeEncodingOptions.set_QrVersion(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.CharacterSetGet">
            <summary>设置 QrCodeEncodingOptions.get_CharacterSet() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.CharacterSetSetString">
            <summary>设置 QrCodeEncodingOptions.set_CharacterSet(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.Constructor">
            <summary>设置 QrCodeEncodingOptions.QrCodeEncodingOptions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.DisableECIGet">
            <summary>设置 QrCodeEncodingOptions.get_DisableECI() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.DisableECISetBoolean">
            <summary>设置 QrCodeEncodingOptions.set_DisableECI(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.ErrorCorrectionGet">
            <summary>设置 QrCodeEncodingOptions.get_ErrorCorrection() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.ErrorCorrectionSetErrorCorrectionLevel">
            <summary>设置 QrCodeEncodingOptions.set_ErrorCorrection(ErrorCorrectionLevel value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.QrVersionGet">
            <summary>设置 QrCodeEncodingOptions.get_QrVersion() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.ShimQrCodeEncodingOptions.QrVersionSetNullableOfInt32">
            <summary>设置 QrCodeEncodingOptions.set_QrVersion(Nullable`1&lt;Int32&gt; value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.StubQRCodeReader">
            <summary>ZXing.QrCode.QRCodeReader 的存根类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.StubQRCodeReader.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.StubQRCodeReader.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.StubQRCodeReader.InitializeStub">
            <summary>初始化 type StubQRCodeReader 的新实例</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.StubQRCodeReader.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.StubQRCodeReader.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.QrCode.Fakes.StubQrCodeEncodingOptions">
            <summary>ZXing.QrCode.QrCodeEncodingOptions 的存根类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.StubQrCodeEncodingOptions.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.StubQrCodeEncodingOptions.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Fakes.StubQrCodeEncodingOptions.InitializeStub">
            <summary>初始化 type StubQrCodeEncodingOptions 的新实例</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.StubQrCodeEncodingOptions.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.QrCode.Fakes.StubQrCodeEncodingOptions.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern">
            <summary>ZXing.QrCode.Internal.AlignmentPattern 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.#ctor(ZXing.QrCode.Internal.AlignmentPattern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.AllInstances.aboutEqualsSingleSingleSingle">
            <summary>设置 AlignmentPattern.aboutEquals(Single moduleSize, Single i, Single j) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.AllInstances.combineEstimateSingleSingleSingle">
            <summary>设置 AlignmentPattern.combineEstimate(Single i, Single j, Single newModuleSize) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.ConstructorSingleSingleSingle">
            <summary>设置 AlignmentPattern.AlignmentPattern(Single posX, Single posY, Single estimatedModuleSize) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.aboutEqualsSingleSingleSingle">
            <summary>设置 AlignmentPattern.aboutEquals(Single moduleSize, Single i, Single j) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimAlignmentPattern.combineEstimateSingleSingleSingle">
            <summary>设置 AlignmentPattern.combineEstimate(Single i, Single j, Single newModuleSize) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimByteMatrix">
            <summary>ZXing.QrCode.Internal.ByteMatrix 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.#ctor(ZXing.QrCode.Internal.ByteMatrix)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.ArrayGet">
            <summary>设置 ByteMatrix.get_Array() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.HeightGet">
            <summary>设置 ByteMatrix.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.ItemGetInt32Int32">
            <summary>设置 ByteMatrix.get_Item(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.ItemSetInt32Int32Int32">
            <summary>设置 ByteMatrix.set_Item(Int32 x, Int32 y, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.ToString01">
            <summary>设置 ByteMatrix.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.WidthGet">
            <summary>设置 ByteMatrix.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.clearByte">
            <summary>设置 ByteMatrix.clear(Byte value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.setInt32Int32Boolean">
            <summary>设置 ByteMatrix.set(Int32 x, Int32 y, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.AllInstances.setInt32Int32Byte">
            <summary>设置 ByteMatrix.set(Int32 x, Int32 y, Byte value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.ArrayGet">
            <summary>设置 ByteMatrix.get_Array() 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.ConstructorInt32Int32">
            <summary>设置 ByteMatrix.ByteMatrix(Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.HeightGet">
            <summary>设置 ByteMatrix.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.ItemGetInt32Int32">
            <summary>设置 ByteMatrix.get_Item(Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.ItemSetInt32Int32Int32">
            <summary>设置 ByteMatrix.set_Item(Int32 x, Int32 y, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.ToString">
            <summary>设置 ByteMatrix.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.WidthGet">
            <summary>设置 ByteMatrix.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.clearByte">
            <summary>设置 ByteMatrix.clear(Byte value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.setInt32Int32Boolean">
            <summary>设置 ByteMatrix.set(Int32 x, Int32 y, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimByteMatrix.setInt32Int32Byte">
            <summary>设置 ByteMatrix.set(Int32 x, Int32 y, Byte value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimDecoder">
            <summary>ZXing.QrCode.Internal.Decoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDecoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDecoder.#ctor(ZXing.QrCode.Internal.Decoder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimDecoder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.AllInstances.correctErrorsByteArrayInt32">
            <summary>设置 Decoder.correctErrors(Byte[] codewordBytes, Int32 numDataCodewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.AllInstances.decodeBitMatrixIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Decoder.decode(BitMatrix bits, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.AllInstances.decodeBooleanArrayArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Decoder.decode(Boolean[][] image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDecoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDecoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.Constructor">
            <summary>设置 Decoder.Decoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.correctErrorsByteArrayInt32">
            <summary>设置 Decoder.correctErrors(Byte[] codewordBytes, Int32 numDataCodewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.decodeBitMatrixIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Decoder.decode(BitMatrix bits, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDecoder.decodeBooleanArrayArrayIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Decoder.decode(Boolean[][] image, IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimDetector">
            <summary>ZXing.QrCode.Internal.Detector 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDetector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDetector.#ctor(ZXing.QrCode.Internal.Detector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.ImageGet">
            <summary>设置 Detector.get_Image() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.ResultPointCallbackGet">
            <summary>设置 Detector.get_ResultPointCallback() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.calculateModuleSizeOneWayResultPointResultPoint">
            <summary>设置 Detector.calculateModuleSizeOneWay(ResultPoint pattern, ResultPoint otherPattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.calculateModuleSizeResultPointResultPointResultPoint">
            <summary>设置 Detector.calculateModuleSize(ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomLeft) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.detect">
            <summary>设置 Detector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.detectIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Detector.detect(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.findAlignmentInRegionSingleInt32Int32Single">
            <summary>设置 Detector.findAlignmentInRegion(Single overallEstModuleSize, Int32 estAlignmentX, Int32 estAlignmentY, Single allowanceFactor) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.processFinderPatternInfoFinderPatternInfo">
            <summary>设置 Detector.processFinderPatternInfo(FinderPatternInfo info) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.sizeOfBlackWhiteBlackRunBothWaysInt32Int32Int32Int32">
            <summary>设置 Detector.sizeOfBlackWhiteBlackRunBothWays(Int32 fromX, Int32 fromY, Int32 toX, Int32 toY) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.AllInstances.sizeOfBlackWhiteBlackRunInt32Int32Int32Int32">
            <summary>设置 Detector.sizeOfBlackWhiteBlackRun(Int32 fromX, Int32 fromY, Int32 toX, Int32 toY) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDetector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimDetector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.ConstructorBitMatrix">
            <summary>设置 Detector.Detector(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.ImageGet">
            <summary>设置 Detector.get_Image() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.ResultPointCallbackGet">
            <summary>设置 Detector.get_ResultPointCallback() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.calculateModuleSizeOneWayResultPointResultPoint">
            <summary>设置 Detector.calculateModuleSizeOneWay(ResultPoint pattern, ResultPoint otherPattern) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.calculateModuleSizeResultPointResultPointResultPoint">
            <summary>设置 Detector.calculateModuleSize(ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomLeft) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.computeDimensionResultPointResultPointResultPointSingleInt32Out">
            <summary>设置 Detector.computeDimension(ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomLeft, Single moduleSize, Int32&amp; dimension) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.createTransformResultPointResultPointResultPointResultPointInt32">
            <summary>设置 Detector.createTransform(ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomLeft, ResultPoint alignmentPattern, Int32 dimension) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.detect">
            <summary>设置 Detector.detect() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.detectIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Detector.detect(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.findAlignmentInRegionSingleInt32Int32Single">
            <summary>设置 Detector.findAlignmentInRegion(Single overallEstModuleSize, Int32 estAlignmentX, Int32 estAlignmentY, Single allowanceFactor) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.processFinderPatternInfoFinderPatternInfo">
            <summary>设置 Detector.processFinderPatternInfo(FinderPatternInfo info) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.sampleGridBitMatrixPerspectiveTransformInt32">
            <summary>设置 Detector.sampleGrid(BitMatrix image, PerspectiveTransform transform, Int32 dimension) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.sizeOfBlackWhiteBlackRunBothWaysInt32Int32Int32Int32">
            <summary>设置 Detector.sizeOfBlackWhiteBlackRunBothWays(Int32 fromX, Int32 fromY, Int32 toX, Int32 toY) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimDetector.sizeOfBlackWhiteBlackRunInt32Int32Int32Int32">
            <summary>设置 Detector.sizeOfBlackWhiteBlackRun(Int32 fromX, Int32 fromY, Int32 toX, Int32 toY) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimEncoder">
            <summary>ZXing.QrCode.Internal.Encoder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimEncoder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimEncoder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimEncoder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.StaticConstructor">
            <summary>设置 Encoder.Encoder() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.append8BitBytesStringBitArrayString">
            <summary>设置 Encoder.append8BitBytes(String content, BitArray bits, String encoding) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.appendAlphanumericBytesStringBitArray">
            <summary>设置 Encoder.appendAlphanumericBytes(String content, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.appendBytesStringModeBitArrayString">
            <summary>设置 Encoder.appendBytes(String content, Mode mode, BitArray bits, String encoding) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.appendECICharacterSetECIBitArray">
            <summary>设置 Encoder.appendECI(CharacterSetECI eci, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.appendKanjiBytesStringBitArray">
            <summary>设置 Encoder.appendKanjiBytes(String content, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.appendLengthInfoInt32VersionModeBitArray">
            <summary>设置 Encoder.appendLengthInfo(Int32 numLetters, Version version, Mode mode, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.appendModeInfoModeBitArray">
            <summary>设置 Encoder.appendModeInfo(Mode mode, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.appendNumericBytesStringBitArray">
            <summary>设置 Encoder.appendNumericBytes(String content, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.calculateBitsNeededModeBitArrayBitArrayVersion">
            <summary>设置 Encoder.calculateBitsNeeded(Mode mode, BitArray headerBits, BitArray dataBits, Version version) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.calculateMaskPenaltyByteMatrix">
            <summary>设置 Encoder.calculateMaskPenalty(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.chooseMaskPatternBitArrayErrorCorrectionLevelVersionByteMatrix">
            <summary>设置 Encoder.chooseMaskPattern(BitArray bits, ErrorCorrectionLevel ecLevel, Version version, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.chooseModeString">
            <summary>设置 Encoder.chooseMode(String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.chooseModeStringString">
            <summary>设置 Encoder.chooseMode(String content, String encoding) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.chooseVersionInt32ErrorCorrectionLevel">
            <summary>设置 Encoder.chooseVersion(Int32 numInputBits, ErrorCorrectionLevel ecLevel) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.encodeStringErrorCorrectionLevel">
            <summary>设置 Encoder.encode(String content, ErrorCorrectionLevel ecLevel) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.encodeStringErrorCorrectionLevelIDictionaryOfEncodeHintTypeObject">
            <summary>设置 Encoder.encode(String content, ErrorCorrectionLevel ecLevel, IDictionary`2&lt;EncodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.generateECBytesByteArrayInt32">
            <summary>设置 Encoder.generateECBytes(Byte[] dataBytes, Int32 numEcBytesInBlock) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.getAlphanumericCodeInt32">
            <summary>设置 Encoder.getAlphanumericCode(Int32 code) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.getNumDataBytesAndNumECBytesForBlockIDInt32Int32Int32Int32Int32ArrayInt32Array">
            <summary>设置 Encoder.getNumDataBytesAndNumECBytesForBlockID(Int32 numTotalBytes, Int32 numDataBytes, Int32 numRSBlocks, Int32 blockID, Int32[] numDataBytesInBlock, Int32[] numECBytesInBlock) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.interleaveWithECBytesBitArrayInt32Int32Int32">
            <summary>设置 Encoder.interleaveWithECBytes(BitArray bits, Int32 numTotalBytes, Int32 numDataBytes, Int32 numRSBlocks) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.isOnlyDoubleByteKanjiString">
            <summary>设置 Encoder.isOnlyDoubleByteKanji(String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.recommendVersionErrorCorrectionLevelModeBitArrayBitArray">
            <summary>设置 Encoder.recommendVersion(ErrorCorrectionLevel ecLevel, Mode mode, BitArray headerBits, BitArray dataBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.terminateBitsInt32BitArray">
            <summary>设置 Encoder.terminateBits(Int32 numDataBytes, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimEncoder.willFitInt32VersionErrorCorrectionLevel">
            <summary>设置 Encoder.willFit(Int32 numInputBits, Version version, ErrorCorrectionLevel ecLevel) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel">
            <summary>ZXing.QrCode.Internal.ErrorCorrectionLevel 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.#ctor(ZXing.QrCode.Internal.ErrorCorrectionLevel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.AllInstances.BitsGet">
            <summary>设置 ErrorCorrectionLevel.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.AllInstances.NameGet">
            <summary>设置 ErrorCorrectionLevel.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.AllInstances.ToString01">
            <summary>设置 ErrorCorrectionLevel.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.AllInstances.ordinal">
            <summary>设置 ErrorCorrectionLevel.ordinal() 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.BitsGet">
            <summary>设置 ErrorCorrectionLevel.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.ConstructorInt32Int32String">
            <summary>设置 ErrorCorrectionLevel.ErrorCorrectionLevel(Int32 ordinal, Int32 bits, String name) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.NameGet">
            <summary>设置 ErrorCorrectionLevel.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.StaticConstructor">
            <summary>设置 ErrorCorrectionLevel.ErrorCorrectionLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.ToString">
            <summary>设置 ErrorCorrectionLevel.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.forBitsInt32">
            <summary>设置 ErrorCorrectionLevel.forBits(Int32 bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimErrorCorrectionLevel.ordinal">
            <summary>设置 ErrorCorrectionLevel.ordinal() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimFinderPattern">
            <summary>ZXing.QrCode.Internal.FinderPattern 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.#ctor(ZXing.QrCode.Internal.FinderPattern)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.AllInstances.CountGet">
            <summary>设置 FinderPattern.get_Count() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.AllInstances.EstimatedModuleSizeGet">
            <summary>设置 FinderPattern.get_EstimatedModuleSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.AllInstances.aboutEqualsSingleSingleSingle">
            <summary>设置 FinderPattern.aboutEquals(Single moduleSize, Single i, Single j) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.AllInstances.combineEstimateSingleSingleSingle">
            <summary>设置 FinderPattern.combineEstimate(Single i, Single j, Single newModuleSize) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.ConstructorSingleSingleSingle">
            <summary>设置 FinderPattern.FinderPattern(Single posX, Single posY, Single estimatedModuleSize) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.ConstructorSingleSingleSingleInt32">
            <summary>设置 FinderPattern.FinderPattern(Single posX, Single posY, Single estimatedModuleSize, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.CountGet">
            <summary>设置 FinderPattern.get_Count() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.EstimatedModuleSizeGet">
            <summary>设置 FinderPattern.get_EstimatedModuleSize() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.aboutEqualsSingleSingleSingle">
            <summary>设置 FinderPattern.aboutEquals(Single moduleSize, Single i, Single j) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPattern.combineEstimateSingleSingleSingle">
            <summary>设置 FinderPattern.combineEstimate(Single i, Single j, Single newModuleSize) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder">
            <summary>ZXing.QrCode.Internal.FinderPatternFinder 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.#ctor(ZXing.QrCode.Internal.FinderPatternFinder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.CrossCheckStateCountGet">
            <summary>设置 FinderPatternFinder.get_CrossCheckStateCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.ImageGet">
            <summary>设置 FinderPatternFinder.get_Image() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.PossibleCentersGet">
            <summary>设置 FinderPatternFinder.get_PossibleCenters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.crossCheckDiagonalInt32Int32Int32Int32">
            <summary>设置 FinderPatternFinder.crossCheckDiagonal(Int32 startI, Int32 centerJ, Int32 maxCount, Int32 originalStateCountTotal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.crossCheckHorizontalInt32Int32Int32Int32">
            <summary>设置 FinderPatternFinder.crossCheckHorizontal(Int32 startJ, Int32 centerI, Int32 maxCount, Int32 originalStateCountTotal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.crossCheckVerticalInt32Int32Int32Int32">
            <summary>设置 FinderPatternFinder.crossCheckVertical(Int32 startI, Int32 centerJ, Int32 maxCount, Int32 originalStateCountTotal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.findIDictionaryOfDecodeHintTypeObject">
            <summary>设置 FinderPatternFinder.find(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.findRowSkip">
            <summary>设置 FinderPatternFinder.findRowSkip() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.handlePossibleCenterInt32ArrayInt32Int32Boolean">
            <summary>设置 FinderPatternFinder.handlePossibleCenter(Int32[] stateCount, Int32 i, Int32 j, Boolean pureBarcode) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.haveMultiplyConfirmedCenters">
            <summary>设置 FinderPatternFinder.haveMultiplyConfirmedCenters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.AllInstances.selectBestPatterns">
            <summary>设置 FinderPatternFinder.selectBestPatterns() 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.ConstructorBitMatrix">
            <summary>设置 FinderPatternFinder.FinderPatternFinder(BitMatrix image) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.ConstructorBitMatrixResultPointCallback">
            <summary>设置 FinderPatternFinder.FinderPatternFinder(BitMatrix image, ResultPointCallback resultPointCallback) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.CrossCheckStateCountGet">
            <summary>设置 FinderPatternFinder.get_CrossCheckStateCount() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.ImageGet">
            <summary>设置 FinderPatternFinder.get_Image() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.PossibleCentersGet">
            <summary>设置 FinderPatternFinder.get_PossibleCenters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.centerFromEndInt32ArrayInt32">
            <summary>设置 FinderPatternFinder.centerFromEnd(Int32[] stateCount, Int32 end) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.crossCheckDiagonalInt32Int32Int32Int32">
            <summary>设置 FinderPatternFinder.crossCheckDiagonal(Int32 startI, Int32 centerJ, Int32 maxCount, Int32 originalStateCountTotal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.crossCheckHorizontalInt32Int32Int32Int32">
            <summary>设置 FinderPatternFinder.crossCheckHorizontal(Int32 startJ, Int32 centerI, Int32 maxCount, Int32 originalStateCountTotal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.crossCheckVerticalInt32Int32Int32Int32">
            <summary>设置 FinderPatternFinder.crossCheckVertical(Int32 startI, Int32 centerJ, Int32 maxCount, Int32 originalStateCountTotal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.findIDictionaryOfDecodeHintTypeObject">
            <summary>设置 FinderPatternFinder.find(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.findRowSkip">
            <summary>设置 FinderPatternFinder.findRowSkip() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.foundPatternCrossInt32Array">
            <summary>设置 FinderPatternFinder.foundPatternCross(Int32[] stateCount) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.handlePossibleCenterInt32ArrayInt32Int32Boolean">
            <summary>设置 FinderPatternFinder.handlePossibleCenter(Int32[] stateCount, Int32 i, Int32 j, Boolean pureBarcode) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.haveMultiplyConfirmedCenters">
            <summary>设置 FinderPatternFinder.haveMultiplyConfirmedCenters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternFinder.selectBestPatterns">
            <summary>设置 FinderPatternFinder.selectBestPatterns() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo">
            <summary>ZXing.QrCode.Internal.FinderPatternInfo 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.#ctor(ZXing.QrCode.Internal.FinderPatternInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.AllInstances.BottomLeftGet">
            <summary>设置 FinderPatternInfo.get_BottomLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.AllInstances.TopLeftGet">
            <summary>设置 FinderPatternInfo.get_TopLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.AllInstances.TopRightGet">
            <summary>设置 FinderPatternInfo.get_TopRight() 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.BottomLeftGet">
            <summary>设置 FinderPatternInfo.get_BottomLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.ConstructorFinderPatternArray">
            <summary>设置 FinderPatternInfo.FinderPatternInfo(FinderPattern[] patternCenters) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.TopLeftGet">
            <summary>设置 FinderPatternInfo.get_TopLeft() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimFinderPatternInfo.TopRightGet">
            <summary>设置 FinderPatternInfo.get_TopRight() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimMaskUtil">
            <summary>ZXing.QrCode.Internal.MaskUtil 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.applyMaskPenaltyRule1ByteMatrix">
            <summary>设置 MaskUtil.applyMaskPenaltyRule1(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.applyMaskPenaltyRule1InternalByteMatrixBoolean">
            <summary>设置 MaskUtil.applyMaskPenaltyRule1Internal(ByteMatrix matrix, Boolean isHorizontal) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.applyMaskPenaltyRule2ByteMatrix">
            <summary>设置 MaskUtil.applyMaskPenaltyRule2(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.applyMaskPenaltyRule3ByteMatrix">
            <summary>设置 MaskUtil.applyMaskPenaltyRule3(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.applyMaskPenaltyRule4ByteMatrix">
            <summary>设置 MaskUtil.applyMaskPenaltyRule4(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.getDataMaskBitInt32Int32Int32">
            <summary>设置 MaskUtil.getDataMaskBit(Int32 maskPattern, Int32 x, Int32 y) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.isWhiteHorizontalByteArrayInt32Int32">
            <summary>设置 MaskUtil.isWhiteHorizontal(Byte[] rowArray, Int32 from, Int32 to) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMaskUtil.isWhiteVerticalByteArrayArrayInt32Int32Int32">
            <summary>设置 MaskUtil.isWhiteVertical(Byte[][] array, Int32 col, Int32 from, Int32 to) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil">
            <summary>ZXing.QrCode.Internal.MatrixUtil 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.StaticConstructor">
            <summary>设置 MatrixUtil.MatrixUtil() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.buildMatrixBitArrayErrorCorrectionLevelVersionInt32ByteMatrix">
            <summary>设置 MatrixUtil.buildMatrix(BitArray dataBits, ErrorCorrectionLevel ecLevel, Version version, Int32 maskPattern, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.calculateBCHCodeInt32Int32">
            <summary>设置 MatrixUtil.calculateBCHCode(Int32 value, Int32 poly) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.clearMatrixByteMatrix">
            <summary>设置 MatrixUtil.clearMatrix(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedBasicPatternsVersionByteMatrix">
            <summary>设置 MatrixUtil.embedBasicPatterns(Version version, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedDarkDotAtLeftBottomCornerByteMatrix">
            <summary>设置 MatrixUtil.embedDarkDotAtLeftBottomCorner(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedDataBitsBitArrayInt32ByteMatrix">
            <summary>设置 MatrixUtil.embedDataBits(BitArray dataBits, Int32 maskPattern, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedHorizontalSeparationPatternInt32Int32ByteMatrix">
            <summary>设置 MatrixUtil.embedHorizontalSeparationPattern(Int32 xStart, Int32 yStart, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedPositionAdjustmentPatternInt32Int32ByteMatrix">
            <summary>设置 MatrixUtil.embedPositionAdjustmentPattern(Int32 xStart, Int32 yStart, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedPositionDetectionPatternInt32Int32ByteMatrix">
            <summary>设置 MatrixUtil.embedPositionDetectionPattern(Int32 xStart, Int32 yStart, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedPositionDetectionPatternsAndSeparatorsByteMatrix">
            <summary>设置 MatrixUtil.embedPositionDetectionPatternsAndSeparators(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedTimingPatternsByteMatrix">
            <summary>设置 MatrixUtil.embedTimingPatterns(ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedTypeInfoErrorCorrectionLevelInt32ByteMatrix">
            <summary>设置 MatrixUtil.embedTypeInfo(ErrorCorrectionLevel ecLevel, Int32 maskPattern, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.embedVerticalSeparationPatternInt32Int32ByteMatrix">
            <summary>设置 MatrixUtil.embedVerticalSeparationPattern(Int32 xStart, Int32 yStart, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.findMSBSetInt32">
            <summary>设置 MatrixUtil.findMSBSet(Int32 value_Renamed) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.isEmptyInt32">
            <summary>设置 MatrixUtil.isEmpty(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.makeTypeInfoBitsErrorCorrectionLevelInt32BitArray">
            <summary>设置 MatrixUtil.makeTypeInfoBits(ErrorCorrectionLevel ecLevel, Int32 maskPattern, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.makeVersionInfoBitsVersionBitArray">
            <summary>设置 MatrixUtil.makeVersionInfoBits(Version version, BitArray bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.maybeEmbedPositionAdjustmentPatternsVersionByteMatrix">
            <summary>设置 MatrixUtil.maybeEmbedPositionAdjustmentPatterns(Version version, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMatrixUtil.maybeEmbedVersionInfoVersionByteMatrix">
            <summary>设置 MatrixUtil.maybeEmbedVersionInfo(Version version, ByteMatrix matrix) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimMode">
            <summary>ZXing.QrCode.Internal.Mode 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.#ctor(ZXing.QrCode.Internal.Mode)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimMode.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.AllInstances.BitsGet">
            <summary>设置 Mode.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.AllInstances.NameGet">
            <summary>设置 Mode.get_Name() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.AllInstances.ToString01">
            <summary>设置 Mode.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.AllInstances.getCharacterCountBitsVersion">
            <summary>设置 Mode.getCharacterCountBits(Version version) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.BitsGet">
            <summary>设置 Mode.get_Bits() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.ConstructorInt32ArrayInt32String">
            <summary>设置 Mode.Mode(Int32[] characterCountBitsForVersions, Int32 bits, String name) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.NameGet">
            <summary>设置 Mode.get_Name() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames">
            <summary>ZXing.QrCode.Internal.Mode+Names 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames.#ctor(ZXing.QrCode.Internal.Mode.Names)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.ShimNames.Constructor">
            <summary>设置 Names.Names() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.StaticConstructor">
            <summary>设置 Mode.Mode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.ToString">
            <summary>设置 Mode.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.forBitsInt32">
            <summary>设置 Mode.forBits(Int32 bits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimMode.getCharacterCountBitsVersion">
            <summary>设置 Mode.getCharacterCountBits(Version version) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimQRCode">
            <summary>ZXing.QrCode.Internal.QRCode 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCode.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCode.#ctor(ZXing.QrCode.Internal.QRCode)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.ECLevelGet">
            <summary>设置 QRCode.get_ECLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.ECLevelSetErrorCorrectionLevel">
            <summary>设置 QRCode.set_ECLevel(ErrorCorrectionLevel value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.MaskPatternGet">
            <summary>设置 QRCode.get_MaskPattern() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.MaskPatternSetInt32">
            <summary>设置 QRCode.set_MaskPattern(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.MatrixGet">
            <summary>设置 QRCode.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.MatrixSetByteMatrix">
            <summary>设置 QRCode.set_Matrix(ByteMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.ModeGet">
            <summary>设置 QRCode.get_Mode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.ModeSetMode">
            <summary>设置 QRCode.set_Mode(Mode value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.ToString01">
            <summary>设置 QRCode.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.VersionGet">
            <summary>设置 QRCode.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.AllInstances.VersionSetVersion">
            <summary>设置 QRCode.set_Version(Version value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCode.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCode.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.Constructor">
            <summary>设置 QRCode.QRCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.ECLevelGet">
            <summary>设置 QRCode.get_ECLevel() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.ECLevelSetErrorCorrectionLevel">
            <summary>设置 QRCode.set_ECLevel(ErrorCorrectionLevel value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.MaskPatternGet">
            <summary>设置 QRCode.get_MaskPattern() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.MaskPatternSetInt32">
            <summary>设置 QRCode.set_MaskPattern(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.MatrixGet">
            <summary>设置 QRCode.get_Matrix() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.MatrixSetByteMatrix">
            <summary>设置 QRCode.set_Matrix(ByteMatrix value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.ModeGet">
            <summary>设置 QRCode.get_Mode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.ModeSetMode">
            <summary>设置 QRCode.set_Mode(Mode value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.StaticConstructor">
            <summary>设置 QRCode.QRCode() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.ToString">
            <summary>设置 QRCode.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.VersionGet">
            <summary>设置 QRCode.get_Version() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.VersionSetVersion">
            <summary>设置 QRCode.set_Version(Version value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCode.isValidMaskPatternInt32">
            <summary>设置 QRCode.isValidMaskPattern(Int32 maskPattern) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData">
            <summary>ZXing.QrCode.Internal.QRCodeDecoderMetaData 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.#ctor(ZXing.QrCode.Internal.QRCodeDecoderMetaData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.AllInstances.IsMirroredGet">
            <summary>设置 QRCodeDecoderMetaData.get_IsMirrored() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.AllInstances.applyMirroredCorrectionResultPointArray">
            <summary>设置 QRCodeDecoderMetaData.applyMirroredCorrection(ResultPoint[] points) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.ConstructorBoolean">
            <summary>设置 QRCodeDecoderMetaData.QRCodeDecoderMetaData(Boolean mirrored) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.IsMirroredGet">
            <summary>设置 QRCodeDecoderMetaData.get_IsMirrored() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimQRCodeDecoderMetaData.applyMirroredCorrectionResultPointArray">
            <summary>设置 QRCodeDecoderMetaData.applyMirroredCorrection(ResultPoint[] points) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimVersion">
            <summary>ZXing.QrCode.Internal.Version 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.#ctor(ZXing.QrCode.Internal.Version)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AlignmentPatternCentersGet">
            <summary>设置 Version.get_AlignmentPatternCenters() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances.AlignmentPatternCentersGet">
            <summary>设置 Version.get_AlignmentPatternCenters() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances.DimensionForVersionGet">
            <summary>设置 Version.get_DimensionForVersion() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances.ToString01">
            <summary>设置 Version.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances.TotalCodewordsGet">
            <summary>设置 Version.get_TotalCodewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances.VersionNumberGet">
            <summary>设置 Version.get_VersionNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances.buildFunctionPattern">
            <summary>设置 Version.buildFunctionPattern() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.AllInstances.getECBlocksForLevelErrorCorrectionLevel">
            <summary>设置 Version.getECBlocksForLevel(ErrorCorrectionLevel ecLevel) 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ConstructorInt32Int32ArrayVersionECBlocksArray">
            <summary>设置 Version.Version(Int32 versionNumber, Int32[] alignmentPatternCenters, ECBlocks[] ecBlocks) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.DimensionForVersionGet">
            <summary>设置 Version.get_DimensionForVersion() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB">
            <summary>ZXing.QrCode.Internal.Version+ECB 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.#ctor(ZXing.QrCode.Internal.Version.ECB)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.AllInstances.CountGet">
            <summary>设置 ECB.get_Count() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.AllInstances.DataCodewordsGet">
            <summary>设置 ECB.get_DataCodewords() 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.ConstructorInt32Int32">
            <summary>设置 ECB.ECB(Int32 count, Int32 dataCodewords) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.CountGet">
            <summary>设置 ECB.get_Count() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECB.DataCodewordsGet">
            <summary>设置 ECB.get_DataCodewords() 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks">
            <summary>ZXing.QrCode.Internal.Version+ECBlocks 的填充码类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.#ctor(ZXing.QrCode.Internal.Version.ECBlocks)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.AllInstances.ECCodewordsPerBlockGet">
            <summary>设置 ECBlocks.get_ECCodewordsPerBlock() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.AllInstances.NumBlocksGet">
            <summary>设置 ECBlocks.get_NumBlocks() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.AllInstances.TotalECCodewordsGet">
            <summary>设置 ECBlocks.get_TotalECCodewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.AllInstances.getECBlocks">
            <summary>设置 ECBlocks.getECBlocks() 的 填充码</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.ConstructorInt32VersionECBArray">
            <summary>设置 ECBlocks.ECBlocks(Int32 ecCodewordsPerBlock, ECB[] ecBlocks) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.ECCodewordsPerBlockGet">
            <summary>设置 ECBlocks.get_ECCodewordsPerBlock() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.NumBlocksGet">
            <summary>设置 ECBlocks.get_NumBlocks() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.TotalECCodewordsGet">
            <summary>设置 ECBlocks.get_TotalECCodewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ShimECBlocks.getECBlocks">
            <summary>设置 ECBlocks.getECBlocks() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.StaticConstructor">
            <summary>设置 Version.Version() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.ToString">
            <summary>设置 Version.ToString() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.TotalCodewordsGet">
            <summary>设置 Version.get_TotalCodewords() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.VersionNumberGet">
            <summary>设置 Version.get_VersionNumber() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.buildFunctionPattern">
            <summary>设置 Version.buildFunctionPattern() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.buildVersions">
            <summary>设置 Version.buildVersions() 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.decodeVersionInformationInt32">
            <summary>设置 Version.decodeVersionInformation(Int32 versionBits) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.getECBlocksForLevelErrorCorrectionLevel">
            <summary>设置 Version.getECBlocksForLevel(ErrorCorrectionLevel ecLevel) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.getProvisionalVersionForDimensionInt32">
            <summary>设置 Version.getProvisionalVersionForDimension(Int32 dimension) 的 填充码</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.ShimVersion.getVersionForNumberInt32">
            <summary>设置 Version.getVersionForNumber(Int32 versionNumber) 的 填充码</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.StubDetector">
            <summary>ZXing.QrCode.Internal.Detector 的存根类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubDetector.#ctor(ZXing.Common.BitMatrix)">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubDetector.CalculateModuleSizeResultPointResultPointResultPoint">
            <summary>设置 Detector.calculateModuleSize(ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomLeft) 的 stub</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubDetector.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubDetector.Detect">
            <summary>设置 Detector.detect() 的 stub</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubDetector.DetectIDictionaryOfDecodeHintTypeObject">
            <summary>设置 Detector.detect(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 stub</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubDetector.Image">
            <summary>设置 Detector.get_Image() 的 stub</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubDetector.ImageGet">
            <summary>设置 Detector.get_Image() 的 stub</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubDetector.InitializeStub">
            <summary>初始化 type StubDetector 的新实例</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubDetector.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubDetector.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubDetector.ProcessFinderPatternInfoFinderPatternInfo">
            <summary>设置 Detector.processFinderPatternInfo(FinderPatternInfo info) 的 stub</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubDetector.ResultPointCallback">
            <summary>设置 Detector.get_ResultPointCallback() 的 stub</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubDetector.ResultPointCallbackGet">
            <summary>设置 Detector.get_ResultPointCallback() 的 stub</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubDetector.calculateModuleSize(ZXing.ResultPoint,ZXing.ResultPoint,ZXing.ResultPoint)">
            <summary>设置 Detector.calculateModuleSize(ResultPoint topLeft, ResultPoint topRight, ResultPoint bottomLeft) 的 存根</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubDetector.detect">
            <summary>设置 Detector.detect() 的 存根</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubDetector.detect(System.Collections.Generic.IDictionary{ZXing.DecodeHintType,System.Object})">
            <summary>设置 Detector.detect(IDictionary`2&lt;DecodeHintType,Object&gt; hints) 的 存根</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubDetector.processFinderPatternInfo(ZXing.QrCode.Internal.FinderPatternInfo)">
            <summary>设置 Detector.processFinderPatternInfo(FinderPatternInfo info) 的 存根</summary>
        </member>
        <member name="T:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder">
            <summary>ZXing.QrCode.Internal.FinderPatternFinder 的存根类型</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.#ctor(ZXing.Common.BitMatrix)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.#ctor(ZXing.Common.BitMatrix,ZXing.ResultPointCallback)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.Image">
            <summary>设置 FinderPatternFinder.get_Image() 的 stub</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.ImageGet">
            <summary>设置 FinderPatternFinder.get_Image() 的 stub</summary>
        </member>
        <member name="M:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.InitializeStub">
            <summary>初始化 type StubFinderPatternFinder 的新实例</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.PossibleCenters">
            <summary>设置 FinderPatternFinder.get_PossibleCenters() 的 stub</summary>
        </member>
        <member name="F:ZXing.QrCode.Internal.Fakes.StubFinderPatternFinder.PossibleCentersGet">
            <summary>设置 FinderPatternFinder.get_PossibleCenters() 的 stub</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimBitmapRenderer">
            <summary>ZXing.Rendering.BitmapRenderer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimBitmapRenderer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimBitmapRenderer.#ctor(ZXing.Rendering.BitmapRenderer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.BackgroundGet">
            <summary>设置 BitmapRenderer.get_Background() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.BackgroundSetColor">
            <summary>设置 BitmapRenderer.set_Background(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.DpiXGet">
            <summary>设置 BitmapRenderer.get_DpiX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.DpiXSetNullableOfSingle">
            <summary>设置 BitmapRenderer.set_DpiX(Nullable`1&lt;Single&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.DpiYGet">
            <summary>设置 BitmapRenderer.get_DpiY() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.DpiYSetNullableOfSingle">
            <summary>设置 BitmapRenderer.set_DpiY(Nullable`1&lt;Single&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.ForegroundGet">
            <summary>设置 BitmapRenderer.get_Foreground() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.ForegroundSetColor">
            <summary>设置 BitmapRenderer.set_Foreground(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.RenderBitMatrixBarcodeFormatString">
            <summary>设置 BitmapRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 BitmapRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.TextFontGet">
            <summary>设置 BitmapRenderer.get_TextFont() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.AllInstances.TextFontSetFont">
            <summary>设置 BitmapRenderer.set_TextFont(Font value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.BackgroundGet">
            <summary>设置 BitmapRenderer.get_Background() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.BackgroundSetColor">
            <summary>设置 BitmapRenderer.set_Background(Color value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimBitmapRenderer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimBitmapRenderer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimBitmapRenderer.Bind(ZXing.Rendering.IBarcodeRenderer{System.Drawing.Bitmap})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.Constructor">
            <summary>设置 BitmapRenderer.BitmapRenderer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.DpiXGet">
            <summary>设置 BitmapRenderer.get_DpiX() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.DpiXSetNullableOfSingle">
            <summary>设置 BitmapRenderer.set_DpiX(Nullable`1&lt;Single&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.DpiYGet">
            <summary>设置 BitmapRenderer.get_DpiY() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.DpiYSetNullableOfSingle">
            <summary>设置 BitmapRenderer.set_DpiY(Nullable`1&lt;Single&gt; value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.ForegroundGet">
            <summary>设置 BitmapRenderer.get_Foreground() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.ForegroundSetColor">
            <summary>设置 BitmapRenderer.set_Foreground(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.RenderBitMatrixBarcodeFormatString">
            <summary>设置 BitmapRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 BitmapRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.StaticConstructor">
            <summary>设置 BitmapRenderer.BitmapRenderer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.TextFontGet">
            <summary>设置 BitmapRenderer.get_TextFont() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimBitmapRenderer.TextFontSetFont">
            <summary>设置 BitmapRenderer.set_TextFont(Font value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimPixelData">
            <summary>ZXing.Rendering.PixelData 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelData.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelData.#ctor(ZXing.Rendering.PixelData)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimPixelData.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.AllInstances.HeightGet">
            <summary>设置 PixelData.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.AllInstances.HeightSetInt32">
            <summary>设置 PixelData.set_Height(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.AllInstances.PixelsGet">
            <summary>设置 PixelData.get_Pixels() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.AllInstances.PixelsSetByteArray">
            <summary>设置 PixelData.set_Pixels(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.AllInstances.ToBitmap">
            <summary>设置 PixelData.ToBitmap() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.AllInstances.WidthGet">
            <summary>设置 PixelData.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.AllInstances.WidthSetInt32">
            <summary>设置 PixelData.set_Width(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelData.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelData.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.ConstructorInt32Int32ByteArray">
            <summary>设置 PixelData.PixelData(Int32 width, Int32 height, Byte[] pixels) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.HeightGet">
            <summary>设置 PixelData.get_Height() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.HeightSetInt32">
            <summary>设置 PixelData.set_Height(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.PixelsGet">
            <summary>设置 PixelData.get_Pixels() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.PixelsSetByteArray">
            <summary>设置 PixelData.set_Pixels(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.ToBitmap">
            <summary>设置 PixelData.ToBitmap() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.WidthGet">
            <summary>设置 PixelData.get_Width() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelData.WidthSetInt32">
            <summary>设置 PixelData.set_Width(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimPixelDataRenderer">
            <summary>ZXing.Rendering.PixelDataRenderer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelDataRenderer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelDataRenderer.#ctor(ZXing.Rendering.PixelDataRenderer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimPixelDataRenderer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.AllInstances.BackgroundGet">
            <summary>设置 PixelDataRenderer.get_Background() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.AllInstances.BackgroundSetColor">
            <summary>设置 PixelDataRenderer.set_Background(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.AllInstances.ForegroundGet">
            <summary>设置 PixelDataRenderer.get_Foreground() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.AllInstances.ForegroundSetColor">
            <summary>设置 PixelDataRenderer.set_Foreground(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.AllInstances.RenderBitMatrixBarcodeFormatString">
            <summary>设置 PixelDataRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.AllInstances.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 PixelDataRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.BackgroundGet">
            <summary>设置 PixelDataRenderer.get_Background() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.BackgroundSetColor">
            <summary>设置 PixelDataRenderer.set_Background(Color value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelDataRenderer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelDataRenderer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimPixelDataRenderer.Bind(ZXing.Rendering.IBarcodeRenderer{ZXing.Rendering.PixelData})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.Constructor">
            <summary>设置 PixelDataRenderer.PixelDataRenderer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.ForegroundGet">
            <summary>设置 PixelDataRenderer.get_Foreground() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.ForegroundSetColor">
            <summary>设置 PixelDataRenderer.set_Foreground(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.RenderBitMatrixBarcodeFormatString">
            <summary>设置 PixelDataRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimPixelDataRenderer.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 PixelDataRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimSvgRenderer">
            <summary>ZXing.Rendering.SvgRenderer 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.#ctor(ZXing.Rendering.SvgRenderer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances.BackgroundGet">
            <summary>设置 SvgRenderer.get_Background() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances.BackgroundSetColor">
            <summary>设置 SvgRenderer.set_Background(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances.CreateSvgRendererSvgImageBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 SvgRenderer.Create(SvgImage image, BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances.ForegroundGet">
            <summary>设置 SvgRenderer.get_Foreground() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances.ForegroundSetColor">
            <summary>设置 SvgRenderer.set_Foreground(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances.RenderBitMatrixBarcodeFormatString">
            <summary>设置 SvgRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AllInstances.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 SvgRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.AppendDarkCellSvgRendererSvgImageBitMatrixInt32Int32">
            <summary>设置 SvgRenderer.AppendDarkCell(SvgImage image, BitMatrix matrix, Int32 offsetX, Int32 offSetY) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.BackgroundGet">
            <summary>设置 SvgRenderer.get_Background() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.BackgroundSetColor">
            <summary>设置 SvgRenderer.set_Background(Color value) 的 填充码</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.Bind(ZXing.Rendering.IBarcodeRenderer{ZXing.Rendering.SvgRenderer.SvgImage})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.Constructor">
            <summary>设置 SvgRenderer.SvgRenderer() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.CreateSvgRendererSvgImageBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 SvgRenderer.Create(SvgImage image, BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.FindMaximumRectangleBitMatrixBitMatrixInt32Int32Int32Int32Out">
            <summary>设置 SvgRenderer.FindMaximumRectangle(BitMatrix matrix, BitMatrix processed, Int32 startPosX, Int32 startPosY, Int32 endPosY, Int32&amp; endPosX) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ForegroundGet">
            <summary>设置 SvgRenderer.get_Foreground() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ForegroundSetColor">
            <summary>设置 SvgRenderer.set_Foreground(Color value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.RenderBitMatrixBarcodeFormatString">
            <summary>设置 SvgRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 SvgRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage">
            <summary>ZXing.Rendering.SvgRenderer+SvgImage 的填充码类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.#ctor(ZXing.Rendering.SvgRenderer.SvgImage)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AddEnd">
            <summary>设置 SvgImage.AddEnd() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AddHeader">
            <summary>设置 SvgImage.AddHeader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AddRecInt32Int32Int32Int32">
            <summary>设置 SvgImage.AddRec(Int32 posX, Int32 posY, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AddTagInt32Int32Int32Int32ColorColor">
            <summary>设置 SvgImage.AddTag(Int32 displaysizeX, Int32 displaysizeY, Int32 viewboxSizeX, Int32 viewboxSizeY, Color background, Color fill) 的 填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances.AddEnd">
            <summary>设置 SvgImage.AddEnd() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances.AddHeader">
            <summary>设置 SvgImage.AddHeader() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances.AddRecInt32Int32Int32Int32">
            <summary>设置 SvgImage.AddRec(Int32 posX, Int32 posY, Int32 width, Int32 height) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances.AddTagInt32Int32Int32Int32ColorColor">
            <summary>设置 SvgImage.AddTag(Int32 displaysizeX, Int32 displaysizeY, Int32 viewboxSizeX, Int32 viewboxSizeY, Color background, Color fill) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances.ContentGet">
            <summary>设置 SvgImage.get_Content() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances.ContentSetString">
            <summary>设置 SvgImage.set_Content(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.AllInstances.ToString01">
            <summary>设置 SvgImage.ToString() 的 填充码</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.Constructor">
            <summary>设置 SvgImage.SvgImage() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.ConstructorString">
            <summary>设置 SvgImage.SvgImage(String content) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.ContentGet">
            <summary>设置 SvgImage.get_Content() 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.ContentSetString">
            <summary>设置 SvgImage.set_Content(String value) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.ConvertAlphaColor">
            <summary>设置 SvgImage.ConvertAlpha(Color alpha) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.GetBackgroundStyleColor">
            <summary>设置 SvgImage.GetBackgroundStyle(Color color) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.GetColorRgbColor">
            <summary>设置 SvgImage.GetColorRgb(Color color) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.GetColorRgbaColor">
            <summary>设置 SvgImage.GetColorRgba(Color color) 的 填充码</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.ShimSvgRenderer.ShimSvgImage.ToString">
            <summary>设置 SvgImage.ToString() 的 填充码</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.StubBitmapRenderer">
            <summary>ZXing.Rendering.BitmapRenderer 的存根类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubBitmapRenderer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.StubBitmapRenderer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubBitmapRenderer.InitializeStub">
            <summary>初始化 type StubBitmapRenderer 的新实例</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.StubBitmapRenderer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.StubBitmapRenderer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubBitmapRenderer.Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>设置 BitmapRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 存根</summary>
        </member>
        <member name="F:ZXing.Rendering.Fakes.StubBitmapRenderer.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 BitmapRenderer.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 stub</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.StubIBarcodeRenderer`1">
            <summary>ZXing.Rendering.IBarcodeRenderer`1 的存根类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubIBarcodeRenderer`1.#ctor">
            <summary>初始化 type StubIBarcodeRenderer 的新实例</summary>
        </member>
        <member name="F:ZXing.Rendering.Fakes.StubIBarcodeRenderer`1.RenderBitMatrixBarcodeFormatString">
            <summary>设置 IBarcodeRenderer`1.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 stub</summary>
        </member>
        <member name="F:ZXing.Rendering.Fakes.StubIBarcodeRenderer`1.RenderBitMatrixBarcodeFormatStringEncodingOptions">
            <summary>设置 IBarcodeRenderer`1.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 stub</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubIBarcodeRenderer`1.ZXing#Rendering#IBarcodeRenderer{TOutput}#Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String)">
            <summary>设置 IBarcodeRenderer`1.Render(BitMatrix matrix, BarcodeFormat format, String content) 的 存根</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubIBarcodeRenderer`1.ZXing#Rendering#IBarcodeRenderer{TOutput}#Render(ZXing.Common.BitMatrix,ZXing.BarcodeFormat,System.String,ZXing.Common.EncodingOptions)">
            <summary>设置 IBarcodeRenderer`1.Render(BitMatrix matrix, BarcodeFormat format, String content, EncodingOptions options) 的 存根</summary>
        </member>
        <member name="T:ZXing.Rendering.Fakes.StubSvgRenderer">
            <summary>ZXing.Rendering.SvgRenderer 的存根类型</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubSvgRenderer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.StubSvgRenderer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:ZXing.Rendering.Fakes.StubSvgRenderer.InitializeStub">
            <summary>初始化 type StubSvgRenderer 的新实例</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.StubSvgRenderer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:ZXing.Rendering.Fakes.StubSvgRenderer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
